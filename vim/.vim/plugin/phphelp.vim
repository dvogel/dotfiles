" File: phphelp.vim
" Author: Drew Vogel (dvogel AT intercarve DOT net)
" Version: 0.1
" Last Modified: Sept 04, 2007
" Copyright: Copyright (C) 2002-2007 Yegappan Lakshmanan
"            Permission is hereby granted to use and distribute this code,
"            with or without modifications, provided that this copyright
"            notice is copied with it. Like anything else that's free,
"            taglist.vim is provided *as is* and comes with no warranty of any
"            kind, either expressed or implied. In no event will the copyright
"            holder be liable for any damamges resulting from the use of this
"            software.
"
" The "Tag List" plugin is a source code browser plugin for Vim and provides
" an overview of the structure of the programming language files and allows
" you to efficiently browse through source code files for different
" programming languages.  You can visit the taglist plugin home page for more
" information:
"
"       http://vim-taglist.sourceforge.net
"
" You can subscribe to the taglist mailing list to post your questions
" or suggestions for improvement or to report bugs. Visit the following
" page for subscribing to the mailing list:
"
"       http://groups.yahoo.com/group/taglist/
"
" For more information about using this plugin, after installing the
" taglist plugin, use the ":help taglist" command.
"
" Installation
" ------------
" 1. Download the taglist.zip file and unzip the files to the $HOME/.vim
"    or the $HOME/vimfiles or the $VIM/vimfiles directory. This should
"    unzip the following two files (the directory structure should be
"    preserved):
"
"       plugin/taglist.vim - main taglist plugin file
"       doc/taglist.txt    - documentation (help) file
"
"    Refer to the 'add-plugin', 'add-global-plugin' and 'runtimepath'
"    Vim help pages for more details about installing Vim plugins.
" 2. Change to the $HOME/.vim/doc or $HOME/vimfiles/doc or
"    $VIM/vimfiles/doc directory, start Vim and run the ":helptags ."
"    command to process the taglist help file.
" 3. If the exuberant ctags utility is not present in your PATH, then set the
"    Tlist_Ctags_Cmd variable to point to the location of the exuberant ctags
"    utility (not to the directory) in the .vimrc file.
" 4. If you are running a terminal/console version of Vim and the
"    terminal doesn't support changing the window width then set the
"    'Tlist_Inc_Winwidth' variable to 0 in the .vimrc file.
" 5. Restart Vim.
" 6. You can now use the ":TlistToggle" command to open/close the taglist
"    window. You can use the ":help taglist" command to get more
"    information about using the taglist plugin.
"
" ****************** Do not modify after this line ************************


function! Show_PHP_Declaration()
	let s:fname = expand("<cword>")
	if has_key(s:phpprotos, s:fname)
		let g:phpproto=s:phpprotos[s:fname]
	else
		let g:phpproto=""
	endif
		set stl=%F\ \ \ %20{g:phpproto}
endfunction


function! Show_PHP_Help_For_Word()
	let s:fname = substitute(expand("<cword>"), "_", "-", "g")
	let s:path = "/home/dvogel/devel/phpdoc/html/function." . s:fname  . ".html"
	let s:uri = "file://" . s:path 
	if filereadable(s:path)
		let s:cmd = ":r !elinks -dump 1 " . s:uri
		:8new
		:execute s:cmd
		:0
		/Description
		:+3
		:set ro
		:set buftype=nofile
	endif
endfunction


:au CursorMoved,CursorMovedI *.php :call Show_PHP_Declaration()

let s:phpprotos = {}
let s:phpprotos["gd_info"] = "array gd_info()"
let s:phpprotos["imageloadfont"] = "int imageloadfont(string filename)"
let s:phpprotos["imagesetstyle"] = "bool imagesetstyle(resource im, array styles)"
let s:phpprotos["imagecreatetruecolor"] = "resource imagecreatetruecolor(int x_size, int y_size)"
let s:phpprotos["imageistruecolor"] = "bool imageistruecolor(resource im)"
let s:phpprotos["imagetruecolortopalette"] = "void imagetruecolortopalette(resource im, bool ditherFlag, int colorsWanted)"
let s:phpprotos["imagecolormatch"] = "bool imagecolormatch(resource im1, resource im2)"
let s:phpprotos["imagesetthickness"] = "bool imagesetthickness(resource im, int thickness)"
let s:phpprotos["imagefilledellipse"] = "bool imagefilledellipse(resource im, int cx, int cy, int w, int h, int color)"
let s:phpprotos["imagefilledarc"] = "bool imagefilledarc(resource im, int cx, int cy, int w, int h, int s, int e, int col, int style)"
let s:phpprotos["imagealphablending"] = "bool imagealphablending(resource im, bool on)"
let s:phpprotos["imagesavealpha"] = "bool imagesavealpha(resource im, bool on)"
let s:phpprotos["imagelayereffect"] = "bool imagelayereffect(resource im, int effect)"
let s:phpprotos["imagecolorallocatealpha"] = "int imagecolorallocatealpha(resource im, int red, int green, int blue, int alpha)"
let s:phpprotos["imagecolorresolvealpha"] = "int imagecolorresolvealpha(resource im, int red, int green, int blue, int alpha)"
let s:phpprotos["imagecolorclosestalpha"] = "int imagecolorclosestalpha(resource im, int red, int green, int blue, int alpha)"
let s:phpprotos["imagecolorexactalpha"] = "int imagecolorexactalpha(resource im, int red, int green, int blue, int alpha)"
let s:phpprotos["imagecopyresampled"] = "bool imagecopyresampled(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)"
let s:phpprotos["imagegrabwindow"] = "resource imagegrabwindow(int window_handle [, int client_area])"
let s:phpprotos["imagegrabscreen"] = "resource imagegrabscreen()"
let s:phpprotos["imagerotate"] = "resource imagerotate(resource src_im, float angle, int bgdcolor [, int ignoretransparent])"
let s:phpprotos["imagesettile"] = "bool imagesettile(resource image, resource tile)"
let s:phpprotos["imagesetbrush"] = "bool imagesetbrush(resource image, resource brush)"
let s:phpprotos["imagecreate"] = "resource imagecreate(int x_size, int y_size)"
let s:phpprotos["imagetypes"] = "int imagetypes(void)"
let s:phpprotos["imagecreatefromstring"] = "resource imagecreatefromstring(string image)"
let s:phpprotos["imagecreatefromgif"] = "resource imagecreatefromgif(string filename)"
let s:phpprotos["imagecreatefromjpeg"] = "resource imagecreatefromjpeg(string filename)"
let s:phpprotos["imagecreatefrompng"] = "resource imagecreatefrompng(string filename)"
let s:phpprotos["imagecreatefromxbm"] = "resource imagecreatefromxbm(string filename)"
let s:phpprotos["imagecreatefromxpm"] = "resource imagecreatefromxpm(string filename)"
let s:phpprotos["imagecreatefromwbmp"] = "resource imagecreatefromwbmp(string filename)"
let s:phpprotos["imagecreatefromgd"] = "resource imagecreatefromgd(string filename)"
let s:phpprotos["imagecreatefromgd2"] = "resource imagecreatefromgd2(string filename)"
let s:phpprotos["imagecreatefromgd2part"] = "resource imagecreatefromgd2part(string filename, int srcX, int srcY, int width, int height)"
let s:phpprotos["imagexbm"] = "int imagexbm(int im, string filename [, int foreground])"
let s:phpprotos["imagegif"] = "bool imagegif(resource im [, string filename])"
let s:phpprotos["imagepng"] = "bool imagepng(resource im [, string filename])"
let s:phpprotos["imagejpeg"] = "bool imagejpeg(resource im [, string filename [, int quality]])"
let s:phpprotos["imagewbmp"] = "bool imagewbmp(resource im [, string filename, [, int foreground]])"
let s:phpprotos["imagegd"] = "bool imagegd(resource im [, string filename])"
let s:phpprotos["imagegd2"] = "bool imagegd2(resource im [, string filename, [, int chunk_size, [, int type]]])"
let s:phpprotos["imagedestroy"] = "bool imagedestroy(resource im)"
let s:phpprotos["imagecolorallocate"] = "int imagecolorallocate(resource im, int red, int green, int blue)"
let s:phpprotos["imagepalettecopy"] = "void imagepalettecopy(resource dst, resource src)"
let s:phpprotos["imagecolorat"] = "int imagecolorat(resource im, int x, int y)"
let s:phpprotos["imagecolorclosest"] = "int imagecolorclosest(resource im, int red, int green, int blue)"
let s:phpprotos["imagecolorclosesthwb"] = "int imagecolorclosesthwb(resource im, int red, int green, int blue)"
let s:phpprotos["imagecolordeallocate"] = "bool imagecolordeallocate(resource im, int index)"
let s:phpprotos["imagecolorresolve"] = "int imagecolorresolve(resource im, int red, int green, int blue)"
let s:phpprotos["imagecolorexact"] = "int imagecolorexact(resource im, int red, int green, int blue)"
let s:phpprotos["imagecolorset"] = "void imagecolorset(resource im, int col, int red, int green, int blue)"
let s:phpprotos["imagecolorsforindex"] = "array imagecolorsforindex(resource im, int col)"
let s:phpprotos["imagegammacorrect"] = "bool imagegammacorrect(resource im, float inputgamma, float outputgamma)"
let s:phpprotos["imagesetpixel"] = "bool imagesetpixel(resource im, int x, int y, int col)"
let s:phpprotos["imageline"] = "bool imageline(resource im, int x1, int y1, int x2, int y2, int col)"
let s:phpprotos["imagedashedline"] = "bool imagedashedline(resource im, int x1, int y1, int x2, int y2, int col)"
let s:phpprotos["imagerectangle"] = "bool imagerectangle(resource im, int x1, int y1, int x2, int y2, int col)"
let s:phpprotos["imagefilledrectangle"] = "bool imagefilledrectangle(resource im, int x1, int y1, int x2, int y2, int col)"
let s:phpprotos["imagearc"] = "bool imagearc(resource im, int cx, int cy, int w, int h, int s, int e, int col)"
let s:phpprotos["imageellipse"] = "bool imageellipse(resource im, int cx, int cy, int w, int h, int color)"
let s:phpprotos["imagefilltoborder"] = "bool imagefilltoborder(resource im, int x, int y, int border, int col)"
let s:phpprotos["imagefill"] = "bool imagefill(resource im, int x, int y, int col)"
let s:phpprotos["imagecolorstotal"] = "int imagecolorstotal(resource im)"
let s:phpprotos["imagecolortransparent"] = "int imagecolortransparent(resource im [, int col])"
let s:phpprotos["imageinterlace"] = "int imageinterlace(resource im [, int interlace])"
let s:phpprotos["imagepolygon"] = "bool imagepolygon(resource im, array point, int num_points, int col)"
let s:phpprotos["imagefilledpolygon"] = "bool imagefilledpolygon(resource im, array point, int num_points, int col)"
let s:phpprotos["imagefontwidth"] = "int imagefontwidth(int font)"
let s:phpprotos["imagefontheight"] = "int imagefontheight(int font)"
let s:phpprotos["imagechar"] = "bool imagechar(resource im, int font, int x, int y, string c, int col)"
let s:phpprotos["imagecharup"] = "bool imagecharup(resource im, int font, int x, int y, string c, int col)"
let s:phpprotos["imagestring"] = "bool imagestring(resource im, int font, int x, int y, string str, int col)"
let s:phpprotos["imagestringup"] = "bool imagestringup(resource im, int font, int x, int y, string str, int col)"
let s:phpprotos["imagecopy"] = "bool imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)"
let s:phpprotos["imagecopymerge"] = "bool imagecopymerge(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)"
let s:phpprotos["imagecopymergegray"] = "bool imagecopymergegray(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)"
let s:phpprotos["imagecopyresized"] = "bool imagecopyresized(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)"
let s:phpprotos["imagesx"] = "int imagesx(resource im)"
let s:phpprotos["imagesy"] = "int imagesy(resource im)"
let s:phpprotos["imageftbbox"] = "array imageftbbox(float size, float angle, string font_file, string text [, array extrainfo])"
let s:phpprotos["imagefttext"] = "array imagefttext(resource im, float size, float angle, int x, int y, int col, string font_file, string text [, array extrainfo])"
let s:phpprotos["imagettfbbox"] = "array imagettfbbox(float size, float angle, string font_file, string text)"
let s:phpprotos["imagettftext"] = "array imagettftext(resource im, float size, float angle, int x, int y, int col, string font_file, string text)"
let s:phpprotos["imagepsloadfont"] = "resource imagepsloadfont(string pathname)"
let s:phpprotos["imagepscopyfont"] = "int imagepscopyfont(int font_index)"
let s:phpprotos["imagepsfreefont"] = "bool imagepsfreefont(resource font_index)"
let s:phpprotos["imagepsencodefont"] = "bool imagepsencodefont(resource font_index, string filename)"
let s:phpprotos["imagepsextendfont"] = "bool imagepsextendfont(resource font_index, float extend)"
let s:phpprotos["imagepsslantfont"] = "bool imagepsslantfont(resource font_index, float slant)"
let s:phpprotos["imagepstext"] = "array imagepstext(resource image, string text, resource font, int size, int foreground, int background, int xcoord, int ycoord [, int space, int tightness, float angle, int antialias])"
let s:phpprotos["imagepsbbox"] = "array imagepsbbox(string text, resource font, int size [, int space, int tightness, int angle])"
let s:phpprotos["image2wbmp"] = "bool image2wbmp(resource im [, string filename [, int threshold]])"
let s:phpprotos["bool jpeg2wbmp "] = "bool jpeg2wbmp (string f_org, string f_dest, int d_height, int d_width, int threshold)"
let s:phpprotos["bool png2wbmp "] = "bool png2wbmp (string f_org, string f_dest, int d_height, int d_width, int threshold)"
let s:phpprotos["imagefilter"] = "bool imagefilter(resource src_im, int filtertype, [args] )"
let s:phpprotos["imageconvolution"] = "resource imageconvolution(resource src_im, array matrix3x3, double div, double offset)"
let s:phpprotos["imageantialias"] = "bool imageantialias(resource im, bool on)"
let s:phpprotos["bzread"] = "string bzread(resource bz[, int length])"
let s:phpprotos["bzopen"] = "resource bzopen(string|int file|fp, string mode)"
let s:phpprotos["bzerrno"] = "int bzerrno(resource bz)"
let s:phpprotos["bzerrstr"] = "string bzerrstr(resource bz)"
let s:phpprotos["bzerror"] = "array bzerror(resource bz)"
let s:phpprotos["bzcompress"] = "string bzcompress(string source [, int blocksize100k [, int workfactor]])"
let s:phpprotos["bzdecompress"] = "string bzdecompress(string source [, int small])"
let s:phpprotos["dba_popen"] = "resource dba_popen(string path, string mode [, string handlername, string ...])"
let s:phpprotos["dba_open"] = "resource dba_open(string path, string mode [, string handlername, string ...])"
let s:phpprotos["dba_close"] = "void dba_close(resource handle)"
let s:phpprotos["dba_exists"] = "bool dba_exists(string key, resource handle)"
let s:phpprotos["dba_fetch"] = "string dba_fetch(string key, [int skip ,] resource handle)"
let s:phpprotos["dba_key_split"] = "array|false dba_key_split(string key)"
let s:phpprotos["dba_firstkey"] = "string dba_firstkey(resource handle)"
let s:phpprotos["dba_nextkey"] = "string dba_nextkey(resource handle)"
let s:phpprotos["dba_delete"] = "bool dba_delete(string key, resource handle)"
let s:phpprotos["dba_insert"] = "bool dba_insert(string key, string value, resource handle)"
let s:phpprotos["dba_replace"] = "bool dba_replace(string key, string value, resource handle)"
let s:phpprotos["dba_optimize"] = "bool dba_optimize(resource handle)"
let s:phpprotos["dba_sync"] = "bool dba_sync(resource handle)"
let s:phpprotos["dba_handlers"] = "array dba_handlers([bool full_info])"
let s:phpprotos["dba_list"] = "array dba_list()"
let s:phpprotos["DOMEntityReference::__construct"] = "void DOMEntityReference::__construct(string name); */"
let s:phpprotos["dom_domimplementationsource_get_domimplementation"] = "domdomimplementation dom_domimplementationsource_get_domimplementation(string features);"
let s:phpprotos["dom_domimplementationsource_get_domimplementations"] = "domimplementationlist dom_domimplementationsource_get_domimplementations(string features);"
let s:phpprotos["dom_nodelist_item"] = "DOMNode dom_nodelist_item(int index);"
let s:phpprotos["DOMDocumentFragment::__construct"] = "void DOMDocumentFragment::__construct(); */"
let s:phpprotos["DOMDocumentFragment::appendXML"] = "void DOMDocumentFragment::appendXML(string data); */"
let s:phpprotos["DOMXPath::__construct"] = "void DOMXPath::__construct(DOMDocument doc); */"
let s:phpprotos["dom_xpath_register_ns"] = "boolean dom_xpath_register_ns(string prefix, string uri); */"
let s:phpprotos["dom_xpath_query"] = "DOMNodeList dom_xpath_query(string expr [,DOMNode context]); */"
let s:phpprotos["dom_xpath_evaluate"] = "mixed dom_xpath_evaluate(string expr [,DOMNode context]); */"
let s:phpprotos["DOMComment::__construct"] = "void DOMComment::__construct([string value]); */"
let s:phpprotos["dom_domimplementationlist_item"] = "domdomimplementation dom_domimplementationlist_item(int index);"
let s:phpprotos["dom_characterdata_substring_data"] = "string dom_characterdata_substring_data(int offset, int count);"
let s:phpprotos["dom_characterdata_append_data"] = "void dom_characterdata_append_data(string arg);"
let s:phpprotos["dom_characterdata_insert_data"] = "void dom_characterdata_insert_data(int offset, string arg);"
let s:phpprotos["dom_characterdata_delete_data"] = "void dom_characterdata_delete_data(int offset, int count);"
let s:phpprotos["dom_characterdata_replace_data"] = "void dom_characterdata_replace_data(int offset, int count, string arg);"
let s:phpprotos["dom_domconfiguration_set_parameter"] = "dom_void dom_domconfiguration_set_parameter(string name, domuserdata value);"
let s:phpprotos["dom_domconfiguration_get_parameter"] = "domdomuserdata dom_domconfiguration_get_parameter(string name);"
let s:phpprotos["dom_domconfiguration_can_set_parameter"] = "boolean dom_domconfiguration_can_set_parameter(string name, domuserdata value);"
let s:phpprotos["dom_document_create_element"] = "DOMElement dom_document_create_element(string tagName [, string value]);"
let s:phpprotos["dom_document_create_document_fragment"] = "DOMDocumentFragment dom_document_create_document_fragment();"
let s:phpprotos["dom_document_create_text_node"] = "DOMText dom_document_create_text_node(string data);"
let s:phpprotos["dom_document_create_comment"] = "DOMComment dom_document_create_comment(string data);"
let s:phpprotos["dom_document_create_cdatasection"] = "DOMCdataSection dom_document_create_cdatasection(string data);"
let s:phpprotos["dom_document_create_processing_instruction"] = "DOMProcessingInstruction dom_document_create_processing_instruction(string target, string data);"
let s:phpprotos["dom_document_create_attribute"] = "DOMAttr dom_document_create_attribute(string name);"
let s:phpprotos["dom_document_create_entity_reference"] = "DOMEntityReference dom_document_create_entity_reference(string name);"
let s:phpprotos["dom_document_get_elements_by_tag_name"] = "DOMNodeList dom_document_get_elements_by_tag_name(string tagname);"
let s:phpprotos["dom_document_import_node"] = "DOMNode dom_document_import_node(DOMNode importedNode, boolean deep);"
let s:phpprotos["dom_document_create_element_ns"] = "DOMElement dom_document_create_element_ns(string namespaceURI, string qualifiedName [,string value]);"
let s:phpprotos["dom_document_create_attribute_ns"] = "DOMAttr dom_document_create_attribute_ns(string namespaceURI, string qualifiedName);"
let s:phpprotos["dom_document_get_elements_by_tag_name_ns"] = "DOMNodeList dom_document_get_elements_by_tag_name_ns(string namespaceURI, string localName);"
let s:phpprotos["dom_document_get_element_by_id"] = "DOMElement dom_document_get_element_by_id(string elementId);"
let s:phpprotos["dom_document_adopt_node"] = "DOMNode dom_document_adopt_node(DOMNode source);"
let s:phpprotos["dom_document_normalize_document"] = "void dom_document_normalize_document();"
let s:phpprotos["dom_document_rename_node"] = "DOMNode dom_document_rename_node(node n, string namespaceURI, string qualifiedName);"
let s:phpprotos["DOMDocument::__construct"] = "void DOMDocument::__construct([string version], [string encoding]); */"
let s:phpprotos["dom_document_load"] = "DOMNode dom_document_load(string source [, int options]);"
let s:phpprotos["dom_document_loadxml"] = "DOMNode dom_document_loadxml(string source [, int options]);"
let s:phpprotos["dom_document_save"] = "int dom_document_save(string file);"
let s:phpprotos["dom_document_savexml"] = "string dom_document_savexml([node n]);"
let s:phpprotos["dom_document_xinclude"] = "int dom_document_xinclude([int options])"
let s:phpprotos["dom_document_validate"] = "boolean dom_document_validate();"
let s:phpprotos["dom_document_schema_validate_file"] = "boolean dom_document_schema_validate_file(string filename); */"
let s:phpprotos["dom_document_schema_validate"] = "boolean dom_document_schema_validate(string source); */"
let s:phpprotos["dom_document_relaxNG_validate_file"] = "boolean dom_document_relaxNG_validate_file(string filename); */"
let s:phpprotos["dom_document_relaxNG_validate_xml"] = "boolean dom_document_relaxNG_validate_xml(string source); */"
let s:phpprotos["dom_document_load_html_file"] = "DOMNode dom_document_load_html_file(string source);"
let s:phpprotos["dom_document_load_html"] = "DOMNode dom_document_load_html(string source);"
let s:phpprotos["dom_document_save_html_file"] = "int dom_document_save_html_file(string file);"
let s:phpprotos["dom_document_save_html"] = "string dom_document_save_html();"
let s:phpprotos["DOMDocument::registerNodeClass"] = "boolean DOMDocument::registerNodeClass(string baseclass, string extendedclass);"
let s:phpprotos["DOMElement::__construct"] = "void DOMElement::__construct(string name, [string value], [string uri]); */"
let s:phpprotos["dom_element_get_attribute"] = "string dom_element_get_attribute(string name);"
let s:phpprotos["dom_element_set_attribute"] = "void dom_element_set_attribute(string name, string value);"
let s:phpprotos["dom_element_remove_attribute"] = "void dom_element_remove_attribute(string name);"
let s:phpprotos["dom_element_get_attribute_node"] = "DOMAttr dom_element_get_attribute_node(string name);"
let s:phpprotos["dom_element_set_attribute_node"] = "DOMAttr dom_element_set_attribute_node(DOMAttr newAttr);"
let s:phpprotos["dom_element_remove_attribute_node"] = "DOMAttr dom_element_remove_attribute_node(DOMAttr oldAttr);"
let s:phpprotos["dom_element_get_elements_by_tag_name"] = "DOMNodeList dom_element_get_elements_by_tag_name(string name);"
let s:phpprotos["dom_element_get_attribute_ns"] = "string dom_element_get_attribute_ns(string namespaceURI, string localName);"
let s:phpprotos["dom_element_set_attribute_ns"] = "void dom_element_set_attribute_ns(string namespaceURI, string qualifiedName, string value);"
let s:phpprotos["dom_element_remove_attribute_ns"] = "void dom_element_remove_attribute_ns(string namespaceURI, string localName);"
let s:phpprotos["dom_element_get_attribute_node_ns"] = "DOMAttr dom_element_get_attribute_node_ns(string namespaceURI, string localName);"
let s:phpprotos["dom_element_set_attribute_node_ns"] = "DOMAttr dom_element_set_attribute_node_ns(DOMAttr newAttr);"
let s:phpprotos["dom_element_get_elements_by_tag_name_ns"] = "DOMNodeList dom_element_get_elements_by_tag_name_ns(string namespaceURI, string localName);"
let s:phpprotos["dom_element_has_attribute"] = "boolean dom_element_has_attribute(string name);"
let s:phpprotos["dom_element_has_attribute_ns"] = "boolean dom_element_has_attribute_ns(string namespaceURI, string localName);"
let s:phpprotos["dom_element_set_id_attribute"] = "void dom_element_set_id_attribute(string name, boolean isId);"
let s:phpprotos["dom_element_set_id_attribute_ns"] = "void dom_element_set_id_attribute_ns(string namespaceURI, string localName, boolean isId);"
let s:phpprotos["dom_element_set_id_attribute_node"] = "void dom_element_set_id_attribute_node(attr idAttr, boolean isId);"
let s:phpprotos["DOMCdataSection::__construct"] = "void DOMCdataSection::__construct(string value); */"
let s:phpprotos["DOMAttr::__construct"] = "void DOMAttr::__construct(string name, [string value]); */"
let s:phpprotos["dom_attr_is_id"] = "boolean dom_attr_is_id();"
let s:phpprotos["dom_string_extend_find_offset16"] = "int dom_string_extend_find_offset16(int offset32);"
let s:phpprotos["dom_string_extend_find_offset32"] = "int dom_string_extend_find_offset32(int offset16);"
let s:phpprotos["dom_namelist_get_name"] = "string dom_namelist_get_name(int index);"
let s:phpprotos["dom_namelist_get_namespace_uri"] = "string dom_namelist_get_namespace_uri(int index);"
let s:phpprotos["dom_domimplementation_has_feature"] = "boolean dom_domimplementation_has_feature(string feature, string version);"
let s:phpprotos["dom_domimplementation_create_document_type"] = "DOMDocumentType dom_domimplementation_create_document_type(string qualifiedName, string publicId, string systemId);"
let s:phpprotos["dom_domimplementation_create_document"] = "DOMDocument dom_domimplementation_create_document(string namespaceURI, string qualifiedName, DOMDocumentType doctype);"
let s:phpprotos["dom_domimplementation_get_feature"] = "DOMNode dom_domimplementation_get_feature(string feature, string version);"
let s:phpprotos["dom_node_insert_before"] = "domnode dom_node_insert_before(DomNode newChild, DomNode refChild);"
let s:phpprotos["dom_node_replace_child"] = "DomNode dom_node_replace_child(DomNode newChild, DomNode oldChild);"
let s:phpprotos["dom_node_remove_child"] = "DomNode dom_node_remove_child(DomNode oldChild);"
let s:phpprotos["dom_node_append_child"] = "DomNode dom_node_append_child(DomNode newChild);"
let s:phpprotos["dom_node_has_child_nodes"] = "boolean dom_node_has_child_nodes();"
let s:phpprotos["dom_node_clone_node"] = "DomNode dom_node_clone_node(boolean deep);"
let s:phpprotos["dom_node_normalize"] = "void dom_node_normalize();"
let s:phpprotos["dom_node_is_supported"] = "boolean dom_node_is_supported(string feature, string version);"
let s:phpprotos["dom_node_has_attributes"] = "boolean dom_node_has_attributes();"
let s:phpprotos["dom_node_compare_document_position"] = "short dom_node_compare_document_position(DomNode other);"
let s:phpprotos["dom_node_is_same_node"] = "boolean dom_node_is_same_node(DomNode other);"
let s:phpprotos["dom_node_lookup_prefix"] = "string dom_node_lookup_prefix(string namespaceURI);"
let s:phpprotos["dom_node_is_default_namespace"] = "boolean dom_node_is_default_namespace(string namespaceURI);"
let s:phpprotos["dom_node_lookup_namespace_uri"] = "string dom_node_lookup_namespace_uri(string prefix);"
let s:phpprotos["dom_node_is_equal_node"] = "boolean dom_node_is_equal_node(DomNode arg);"
let s:phpprotos["dom_node_get_feature"] = "DomNode dom_node_get_feature(string feature, string version);"
let s:phpprotos["dom_node_set_user_data"] = "DomUserData dom_node_set_user_data(string key, DomUserData data, userdatahandler handler);"
let s:phpprotos["dom_node_get_user_data"] = "DomUserData dom_node_get_user_data(string key);"
let s:phpprotos["DOMNode::C14N"] = "string DOMNode::C14N([bool exclusive [, bool with_comments [, array xpath [, array ns_prefixes]]]])"
let s:phpprotos["DOMNode::C14NFile"] = "int DOMNode::C14NFile(string uri [, bool exclusive [, bool with_comments [, array xpath [, array ns_prefixes]]]])"
let s:phpprotos["DOMNode::getNodePath"] = "int DOMNode::getNodePath()"
let s:phpprotos["DOMText::__construct"] = "void DOMText::__construct([string value]); */"
let s:phpprotos["dom_text_split_text"] = "DOMText dom_text_split_text(int offset);"
let s:phpprotos["dom_text_is_whitespace_in_element_content"] = "boolean dom_text_is_whitespace_in_element_content();"
let s:phpprotos["dom_text_replace_whole_text"] = "DOMText dom_text_replace_whole_text(string content);"
let s:phpprotos["dom_domerrorhandler_handle_error"] = "dom_boolean dom_domerrorhandler_handle_error(domerror error);"
let s:phpprotos["dom_import_simplexml"] = "somNode dom_import_simplexml(sxeobject node)"
let s:phpprotos["dom_domstringlist_item"] = "domstring dom_domstringlist_item(int index);"
let s:phpprotos["DOMProcessingInstruction::__construct"] = "void DOMProcessingInstruction::__construct(string name, [string value]); */"
let s:phpprotos["dom_userdatahandler_handle"] = "dom_void dom_userdatahandler_handle(short operation, string key, domobject data, node src, node dst);"
let s:phpprotos["dom_namednodemap_get_named_item"] = "DOMNode dom_namednodemap_get_named_item(string name);"
let s:phpprotos["dom_namednodemap_set_named_item"] = "DOMNode dom_namednodemap_set_named_item(DOMNode arg);"
let s:phpprotos["dom_namednodemap_remove_named_item"] = "DOMNode dom_namednodemap_remove_named_item(string name);"
let s:phpprotos["dom_namednodemap_item"] = "DOMNode dom_namednodemap_item(int index);"
let s:phpprotos["dom_namednodemap_get_named_item_ns"] = "DOMNode dom_namednodemap_get_named_item_ns(string namespaceURI, string localName);"
let s:phpprotos["dom_namednodemap_set_named_item_ns"] = "DOMNode dom_namednodemap_set_named_item_ns(DOMNode arg);"
let s:phpprotos["dom_namednodemap_remove_named_item_ns"] = "DOMNode dom_namednodemap_remove_named_item_ns(string namespaceURI, string localName);"
let s:phpprotos["fdf_open"] = "resource fdf_open(string filename)"
let s:phpprotos["fdf_open_string"] = "resource fdf_open_string(string fdf_data)"
let s:phpprotos["fdf_create"] = "resource fdf_create(void)"
let s:phpprotos["fdf_close"] = "void fdf_close(resource fdfdoc)"
let s:phpprotos["fdf_get_value"] = "string fdf_get_value(resource fdfdoc, string fieldname [, int which])"
let s:phpprotos["fdf_set_value"] = "bool fdf_set_value(resource fdfdoc, string fieldname, mixed value [, int isname])"
let s:phpprotos["fdf_next_field_name"] = "string fdf_next_field_name(resource fdfdoc [, string fieldname])"
let s:phpprotos["fdf_set_ap"] = "bool fdf_set_ap(resource fdfdoc, string fieldname, int face, string filename, int pagenr)"
let s:phpprotos["fdf_get_ap"] = "bool fdf_get_ap(resource fdfdoc, string fieldname, int face, string filename) "
let s:phpprotos["fdf_get_encoding"] = "string fdf_get_encoding(resource fdf) "
let s:phpprotos["fdf_set_status"] = "bool fdf_set_status(resource fdfdoc, string status)"
let s:phpprotos["fdf_get_status"] = "string fdf_get_status(resource fdfdoc)"
let s:phpprotos["fdf_set_file"] = "bool fdf_set_file(resource fdfdoc, string filename [, string target_frame])"
let s:phpprotos["fdf_get_file"] = "string fdf_get_file(resource fdfdoc)"
let s:phpprotos["fdf_save"] = "bool fdf_save(resource fdfdoc [, string filename])"
let s:phpprotos["fdf_save_string"] = "string fdf_save_string(resource fdfdoc)"
let s:phpprotos["fdf_add_template"] = "bool fdf_add_template(resource fdfdoc, int newpage, string filename, string template, int rename)"
let s:phpprotos["fdf_set_flags"] = "bool fdf_set_flags(resource fdfdoc, string fieldname, int whichflags, int newflags)"
let s:phpprotos["fdf_get_flags"] = "int fdf_get_flags(resorce fdfdoc, string fieldname, int whichflags) "
let s:phpprotos["fdf_set_opt"] = "bool fdf_set_opt(resource fdfdoc, string fieldname, int element, string value, string name)"
let s:phpprotos["fdf_get_opt"] = "mixed fdf_get_opt(resource fdfdof, string fieldname [, int element])"
let s:phpprotos["fdf_set_submit_form_action"] = "bool fdf_set_submit_form_action(resource fdfdoc, string fieldname, int whichtrigger, string url, int flags)"
let s:phpprotos["fdf_set_javascript_action"] = "bool fdf_set_javascript_action(resource fdfdoc, string fieldname, int whichtrigger, string script)"
let s:phpprotos["fdf_set_encoding"] = "bool fdf_set_encoding(resource fdf_document, string encoding)"
let s:phpprotos["fdf_errno"] = "int fdf_errno(void) "
let s:phpprotos["fdf_error"] = "string fdf_error([int errno]) "
let s:phpprotos["fdf_get_version"] = "string fdf_get_version([resource fdfdoc]) "
let s:phpprotos["fdf_set_version"] = "bool fdf_set_version(resourece fdfdoc, string version)"
let s:phpprotos["fdf_add_doc_javascript"] = "bool fdf_add_doc_javascript(resource fdfdoc, string scriptname, string script) "
let s:phpprotos["fdf_set_on_import_javascript"] = "bool fdf_set_on_import_javascript(resource fdfdoc, string script, bool before_data_import)"
let s:phpprotos["fdf_set_target_frame"] = "bool fdf_set_target_frame(resource fdfdoc, string target)"
let s:phpprotos["fdf_remove_item"] = "bool fdf_remove_item(resource fdfdoc, string fieldname, int item)"
let s:phpprotos["fdf_get_attachment"] = "array fdf_get_attachment(resource fdfdoc, string fieldname, string savepath)"
let s:phpprotos["fdf_enum_values"] = "bool fdf_enum_values(resource fdfdoc, callback function [, mixed userdata])"
let s:phpprotos["fdf_header"] = "void fdf_header(void) "
let s:phpprotos["ftp_connect"] = "resource ftp_connect(string host [, int port [, int timeout]])"
let s:phpprotos["ftp_ssl_connect"] = "resource ftp_ssl_connect(string host [, int port [, int timeout]])"
let s:phpprotos["ftp_login"] = "bool ftp_login(resource stream, string username, string password)"
let s:phpprotos["ftp_pwd"] = "string ftp_pwd(resource stream)"
let s:phpprotos["ftp_cdup"] = "bool ftp_cdup(resource stream)"
let s:phpprotos["ftp_chdir"] = "bool ftp_chdir(resource stream, string directory)"
let s:phpprotos["ftp_exec"] = "bool ftp_exec(resource stream, string command)"
let s:phpprotos["ftp_raw"] = "array ftp_raw(resource stream, string command)"
let s:phpprotos["ftp_mkdir"] = "string ftp_mkdir(resource stream, string directory)"
let s:phpprotos["ftp_rmdir"] = "bool ftp_rmdir(resource stream, string directory)"
let s:phpprotos["ftp_chmod"] = "int ftp_chmod(resource stream, int mode, string filename)"
let s:phpprotos["ftp_alloc"] = "bool ftp_alloc(resource stream, int size[, &response])"
let s:phpprotos["ftp_nlist"] = "array ftp_nlist(resource stream, string directory)"
let s:phpprotos["ftp_rawlist"] = "array ftp_rawlist(resource stream, string directory [, bool recursive])"
let s:phpprotos["ftp_systype"] = "string ftp_systype(resource stream)"
let s:phpprotos["ftp_fget"] = "bool ftp_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])"
let s:phpprotos["ftp_nb_fget"] = "int ftp_nb_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])"
let s:phpprotos["ftp_pasv"] = "bool ftp_pasv(resource stream, bool pasv)"
let s:phpprotos["ftp_get"] = "bool ftp_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])"
let s:phpprotos["ftp_nb_get"] = "int ftp_nb_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])"
let s:phpprotos["ftp_nb_continue"] = "int ftp_nb_continue(resource stream)"
let s:phpprotos["ftp_fput"] = "bool ftp_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])"
let s:phpprotos["ftp_nb_fput"] = "int ftp_nb_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])"
let s:phpprotos["ftp_put"] = "bool ftp_put(resource stream, string remote_file, string local_file, int mode[, int startpos])"
let s:phpprotos["ftp_nb_put"] = "int ftp_nb_put(resource stream, string remote_file, string local_file, int mode[, int startpos])"
let s:phpprotos["ftp_size"] = "int ftp_size(resource stream, string filename)"
let s:phpprotos["ftp_mdtm"] = "int ftp_mdtm(resource stream, string filename)"
let s:phpprotos["ftp_rename"] = "bool ftp_rename(resource stream, string src, string dest)"
let s:phpprotos["ftp_delete"] = "bool ftp_delete(resource stream, string file)"
let s:phpprotos["ftp_site"] = "bool ftp_site(resource stream, string cmd)"
let s:phpprotos["ftp_close"] = "bool ftp_close(resource stream)"
let s:phpprotos["ftp_set_option"] = "bool ftp_set_option(resource stream, int option, mixed value)"
let s:phpprotos["ftp_get_option"] = "mixed ftp_get_option(resource stream, int option)"
let s:phpprotos["gmp_init"] = "resource gmp_init(mixed number [, int base])"
let s:phpprotos["gmp_intval"] = "int gmp_intval(resource gmpnumber)"
let s:phpprotos["gmp_strval"] = "string gmp_strval(resource gmpnumber [, int base])"
let s:phpprotos["gmp_add"] = "resource gmp_add(resource a, resource b)"
let s:phpprotos["gmp_sub"] = "resource gmp_sub(resource a, resource b)"
let s:phpprotos["gmp_mul"] = "resource gmp_mul(resource a, resource b)"
let s:phpprotos["gmp_div_qr"] = "array gmp_div_qr(resource a, resource b [, int round])"
let s:phpprotos["gmp_div_r"] = "resource gmp_div_r(resource a, resource b [, int round])"
let s:phpprotos["gmp_div_q"] = "resource gmp_div_q(resource a, resource b [, int round])"
let s:phpprotos["gmp_mod"] = "resource gmp_mod(resource a, resource b)"
let s:phpprotos["gmp_divexact"] = "resource gmp_divexact(resource a, resource b)"
let s:phpprotos["gmp_neg"] = "resource gmp_neg(resource a)"
let s:phpprotos["gmp_abs"] = "resource gmp_abs(resource a)"
let s:phpprotos["gmp_fact"] = "resource gmp_fact(int a)"
let s:phpprotos["gmp_pow"] = "resource gmp_pow(resource base, int exp)"
let s:phpprotos["gmp_powm"] = "resource gmp_powm(resource base, resource exp, resource mod)"
let s:phpprotos["gmp_sqrt"] = "resource gmp_sqrt(resource a)"
let s:phpprotos["gmp_sqrtrem"] = "array gmp_sqrtrem(resource a)"
let s:phpprotos["gmp_perfect_square"] = "bool gmp_perfect_square(resource a)"
let s:phpprotos["gmp_prob_prime"] = "int gmp_prob_prime(resource a[, int reps])"
let s:phpprotos["gmp_gcd"] = "resource gmp_gcd(resource a, resource b)"
let s:phpprotos["gmp_gcdext"] = "array gmp_gcdext(resource a, resource b)"
let s:phpprotos["gmp_invert"] = "resource gmp_invert(resource a, resource b)"
let s:phpprotos["gmp_jacobi"] = "int gmp_jacobi(resource a, resource b)"
let s:phpprotos["gmp_legendre"] = "int gmp_legendre(resource a, resource b)"
let s:phpprotos["gmp_cmp"] = "int gmp_cmp(resource a, resource b)"
let s:phpprotos["gmp_sign"] = "int gmp_sign(resource a)"
let s:phpprotos["gmp_random"] = "resource gmp_random([int limiter])"
let s:phpprotos["gmp_and"] = "resource gmp_and(resource a, resource b)"
let s:phpprotos["gmp_or"] = "resource gmp_or(resource a, resource b)"
let s:phpprotos["gmp_com"] = "resource gmp_com(resource a)"
let s:phpprotos["gmp_nextprime"] = "resource gmp_nextprime(resource a)"
let s:phpprotos["gmp_xor"] = "resource gmp_xor(resource a, resource b)"
let s:phpprotos["gmp_setbit"] = "void gmp_setbit(resource &a, int index[, bool set_clear])"
let s:phpprotos["gmp_clrbit"] = "void gmp_clrbit(resource &a, int index)"
let s:phpprotos["gmp_popcount"] = "int gmp_popcount(resource a)"
let s:phpprotos["gmp_hamdist"] = "int gmp_hamdist(resource a, resource b)"
let s:phpprotos["gmp_scan0"] = "int gmp_scan0(resource a, int start)"
let s:phpprotos["gmp_scan1"] = "int gmp_scan1(resource a, int start)"
let s:phpprotos["pdo_drivers"] = "array pdo_drivers()"
let s:phpprotos["PDO::__construct"] = "void PDO::__construct(string dsn, string username, string passwd [, array options])"
let s:phpprotos["PDO::prepare"] = "object PDO::prepare(string statment [, array options])"
let s:phpprotos["PDO::beginTransaction"] = "bool PDO::beginTransaction()"
let s:phpprotos["PDO::commit"] = "bool PDO::commit()"
let s:phpprotos["PDO::rollBack"] = "bool PDO::rollBack()"
let s:phpprotos["PDO::setAttribute"] = "bool PDO::setAttribute(long attribute, mixed value)"
let s:phpprotos["PDO::getAttribute"] = "mixed PDO::getAttribute(long attribute)"
let s:phpprotos["PDO::exec"] = "long PDO::exec(string query)"
let s:phpprotos["PDO::lastInsertId"] = "string PDO::lastInsertId([string seqname])"
let s:phpprotos["PDO::errorCode"] = "string PDO::errorCode()"
let s:phpprotos["PDO::errorInfo"] = "int PDO::errorInfo()"
let s:phpprotos["PDO::query"] = "object PDO::query(string sql [, PDOStatement::setFetchMode() args])"
let s:phpprotos["PDO::quote"] = "string PDO::quote(string string [, int paramtype])"
let s:phpprotos["PDO::__wakeup"] = "int PDO::__wakeup()"
let s:phpprotos["PDO::__sleep"] = "int PDO::__sleep()"
let s:phpprotos["pdo_drivers"] = "array pdo_drivers()"
let s:phpprotos["PDOStatement::execute"] = "bool PDOStatement::execute([array $bound_input_params])"
let s:phpprotos["PDOStatement::fetch"] = "mixed PDOStatement::fetch([int $how = PDO_FETCH_BOTH [, int $orientation [, int $offset]]])"
let s:phpprotos["PDOStatement::fetchObject"] = "mixed PDOStatement::fetchObject(string class_name [, NULL|array ctor_args])"
let s:phpprotos["PDOStatement::fetchColumn"] = "string PDOStatement::fetchColumn([int column_number])"
let s:phpprotos["PDOStatement::fetchAll"] = "array PDOStatement::fetchAll([int $how = PDO_FETCH_BOTH [, string class_name [, NULL|array ctor_args]]])"
let s:phpprotos["PDOStatement::bindValue"] = "bool PDOStatement::bindValue(mixed $paramno, mixed $param [, int $type ])"
let s:phpprotos["PDOStatement::bindParam"] = "bool PDOStatement::bindParam(mixed $paramno, mixed &$param [, int $type [, int $maxlen [, mixed $driverdata]]])"
let s:phpprotos["PDOStatement::bindColumn"] = "bool PDOStatement::bindColumn(mixed $column, mixed &$param [, int $type [, int $maxlen [, mixed $driverdata]]])"
let s:phpprotos["PDOStatement::rowCount"] = "int PDOStatement::rowCount()"
let s:phpprotos["PDOStatement::errorCode"] = "string PDOStatement::errorCode()"
let s:phpprotos["PDOStatement::errorInfo"] = "array PDOStatement::errorInfo()"
let s:phpprotos["PDOStatement::setAttribute"] = "bool PDOStatement::setAttribute(long attribute, mixed value)"
let s:phpprotos["PDOStatement::getAttribute"] = "mixed PDOStatement::getAttribute(long attribute)"
let s:phpprotos["PDOStatement::columnCount"] = "int PDOStatement::columnCount()"
let s:phpprotos["PDOStatement::getColumnMeta"] = "array PDOStatement::getColumnMeta(int $column)"
let s:phpprotos["PDOStatement::setFetchMode"] = "bool PDOStatement::setFetchMode(int mode [mixed* params])"
let s:phpprotos["PDOStatement::nextRowset"] = "bool PDOStatement::nextRowset()"
let s:phpprotos["PDOStatement::closeCursor"] = "bool PDOStatement::closeCursor()"
let s:phpprotos["PDOStatement::debugDumpParams"] = "void PDOStatement::debugDumpParams()"
let s:phpprotos["PDOStatement::__wakeup"] = "int PDOStatement::__wakeup()"
let s:phpprotos["PDOStatement::__sleep"] = "int PDOStatement::__sleep()"
let s:phpprotos["RecursiveIteratorIterator::__construct"] = "void RecursiveIteratorIterator::__construct(RecursiveIterator|IteratorAggregate it [, int mode = RIT_LEAVES_ONLY [, int flags = 0]]) throws InvalidArgumentException"
let s:phpprotos["RecursiveIteratorIterator::rewind"] = "void RecursiveIteratorIterator::rewind()"
let s:phpprotos["RecursiveIteratorIterator::valid"] = "bool RecursiveIteratorIterator::valid()"
let s:phpprotos["RecursiveIteratorIterator::key"] = "mixed RecursiveIteratorIterator::key()"
let s:phpprotos["RecursiveIteratorIterator::current"] = "mixed RecursiveIteratorIterator::current()"
let s:phpprotos["RecursiveIteratorIterator::next"] = "void RecursiveIteratorIterator::next()"
let s:phpprotos["RecursiveIteratorIterator::getDepth"] = "int RecursiveIteratorIterator::getDepth()"
let s:phpprotos["RecursiveIteratorIterator::getSubIterator"] = "RecursiveIterator RecursiveIteratorIterator::getSubIterator([int level])"
let s:phpprotos["RecursiveIteratorIterator::getInnerIterator"] = "RecursiveIterator RecursiveIteratorIterator::getInnerIterator()"
let s:phpprotos["RecursiveIteratorIterator::beginIteration"] = "RecursiveIterator RecursiveIteratorIterator::beginIteration()"
let s:phpprotos["RecursiveIteratorIterator::endIteration"] = "RecursiveIterator RecursiveIteratorIterator::endIteration()"
let s:phpprotos["RecursiveIteratorIterator::callHasChildren"] = "bool RecursiveIteratorIterator::callHasChildren()"
let s:phpprotos["RecursiveIteratorIterator::callGetChildren"] = "RecursiveIterator RecursiveIteratorIterator::callGetChildren()"
let s:phpprotos["RecursiveIteratorIterator::beginChildren"] = "void RecursiveIteratorIterator::beginChildren()"
let s:phpprotos["RecursiveIteratorIterator::endChildren"] = "void RecursiveIteratorIterator::endChildren()"
let s:phpprotos["RecursiveIteratorIterator::nextElement"] = "void RecursiveIteratorIterator::nextElement()"
let s:phpprotos["RecursiveIteratorIterator::setMaxDepth"] = "void RecursiveIteratorIterator::setMaxDepth([$max_depth = -1])"
let s:phpprotos["RecursiveIteratorIterator::getMaxDepth"] = "int|false RecursiveIteratorIterator::getMaxDepth()"
let s:phpprotos["FilterIterator::__construct"] = "void FilterIterator::__construct(Iterator it) "
let s:phpprotos["FilterIterator::getInnerIterator"] = "Iterator FilterIterator::getInnerIterator() "
let s:phpprotos["ParentIterator::rewind"] = "void ParentIterator::rewind()"
let s:phpprotos["FilterIterator::valid"] = "bool FilterIterator::valid()"
let s:phpprotos["FilterIterator::key"] = "mixed FilterIterator::key()"
let s:phpprotos["FilterIterator::current"] = "mixed FilterIterator::current()"
let s:phpprotos["ParentIterator::next"] = "void ParentIterator::next()"
let s:phpprotos["FilterIterator::rewind"] = "void FilterIterator::rewind()"
let s:phpprotos["FilterIterator::next"] = "void FilterIterator::next()"
let s:phpprotos["RecursiveFilterIterator::__construct"] = "void RecursiveFilterIterator::__construct(RecursiveIterator it)"
let s:phpprotos["RecursiveFilterIterator::hasChildren"] = "bool RecursiveFilterIterator::hasChildren()"
let s:phpprotos["RecursiveFilterIterator::getChildren"] = "RecursiveFilterIterator RecursiveFilterIterator::getChildren()"
let s:phpprotos["ParentIterator::__construct"] = "void ParentIterator::__construct(RecursiveIterator it)"
let s:phpprotos["RegexIterator::__construct"] = "void RegexIterator::__construct(Iterator it, string regex [, int mode [, int flags [, int preg_flags]]]) "
let s:phpprotos["RegexIterator::accept"] = "bool RegexIterator::accept()"
let s:phpprotos["RegexIterator::getMode"] = "bool RegexIterator::getMode()"
let s:phpprotos["RegexIterator::setMode"] = "bool RegexIterator::setMode(int new_mode)"
let s:phpprotos["RegexIterator::getFlags"] = "bool RegexIterator::getFlags()"
let s:phpprotos["RegexIterator::setFlags"] = "bool RegexIterator::setFlags(int new_flags)"
let s:phpprotos["RegexIterator::getFlags"] = "bool RegexIterator::getFlags()"
let s:phpprotos["RegexIterator::setPregFlags"] = "bool RegexIterator::setPregFlags(int new_flags)"
let s:phpprotos["RecursiveRegexIterator::__construct"] = "void RecursiveRegexIterator::__construct(RecursiveIterator it, string regex [, int mode [, int flags [, int preg_flags]]]) "
let s:phpprotos["RecursiveRegexIterator::getChildren"] = "RecursiveRegexIterator RecursiveRegexIterator::getChildren()"
let s:phpprotos["LimitIterator::__construct"] = "LimitIterator::__construct(Iterator it [, int offset, int count])"
let s:phpprotos["LimitIterator::rewind"] = "void LimitIterator::rewind() "
let s:phpprotos["LimitIterator::valid"] = "bool LimitIterator::valid()"
let s:phpprotos["LimitIterator::next"] = "void LimitIterator::next()"
let s:phpprotos["LimitIterator::seek"] = "void LimitIterator::seek(int position)"
let s:phpprotos["LimitIterator::getPosition"] = "int LimitIterator::getPosition()"
let s:phpprotos["CachingIterator::__construct"] = "void CachingIterator::__construct(Iterator it [, flags = CIT_CALL_TOSTRING])"
let s:phpprotos["CachingIterator::rewind"] = "void CachingIterator::rewind()"
let s:phpprotos["CachingIterator::valid"] = "bool CachingIterator::valid()"
let s:phpprotos["CachingIterator::next"] = "void CachingIterator::next()"
let s:phpprotos["CachingIterator::hasNext"] = "bool CachingIterator::hasNext()"
let s:phpprotos["CachingIterator::__toString"] = "string CachingIterator::__toString()"
let s:phpprotos["CachingIterator::offsetSet"] = "void CachingIterator::offsetSet(mixed index, mixed newval)"
let s:phpprotos["CachingIterator::offsetGet"] = "string CachingIterator::offsetGet(mixed index)"
let s:phpprotos["CachingIterator::offsetUnset"] = "void CachingIterator::offsetUnset(mixed index)"
let s:phpprotos["CachingIterator::offsetExists"] = "bool CachingIterator::offsetExists(mixed index)"
let s:phpprotos["CachingIterator::getCache"] = "bool CachingIterator::getCache()"
let s:phpprotos["CachingIterator::getFlags"] = "int CachingIterator::getFlags()"
let s:phpprotos["CachingIterator::setFlags"] = "void CachingIterator::setFlags(int flags)"
let s:phpprotos["CachingIterator::count"] = "void CachingIterator::count()"
let s:phpprotos["RecursiveCachingIterator::__construct"] = "void RecursiveCachingIterator::__construct(RecursiveIterator it [, flags = CIT_CALL_TOSTRING])"
let s:phpprotos["RecursiveCachingIterator::hasChildren"] = "bool RecursiveCachingIterator::hasChildren()"
let s:phpprotos["RecursiveCachingIterator::getChildren"] = "RecursiveCachingIterator RecursiveCachingIterator::getChildren()"
let s:phpprotos["IteratorIterator::__construct"] = "void IteratorIterator::__construct(Traversable it)"
let s:phpprotos["NoRewindIterator::__construct"] = "void NoRewindIterator::__construct(Iterator it)"
let s:phpprotos["NoRewindIterator::rewind"] = "void NoRewindIterator::rewind()"
let s:phpprotos["NoRewindIterator::valid"] = "bool NoRewindIterator::valid()"
let s:phpprotos["NoRewindIterator::key"] = "mixed NoRewindIterator::key()"
let s:phpprotos["NoRewindIterator::current"] = "mixed NoRewindIterator::current()"
let s:phpprotos["NoRewindIterator::next"] = "void NoRewindIterator::next()"
let s:phpprotos["InfiniteIterator::__construct"] = "void InfiniteIterator::__construct(Iterator it)"
let s:phpprotos["InfiniteIterator::next"] = "void InfiniteIterator::next()"
let s:phpprotos["EmptyIterator::rewind"] = "void EmptyIterator::rewind()"
let s:phpprotos["EmptyIterator::valid"] = "false EmptyIterator::valid()"
let s:phpprotos["EmptyIterator::key"] = "void EmptyIterator::key()"
let s:phpprotos["EmptyIterator::current"] = "void EmptyIterator::current()"
let s:phpprotos["EmptyIterator::next"] = "void EmptyIterator::next()"
let s:phpprotos["AppendIterator::__construct"] = "void AppendIterator::__construct()"
let s:phpprotos["AppendIterator::append"] = "void AppendIterator::append(Iterator it)"
let s:phpprotos["AppendIterator::rewind"] = "void AppendIterator::rewind()"
let s:phpprotos["AppendIterator::valid"] = "bool AppendIterator::valid()"
let s:phpprotos["AppendIterator::next"] = "void AppendIterator::next()"
let s:phpprotos["AppendIterator::getIteratorIndex"] = "int AppendIterator::getIteratorIndex()"
let s:phpprotos["AppendIterator::getArrayIterator"] = "ArrayIterator AppendIterator::getArrayIterator()"
let s:phpprotos["iterator_to_array"] = "array iterator_to_array(Traversable it [, bool use_keys = true]) "
let s:phpprotos["iterator_count"] = "int iterator_count(Traversable it) "
let s:phpprotos["iterator_apply"] = "int iterator_apply(Traversable it, mixed function [, mixed params])"
let s:phpprotos["ArrayObject::offsetExists"] = "bool ArrayObject::offsetExists(mixed $index)"
let s:phpprotos["ArrayObject::offsetGet"] = "mixed ArrayObject::offsetGet(mixed $index)"
let s:phpprotos["ArrayObject::offsetSet"] = "void ArrayObject::offsetSet(mixed $index, mixed $newval)"
let s:phpprotos["ArrayObject::append"] = "void ArrayObject::append(mixed $newval)"
let s:phpprotos["ArrayObject::offsetUnset"] = "void ArrayObject::offsetUnset(mixed $index)"
let s:phpprotos["ArrayObject::__construct"] = "void ArrayObject::__construct(array|object ar = array() [, int flags = 0 [, string iterator_class = \"ArrayIterator\"]])"
let s:phpprotos["ArrayObject::setIteratorClass"] = "void ArrayObject::setIteratorClass(string iterator_class)"
let s:phpprotos["ArrayObject::getIteratorClass"] = "string ArrayObject::getIteratorClass()"
let s:phpprotos["ArrayObject::getFlags"] = "int ArrayObject::getFlags()"
let s:phpprotos["ArrayObject::setFlags"] = "void ArrayObject::setFlags(int flags)"
let s:phpprotos["ArrayObject::exchangeArray"] = "Array|Object ArrayObject::exchangeArray(Array|Object ar = array())"
let s:phpprotos["ArrayObject::getIterator"] = "ArrayIterator ArrayObject::getIterator()"
let s:phpprotos["ArrayIterator::rewind"] = "void ArrayIterator::rewind()"
let s:phpprotos["ArrayIterator::seek"] = "void ArrayIterator::seek(int $position)"
let s:phpprotos["ArrayObject::count"] = "int ArrayObject::count()"
let s:phpprotos["ArrayObject::asort"] = "int ArrayObject::asort()"
let s:phpprotos["ArrayObject::ksort"] = "int ArrayObject::ksort()"
let s:phpprotos["ArrayObject::uasort"] = "int ArrayObject::uasort(callback cmp_function)"
let s:phpprotos["ArrayObject::uksort"] = "int ArrayObject::uksort(callback cmp_function)"
let s:phpprotos["ArrayObject::natsort"] = "int ArrayObject::natsort()"
let s:phpprotos["ArrayObject::natcasesort"] = "int ArrayObject::natcasesort()"
let s:phpprotos["ArrayIterator::current"] = "mixed|NULL ArrayIterator::current()"
let s:phpprotos["ArrayIterator::key"] = "mixed|NULL ArrayIterator::key()"
let s:phpprotos["ArrayIterator::next"] = "void ArrayIterator::next()"
let s:phpprotos["ArrayIterator::valid"] = "bool ArrayIterator::valid()"
let s:phpprotos["RecursiveArrayIterator::hasChildren"] = "bool RecursiveArrayIterator::hasChildren()"
let s:phpprotos["RecursiveArrayIterator::getChildren"] = "object RecursiveArrayIterator::getChildren()"
let s:phpprotos["SplObjectStorage::attach"] = "void SplObjectStorage::attach($obj)"
let s:phpprotos["SplObjectStorage::detach"] = "void SplObjectStorage::detach($obj)"
let s:phpprotos["SplObjectStorage::contains"] = "bool SplObjectStorage::contains($obj)"
let s:phpprotos["SplObjectStorage::count"] = "int SplObjectStorage::count()"
let s:phpprotos["SplObjectStorage::rewind"] = "void SplObjectStorage::rewind()"
let s:phpprotos["SplObjectStorage::valid"] = "bool SplObjectStorage::valid()"
let s:phpprotos["SplObjectStorage::key"] = "mixed SplObjectStorage::key()"
let s:phpprotos["SplObjectStorage::current"] = "mixed SplObjectStorage::current()"
let s:phpprotos["SplObjectStorage::next"] = "void SplObjectStorage::next()"
let s:phpprotos["SplObjectStorage::serialize"] = "string SplObjectStorage::serialize()"
let s:phpprotos["SplObjectStorage::unserialize"] = "void SplObjectStorage::unserialize(string serialized)"
let s:phpprotos["DirectoryIterator::__construct"] = "void DirectoryIterator::__construct(string path)"
let s:phpprotos["DirectoryIterator::rewind"] = "void DirectoryIterator::rewind()"
let s:phpprotos["DirectoryIterator::key"] = "string DirectoryIterator::key()"
let s:phpprotos["DirectoryIterator::current"] = "DirectoryIterator DirectoryIterator::current()"
let s:phpprotos["DirectoryIterator::next"] = "void DirectoryIterator::next()"
let s:phpprotos["DirectoryIterator::valid"] = "string DirectoryIterator::valid()"
let s:phpprotos["SplFileInfo::getPath"] = "string SplFileInfo::getPath()"
let s:phpprotos["SplFileInfo::getFilename"] = "string SplFileInfo::getFilename()"
let s:phpprotos["DirectoryIterator::getFilename"] = "string DirectoryIterator::getFilename()"
let s:phpprotos["SplFileInfo::getBasename"] = "string SplFileInfo::getBasename([string $suffix]) U"
let s:phpprotos["DirectoryIterator::getBasename"] = "string DirectoryIterator::getBasename([string $suffix]) U"
let s:phpprotos["SplFileInfo::getPathname"] = "string SplFileInfo::getPathname()"
let s:phpprotos["RecursiveDirectoryIterator::key"] = "string RecursiveDirectoryIterator::key()"
let s:phpprotos["RecursiveDirectoryIterator::current"] = "string RecursiveDirectoryIterator::current()"
let s:phpprotos["DirectoryIterator::isDot"] = "bool DirectoryIterator::isDot()"
let s:phpprotos["SplFileInfo::__construct"] = "void SplFileInfo::__construct(string file_name)"
let s:phpprotos["SplFileInfo::getPerms"] = "int SplFileInfo::getPerms()"
let s:phpprotos["SplFileInfo::getInode"] = "int SplFileInfo::getInode()"
let s:phpprotos["SplFileInfo::getSize"] = "int SplFileInfo::getSize()"
let s:phpprotos["SplFileInfo::getOwner"] = "int SplFileInfo::getOwner()"
let s:phpprotos["SplFileInfo::getGroup"] = "int SplFileInfo::getGroup()"
let s:phpprotos["SplFileInfo::getATime"] = "int SplFileInfo::getATime()"
let s:phpprotos["SplFileInfo::getMTime"] = "int SplFileInfo::getMTime()"
let s:phpprotos["SplFileInfo::getCTime"] = "int SplFileInfo::getCTime()"
let s:phpprotos["SplFileInfo::getType"] = "string SplFileInfo::getType()"
let s:phpprotos["SplFileInfo::isWritable"] = "bool SplFileInfo::isWritable()"
let s:phpprotos["SplFileInfo::isReadable"] = "bool SplFileInfo::isReadable()"
let s:phpprotos["SplFileInfo::isExecutable"] = "bool SplFileInfo::isExecutable()"
let s:phpprotos["SplFileInfo::isFile"] = "bool SplFileInfo::isFile()"
let s:phpprotos["SplFileInfo::isDir"] = "bool SplFileInfo::isDir()"
let s:phpprotos["SplFileInfo::isLink"] = "bool SplFileInfo::isLink()"
let s:phpprotos["SplFileInfo::getLinkTarget"] = "string SplFileInfo::getLinkTarget() U"
let s:phpprotos["SplFileInfo::getRealPath"] = "string SplFileInfo::getRealPath()"
let s:phpprotos["SplFileInfo::openFile"] = "SplFileObject SplFileInfo::openFile([string mode = 'r' [, bool use_include_path  [, resource context]]])"
let s:phpprotos["SplFileInfo::setFileClass"] = "void SplFileInfo::setFileClass([string class_name])"
let s:phpprotos["SplFileInfo::setInfoClass"] = "void SplFileInfo::setInfoClass([string class_name])"
let s:phpprotos["SplFileInfo::getFileInfo"] = "SplFileInfo SplFileInfo::getFileInfo([string $class_name])"
let s:phpprotos["SplFileInfo::getPathInfo"] = "SplFileInfo SplFileInfo::getPathInfo([string $class_name])"
let s:phpprotos["RecursiveDirectoryIterator::__construct"] = "void RecursiveDirectoryIterator::__construct(string path [, int flags])"
let s:phpprotos["RecursiveDirectoryIterator::rewind"] = "void RecursiveDirectoryIterator::rewind()"
let s:phpprotos["RecursiveDirectoryIterator::next"] = "void RecursiveDirectoryIterator::next()"
let s:phpprotos["RecursiveDirectoryIterator::hasChildren"] = "bool RecursiveDirectoryIterator::hasChildren([bool $allow_links = false])"
let s:phpprotos["DirectoryIterator::getChildren"] = "RecursiveDirectoryIterator DirectoryIterator::getChildren()"
let s:phpprotos["RecursiveDirectoryIterator::getSubPath"] = "void RecursiveDirectoryIterator::getSubPath()"
let s:phpprotos["RecursiveDirectoryIterator::getSubPathname"] = "void RecursiveDirectoryIterator::getSubPathname()"
let s:phpprotos["SplFileObject::__construct"] = "void SplFileObject::__construct(string filename [, string mode = 'r' [, bool use_include_path  [, resource context]]]])"
let s:phpprotos["SplTempFileObject::__construct"] = "void SplTempFileObject::__construct([int max_memory])"
let s:phpprotos["SplFileObject::rewind"] = "void SplFileObject::rewind()"
let s:phpprotos["SplFileObject::eof"] = "void SplFileObject::eof()"
let s:phpprotos["SplFileObject::valid"] = "void SplFileObject::valid()"
let s:phpprotos["SplFileObject::fgets"] = "string SplFileObject::fgets()"
let s:phpprotos["SplFileObject::current"] = "string SplFileObject::current()"
let s:phpprotos["SplFileObject::key"] = "int SplFileObject::key()"
let s:phpprotos["SplFileObject::next"] = "void SplFileObject::next()"
let s:phpprotos["SplFileObject::setFlags"] = "void SplFileObject::setFlags(int flags)"
let s:phpprotos["SplFileObject::getFlags"] = "int SplFileObject::getFlags()"
let s:phpprotos["SplFileObject::setMaxLineLen"] = "void SplFileObject::setMaxLineLen(int max_len)"
let s:phpprotos["SplFileObject::getMaxLineLen"] = "int SplFileObject::getMaxLineLen()"
let s:phpprotos["SplFileObject::hasChildren"] = "bool SplFileObject::hasChildren()"
let s:phpprotos["SplFileObject::getChildren"] = "bool SplFileObject::getChildren()"
let s:phpprotos["SplFileObject::fgetcsv"] = "array SplFileObject::fgetcsv([string delimiter [, string enclosure]])"
let s:phpprotos["SplFileObject::setCsvControl"] = "void SplFileObject::setCsvControl([string delimiter = ',' [, string enclosure = '\"']])"
let s:phpprotos["SplFileObject::getCsvControl"] = "array SplFileObject::getCsvControl()"
let s:phpprotos["SplFileObject::flock"] = "bool SplFileObject::flock(int operation [, int &wouldblock])"
let s:phpprotos["SplFileObject::fflush"] = "bool SplFileObject::fflush()"
let s:phpprotos["SplFileObject::ftell"] = "int SplFileObject::ftell()"
let s:phpprotos["SplFileObject::fseek"] = "int SplFileObject::fseek(int pos [, int whence = SEEK_SET])"
let s:phpprotos["SplFileObject::fgetc"] = "int SplFileObject::fgetc()"
let s:phpprotos["SplFileObject::fgetss"] = "string SplFileObject::fgetss([string allowable_tags])"
let s:phpprotos["SplFileObject::fpassthru"] = "int SplFileObject::fpassthru()"
let s:phpprotos["SplFileObject::fscanf"] = "bool SplFileObject::fscanf(string format [, string ...])"
let s:phpprotos["SplFileObject::fwrite"] = "mixed SplFileObject::fwrite(string str [, int length])"
let s:phpprotos["SplFileObject::fstat"] = "bool SplFileObject::fstat()"
let s:phpprotos["SplFileObject::ftruncate"] = "bool SplFileObject::ftruncate(int size)"
let s:phpprotos["SplFileObject::seek"] = "void SplFileObject::seek(int line_pos)"
let s:phpprotos["SimpleXMLIterator::rewind"] = "void SimpleXMLIterator::rewind()"
let s:phpprotos["SimpleXMLIterator::valid"] = "bool SimpleXMLIterator::valid()"
let s:phpprotos["SimpleXMLIterator::current"] = "SimpleXMLIterator SimpleXMLIterator::current()"
let s:phpprotos["SimpleXMLIterator::key"] = "string SimpleXMLIterator::key()"
let s:phpprotos["SimpleXMLIterator::next"] = "void SimpleXMLIterator::next()"
let s:phpprotos["SimpleXMLIterator::hasChildren"] = "bool SimpleXMLIterator::hasChildren()"
let s:phpprotos["SimpleXMLIterator::getChildren"] = "SimpleXMLIterator SimpleXMLIterator::getChildren()"
let s:phpprotos["SimpleXMLIterator::count"] = "int SimpleXMLIterator::count()"
let s:phpprotos["class_parents"] = "array class_parents(object instance)"
let s:phpprotos["class_implements"] = "array class_implements(mixed what [, bool autoload ])"
let s:phpprotos["spl_classes"] = "array spl_classes()"
let s:phpprotos["spl_autoload"] = "void spl_autoload(string class_name [, string file_extensions])"
let s:phpprotos["spl_autoload_extensions"] = "string spl_autoload_extensions([string file_extensions])"
let s:phpprotos["spl_autoload_call"] = "void spl_autoload_call(string class_name)"
let s:phpprotos["spl_autoload_register"] = "bool spl_autoload_register([mixed autoload_function = \"spl_autoload\" [, throw = true]])"
let s:phpprotos["spl_autoload_unregister"] = "bool spl_autoload_unregister(mixed autoload_function)"
let s:phpprotos["spl_autoload_functions"] = "false|array spl_autoload_functions()"
let s:phpprotos["spl_object_hash"] = "string spl_object_hash(object obj)"
let s:phpprotos["xml_parser_create"] = "resource xml_parser_create([string encoding]) "
let s:phpprotos["xml_parser_create_ns"] = "resource xml_parser_create_ns([string encoding [, string sep]]) "
let s:phpprotos["xml_set_object"] = "int xml_set_object(resource parser, object &obj) "
let s:phpprotos["xml_set_element_handler"] = "int xml_set_element_handler(resource parser, string shdl, string ehdl) "
let s:phpprotos["xml_set_character_data_handler"] = "int xml_set_character_data_handler(resource parser, string hdl) "
let s:phpprotos["xml_set_processing_instruction_handler"] = "int xml_set_processing_instruction_handler(resource parser, string hdl) "
let s:phpprotos["xml_set_default_handler"] = "int xml_set_default_handler(resource parser, string hdl) "
let s:phpprotos["xml_set_unparsed_entity_decl_handler"] = "int xml_set_unparsed_entity_decl_handler(resource parser, string hdl) "
let s:phpprotos["xml_set_notation_decl_handler"] = "int xml_set_notation_decl_handler(resource parser, string hdl) "
let s:phpprotos["xml_set_external_entity_ref_handler"] = "int xml_set_external_entity_ref_handler(resource parser, string hdl) "
let s:phpprotos["xml_set_start_namespace_decl_handler"] = "int xml_set_start_namespace_decl_handler(resource parser, string hdl) "
let s:phpprotos["xml_set_end_namespace_decl_handler"] = "int xml_set_end_namespace_decl_handler(resource parser, string hdl) "
let s:phpprotos["xml_parse"] = "int xml_parse(resource parser, string data [, int isFinal]) "
let s:phpprotos["xml_parse_into_struct"] = "int xml_parse_into_struct(resource parser, string data, array &struct, array &index) "
let s:phpprotos["xml_get_error_code"] = "int xml_get_error_code(resource parser) "
let s:phpprotos["xml_error_string"] = "string xml_error_string(int code)"
let s:phpprotos["xml_get_current_line_number"] = "int xml_get_current_line_number(resource parser) "
let s:phpprotos["xml_get_current_column_number"] = "int xml_get_current_column_number(resource parser)"
let s:phpprotos["xml_get_current_byte_index"] = "int xml_get_current_byte_index(resource parser) "
let s:phpprotos["xml_parser_free"] = "int xml_parser_free(resource parser) "
let s:phpprotos["xml_parser_set_option"] = "int xml_parser_set_option(resource parser, int option, mixed value) "
let s:phpprotos["xml_parser_get_option"] = "int xml_parser_get_option(resource parser, int option) "
let s:phpprotos["utf8_encode"] = "string utf8_encode(string data) "
let s:phpprotos["utf8_decode"] = "string utf8_decode(string data) "
let s:phpprotos["xsl_xsltprocessor_import_stylesheet"] = "void xsl_xsltprocessor_import_stylesheet(domdocument doc);"
let s:phpprotos["xsl_xsltprocessor_transform_to_doc"] = "domdocument xsl_xsltprocessor_transform_to_doc(domnode doc);"
let s:phpprotos["xsl_xsltprocessor_transform_to_uri"] = "int xsl_xsltprocessor_transform_to_uri(domdocument doc, string uri);"
let s:phpprotos["xsl_xsltprocessor_transform_to_xml"] = "string xsl_xsltprocessor_transform_to_xml(domdocument doc);"
let s:phpprotos["xsl_xsltprocessor_set_parameter"] = "bool xsl_xsltprocessor_set_parameter(string namespace, mixed name [, string value]);"
let s:phpprotos["xsl_xsltprocessor_get_parameter"] = "string xsl_xsltprocessor_get_parameter(string namespace, string name);"
let s:phpprotos["xsl_xsltprocessor_remove_parameter"] = "bool xsl_xsltprocessor_remove_parameter(string namespace, string name);"
let s:phpprotos["xsl_xsltprocessor_register_php_functions"] = "void xsl_xsltprocessor_register_php_functions();"
let s:phpprotos["xsl_xsltprocessor_has_exslt_support"] = "bool xsl_xsltprocessor_has_exslt_support();"
let s:phpprotos["zip_open"] = "resource zip_open(string filename)"
let s:phpprotos["zip_close"] = "void zip_close(resource zip)"
let s:phpprotos["zip_read"] = "resource zip_read(resource zip)"
let s:phpprotos["zip_entry_open"] = "bool zip_entry_open(resource zip_dp, resource zip_entry [, string mode])"
let s:phpprotos["zip_entry_close"] = "void zip_entry_close(resource zip_ent)"
let s:phpprotos["zip_entry_read"] = "mixed zip_entry_read(resource zip_entry [, int len])"
let s:phpprotos["zip_entry_name"] = "string zip_entry_name(resource zip_entry)"
let s:phpprotos["zip_entry_compressedsize"] = "int zip_entry_compressedsize(resource zip_entry)"
let s:phpprotos["zip_entry_filesize"] = "int zip_entry_filesize(resource zip_entry)"
let s:phpprotos["zip_entry_compressionmethod"] = "string zip_entry_compressionmethod(resource zip_entry)"
let s:phpprotos["open"] = "mixed open(string source [, int flags])"
let s:phpprotos["close"] = "bool close()"
let s:phpprotos["createEmptyDir"] = "bool createEmptyDir(string dirname) U"
let s:phpprotos["addFile"] = "bool addFile(string filepath[, string entryname[, int start [, int length]]])"
let s:phpprotos["addFromString"] = "bool addFromString(string name, string content)"
let s:phpprotos["statName"] = "array statName(string filename[, int flags])"
let s:phpprotos["statIndex"] = "resource statIndex(int index[, int flags])"
let s:phpprotos["locateName"] = "int locateName(string filename[, int flags])"
let s:phpprotos["getNameIndex"] = "string getNameIndex(int index [, int flags])"
let s:phpprotos["setArchiveComment"] = "bool setArchiveComment(string name, string comment)"
let s:phpprotos["getArchiveComment"] = "string getArchiveComment()"
let s:phpprotos["setCommentName"] = "bool setCommentName(string name, string comment)"
let s:phpprotos["setCommentIndex"] = "bool setCommentIndex(int index, string comment)"
let s:phpprotos["getCommentName"] = "string getCommentName(string name)"
let s:phpprotos["getCommentIndex"] = "string getCommentIndex(int index)"
let s:phpprotos["deleteIndex"] = "bool deleteIndex(int index)"
let s:phpprotos["deleteName"] = "bool deleteName(string name)"
let s:phpprotos["renameIndex"] = "bool renameIndex(int index, string new_name)"
let s:phpprotos["renameName"] = "bool renameName(string name, string new_name)"
let s:phpprotos["unchangeIndex"] = "bool unchangeIndex(int index)"
let s:phpprotos["unchangeName"] = "bool unchangeName(string name)"
let s:phpprotos["unchangeAll"] = "bool unchangeAll()"
let s:phpprotos["unchangeAll"] = "bool unchangeAll()"
let s:phpprotos["getFromName"] = "string getFromName(string entryname[, int len [, int flags]])"
let s:phpprotos["getFromIndex"] = "string getFromIndex(string entryname[, int len [, int flags]])"
let s:phpprotos["getStream"] = "resource getStream(string entryname)"
let s:phpprotos["date"] = "string date(string format [, long timestamp])"
let s:phpprotos["gmdate"] = "string gmdate(string format [, long timestamp])"
let s:phpprotos["idate"] = "int idate(string format [, int timestamp])"
let s:phpprotos["strtotime"] = "int strtotime(string time [, int now ])"
let s:phpprotos["mktime"] = "int mktime([int hour [, int min [, int sec [, int mon [, int day [, int year]]]]]])"
let s:phpprotos["gmmktime"] = "int gmmktime([int hour [, int min [, int sec [, int mon [, int day [, int year]]]]]])"
let s:phpprotos["checkdate"] = "bool checkdate(int month, int day, int year)"
let s:phpprotos["strftime"] = "string strftime(string format [, int timestamp])"
let s:phpprotos["gmstrftime"] = "string gmstrftime(string format [, int timestamp])"
let s:phpprotos["time"] = "int time(void)"
let s:phpprotos["localtime"] = "array localtime([int timestamp [, bool associative_array]])"
let s:phpprotos["getdate"] = "array getdate([int timestamp])"
let s:phpprotos["date_create"] = "DateTime date_create([string time[, DateTimeZone object]])"
let s:phpprotos["DateTime::__construct"] = "DateTime::__construct([string time[, DateTimeZone object]])"
let s:phpprotos["date_parse"] = "array date_parse(string date)"
let s:phpprotos["date_format"] = "string date_format(DateTime object, string format)"
let s:phpprotos["date_modify"] = "void date_modify(DateTime object, string modify)"
let s:phpprotos["date_timezone_get"] = "DateTimeZone date_timezone_get(DateTime object)"
let s:phpprotos["date_timezone_set"] = "void date_timezone_set(DateTime object, DateTimeZone object)"
let s:phpprotos["date_offset_get"] = "long date_offset_get(DateTime object)"
let s:phpprotos["date_time_set"] = "void date_time_set(DateTime object, long hour, long minute[, long second])"
let s:phpprotos["date_date_set"] = "void date_date_set(DateTime object, long year, long month, long day)"
let s:phpprotos["date_isodate_set"] = "void date_isodate_set(DateTime object, long year, long week[, long day])"
let s:phpprotos["timezone_open"] = "DateTimeZone timezone_open(string timezone)"
let s:phpprotos["DateTimeZone::__construct"] = "DateTimeZone::__construct(string timezone)"
let s:phpprotos["timezone_name_get"] = "string timezone_name_get(DateTimeZone object)"
let s:phpprotos["timezone_name_from_abbr"] = "string timezone_name_from_abbr(string abbr[, long gmtOffset[, long isdst]])"
let s:phpprotos["timezone_offset_get"] = "long timezone_offset_get(DateTimeZone object, DateTime object)"
let s:phpprotos["timezone_transitions_get"] = "array timezone_transitions_get(DateTimeZone object)"
let s:phpprotos["timezone_identifiers_list"] = "array timezone_identifiers_list()"
let s:phpprotos["timezone_abbreviations_list"] = "array timezone_abbreviations_list()"
let s:phpprotos["date_default_timezone_set"] = "bool date_default_timezone_set(string timezone_identifier)"
let s:phpprotos["date_default_timezone_get"] = "string date_default_timezone_get()"
let s:phpprotos["date_sunrise"] = "mixed date_sunrise(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])"
let s:phpprotos["date_sunset"] = "mixed date_sunset(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])"
let s:phpprotos["date_sun_info"] = "array date_sun_info(long time, float latitude, float longitude)"
let s:phpprotos["curl_version"] = "array curl_version([int version])"
let s:phpprotos["curl_init"] = "resource curl_init([string url])"
let s:phpprotos["curl_copy_handle"] = "resource curl_copy_handle(resource ch)"
let s:phpprotos["curl_setopt"] = "bool curl_setopt(resource ch, int option, mixed value)"
let s:phpprotos["curl_setopt_array"] = "bool curl_setopt_array(resource ch, array options)"
let s:phpprotos["curl_exec"] = "bool curl_exec(resource ch)"
let s:phpprotos["curl_getinfo"] = "mixed curl_getinfo(resource ch [, int option])"
let s:phpprotos["curl_error"] = "string curl_error(resource ch)"
let s:phpprotos["curl_errno"] = "int curl_errno(resource ch)"
let s:phpprotos["curl_close"] = "void curl_close(resource ch)"
let s:phpprotos["curl_multi_init"] = "resource curl_multi_init(void)"
let s:phpprotos["curl_multi_add_handle"] = "int curl_multi_add_handle(resource mh, resource ch)"
let s:phpprotos["curl_multi_remove_handle"] = "int curl_multi_remove_handle(resource mh, resource ch)"
let s:phpprotos["curl_multi_select"] = "int curl_multi_select(resource mh[, double timeout])"
let s:phpprotos["curl_multi_exec"] = "int curl_multi_exec(resource mh, int &still_running) "
let s:phpprotos["curl_multi_getcontent"] = "string curl_multi_getcontent(resource ch)"
let s:phpprotos["curl_multi_info_read"] = "array curl_multi_info_read(resource mh [, long msgs_in_queue])"
let s:phpprotos["curl_multi_close"] = "void curl_multi_close(resource mh)"
let s:phpprotos["exif_tagname"] = "string exif_tagname(index)"
let s:phpprotos["exif_read_data"] = "array exif_read_data(string filename [, sections_needed [, sub_arrays[, read_thumbnail]]])"
let s:phpprotos["exif_thumbnail"] = "string exif_thumbnail(string filename [, &width, &height [, &imagetype]])"
let s:phpprotos["exif_imagetype"] = "int exif_imagetype(string imagefile)"
let s:phpprotos["md5"] = "string md5(string str, [ bool raw_output])"
let s:phpprotos["md5_file"] = "string md5_file(string filename [, bool raw_output])"
let s:phpprotos["hash"] = "string hash(string algo, string data[, bool raw_output = false])"
let s:phpprotos["hash_file"] = "string hash_file(string algo, string filename[, bool raw_output = false])"
let s:phpprotos["hash_hmac"] = "string hash_hmac(string algo, string data, string key[, bool raw_output = false])"
let s:phpprotos["hash_hmac_file"] = "string hash_hmac_file(string algo, string filename, string key[, bool raw_output = false])"
let s:phpprotos["hash_init"] = "resource hash_init(string algo[, int options, string key])"
let s:phpprotos["hash_update"] = "bool hash_update(resource context, string data)"
let s:phpprotos["hash_update_stream"] = "int hash_update_stream(resource context, resource handle[, integer length])"
let s:phpprotos["hash_update_file"] = "bool hash_update_file(resource context, string filename[, resource context])"
let s:phpprotos["hash_final"] = "string hash_final(resource context[, bool raw_output=false])"
let s:phpprotos["hash_algos"] = "array hash_algos(void)"
let s:phpprotos["sha1"] = "string sha1(string str [, bool raw_output])"
let s:phpprotos["sha1_file"] = "string sha1_file(string filename [, bool raw_output])"
let s:phpprotos["imap_open"] = "resource imap_open(string mailbox, string user, string password [, int options [, int n_retries]])"
let s:phpprotos["imap_reopen"] = "bool imap_reopen(resource stream_id, string mailbox [, int options [, int n_retries]])"
let s:phpprotos["imap_append"] = "bool imap_append(resource stream_id, string folder, string message [, string options])"
let s:phpprotos["imap_num_msg"] = "int imap_num_msg(resource stream_id)"
let s:phpprotos["imap_ping"] = "bool imap_ping(resource stream_id)"
let s:phpprotos["imap_num_recent"] = "int imap_num_recent(resource stream_id)"
let s:phpprotos["imap_get_quota"] = "array imap_get_quota(resource stream_id, string qroot)"
let s:phpprotos["imap_get_quotaroot"] = "array imap_get_quotaroot(resource stream_id, string mbox)"
let s:phpprotos["imap_set_quota"] = "bool imap_set_quota(resource stream_id, string qroot, int mailbox_size)"
let s:phpprotos["imap_setacl"] = "bool imap_setacl(resource stream_id, string mailbox, string id, string rights)"
let s:phpprotos["imap_getacl"] = "array imap_getacl(resource stream_id, string mailbox)"
let s:phpprotos["imap_expunge"] = "bool imap_expunge(resource stream_id)"
let s:phpprotos["imap_close"] = "bool imap_close(resource stream_id [, int options])"
let s:phpprotos["imap_headers"] = "array imap_headers(resource stream_id)"
let s:phpprotos["imap_body"] = "string imap_body(resource stream_id, int msg_no [, int options])"
let s:phpprotos["imap_mail_copy"] = "bool imap_mail_copy(resource stream_id, int msg_no, string mailbox [, int options])"
let s:phpprotos["imap_mail_move"] = "bool imap_mail_move(resource stream_id, int msg_no, string mailbox [, int options])"
let s:phpprotos["imap_createmailbox"] = "bool imap_createmailbox(resource stream_id, string mailbox)"
let s:phpprotos["imap_renamemailbox"] = "bool imap_renamemailbox(resource stream_id, string old_name, string new_name)"
let s:phpprotos["imap_deletemailbox"] = "bool imap_deletemailbox(resource stream_id, string mailbox)"
let s:phpprotos["imap_list"] = "array imap_list(resource stream_id, string ref, string pattern)"
let s:phpprotos["imap_getmailboxes"] = "array imap_getmailboxes(resource stream_id, string ref, string pattern)"
let s:phpprotos["imap_scan"] = "array imap_scan(resource stream_id, string ref, string pattern, string content)"
let s:phpprotos["imap_check"] = "object imap_check(resource stream_id)"
let s:phpprotos["imap_delete"] = "bool imap_delete(resource stream_id, int msg_no [, int options])"
let s:phpprotos["imap_undelete"] = "bool imap_undelete(resource stream_id, int msg_no)"
let s:phpprotos["imap_headerinfo"] = "object imap_headerinfo(resource stream_id, int msg_no [, int from_length [, int subject_length [, string default_host]]])"
let s:phpprotos["imap_rfc822_parse_headers"] = "object imap_rfc822_parse_headers(string headers [, string default_host])"
let s:phpprotos["imap_lsub"] = "array imap_lsub(resource stream_id, string ref, string pattern)"
let s:phpprotos["imap_getsubscribed"] = "array imap_getsubscribed(resource stream_id, string ref, string pattern)"
let s:phpprotos["imap_subscribe"] = "bool imap_subscribe(resource stream_id, string mailbox)"
let s:phpprotos["imap_unsubscribe"] = "bool imap_unsubscribe(resource stream_id, string mailbox)"
let s:phpprotos["imap_fetchstructure"] = "object imap_fetchstructure(resource stream_id, int msg_no [, int options])"
let s:phpprotos["imap_fetchbody"] = "string imap_fetchbody(resource stream_id, int msg_no, string section [, int options])"
let s:phpprotos["imap_savebody"] = "bool imap_savebody(resource stream_id, string|resource file, int msg_no[, string section = \"\"[, int options = 0]])"
let s:phpprotos["imap_base64"] = "string imap_base64(string text)"
let s:phpprotos["imap_qprint"] = "string imap_qprint(string text)"
let s:phpprotos["imap_8bit"] = "string imap_8bit(string text)"
let s:phpprotos["imap_binary"] = "string imap_binary(string text)"
let s:phpprotos["imap_mailboxmsginfo"] = "object imap_mailboxmsginfo(resource stream_id)"
let s:phpprotos["imap_rfc822_write_address"] = "string imap_rfc822_write_address(string mailbox, string host, string personal)"
let s:phpprotos["imap_rfc822_parse_adrlist"] = "array imap_rfc822_parse_adrlist(string address_string, string default_host)"
let s:phpprotos["imap_utf8"] = "string imap_utf8(string mime_encoded_text)"
let s:phpprotos["imap_utf7_decode"] = "string imap_utf7_decode(string buf)"
let s:phpprotos["imap_utf7_encode"] = "string imap_utf7_encode(string buf)"
let s:phpprotos["imap_setflag_full"] = "bool imap_setflag_full(resource stream_id, string sequence, string flag [, int options])"
let s:phpprotos["imap_clearflag_full"] = "bool imap_clearflag_full(resource stream_id, string sequence, string flag [, int options])"
let s:phpprotos["imap_sort"] = "array imap_sort(resource stream_id, int criteria, int reverse [, int options [, string search_criteria [, string charset]]])"
let s:phpprotos["imap_fetchheader"] = "string imap_fetchheader(resource stream_id, int msg_no [, int options])"
let s:phpprotos["imap_uid"] = "int imap_uid(resource stream_id, int msg_no)"
let s:phpprotos["imap_msgno"] = "int imap_msgno(resource stream_id, int unique_msg_id)"
let s:phpprotos["imap_status"] = "object imap_status(resource stream_id, string mailbox, int options)"
let s:phpprotos["imap_bodystruct"] = "object imap_bodystruct(resource stream_id, int msg_no, string section)"
let s:phpprotos["imap_fetch_overview"] = "array imap_fetch_overview(resource stream_id, int msg_no [, int options])"
let s:phpprotos["imap_mail_compose"] = "string imap_mail_compose(array envelope, array body)"
let s:phpprotos["imap_mail"] = "bool imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]])"
let s:phpprotos["imap_search"] = "array imap_search(resource stream_id, string criteria [, int options [, string charset]])"
let s:phpprotos["imap_alerts"] = "array imap_alerts(void)"
let s:phpprotos["imap_errors"] = "array imap_errors(void)"
let s:phpprotos["imap_last_error"] = "string imap_last_error(void) "
let s:phpprotos["imap_mime_header_decode"] = "array imap_mime_header_decode(string str)"
let s:phpprotos["imap_thread"] = "array imap_thread(resource stream_id [, int options])"
let s:phpprotos["imap_timeout"] = "mixed imap_timeout(int timeout_type [, int timeout])"
let s:phpprotos["json_encode"] = "string json_encode(mixed data)"
let s:phpprotos["json_decode"] = "mixed json_decode(string json [, bool assoc])"
let s:phpprotos["ldap_connect"] = "resource ldap_connect([string host [, int port]])"
let s:phpprotos["ldap_bind"] = "bool ldap_bind(resource link [, string dn, string password])"
let s:phpprotos["ldap_sasl_bind"] = "bool ldap_sasl_bind(resource link [, string binddn, string password, string sasl_mech, string sasl_realm, string sasl_authc_id, string sasl_authz_id, string props])"
let s:phpprotos["ldap_unbind"] = "bool ldap_unbind(resource link)"
let s:phpprotos["ldap_read"] = "resource ldap_read(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])"
let s:phpprotos["ldap_list"] = "resource ldap_list(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])"
let s:phpprotos["ldap_search"] = "resource ldap_search(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])"
let s:phpprotos["ldap_free_result"] = "bool ldap_free_result(resource result)"
let s:phpprotos["ldap_count_entries"] = "int ldap_count_entries(resource link, resource result)"
let s:phpprotos["ldap_first_entry"] = "resource ldap_first_entry(resource link, resource result)"
let s:phpprotos["ldap_next_entry"] = "resource ldap_next_entry(resource link, resource result_entry)"
let s:phpprotos["ldap_get_entries"] = "array ldap_get_entries(resource link, resource result)"
let s:phpprotos["ldap_first_attribute"] = "string ldap_first_attribute(resource link, resource result_entry)"
let s:phpprotos["ldap_next_attribute"] = "string ldap_next_attribute(resource link, resource result_entry)"
let s:phpprotos["ldap_get_attributes"] = "array ldap_get_attributes(resource link, resource result_entry)"
let s:phpprotos["ldap_get_values_len"] = "array ldap_get_values_len(resource link, resource result_entry, string attribute)"
let s:phpprotos["ldap_get_dn"] = "string ldap_get_dn(resource link, resource result_entry)"
let s:phpprotos["ldap_explode_dn"] = "array ldap_explode_dn(string dn, int with_attrib)"
let s:phpprotos["ldap_dn2ufn"] = "string ldap_dn2ufn(string dn)"
let s:phpprotos["ldap_add"] = "bool ldap_add(resource link, string dn, array entry)"
let s:phpprotos["ldap_mod_replace"] = "bool ldap_mod_replace(resource link, string dn, array entry)"
let s:phpprotos["ldap_mod_add"] = "bool ldap_mod_add(resource link, string dn, array entry)"
let s:phpprotos["ldap_mod_del"] = "bool ldap_mod_del(resource link, string dn, array entry)"
let s:phpprotos["ldap_delete"] = "bool ldap_delete(resource link, string dn)"
let s:phpprotos["ldap_errno"] = "int ldap_errno(resource link)"
let s:phpprotos["ldap_err2str"] = "string ldap_err2str(int errno)"
let s:phpprotos["ldap_error"] = "string ldap_error(resource link)"
let s:phpprotos["ldap_compare"] = "bool ldap_compare(resource link, string dn, string attr, string value)"
let s:phpprotos["ldap_sort"] = "bool ldap_sort(resource link, resource result, string sortfilter)"
let s:phpprotos["ldap_get_option"] = "bool ldap_get_option(resource link, int option, mixed retval)"
let s:phpprotos["ldap_set_option"] = "bool ldap_set_option(resource link, int option, mixed newval)"
let s:phpprotos["ldap_parse_result"] = "bool ldap_parse_result(resource link, resource result, int errcode, string matcheddn, string errmsg, array referrals)"
let s:phpprotos["ldap_first_reference"] = "resource ldap_first_reference(resource link, resource result)"
let s:phpprotos["ldap_next_reference"] = "resource ldap_next_reference(resource link, resource reference_entry)"
let s:phpprotos["ldap_parse_reference"] = "bool ldap_parse_reference(resource link, resource reference_entry, array referrals)"
let s:phpprotos["ldap_rename"] = "bool ldap_rename(resource link, string dn, string newrdn, string newparent, bool deleteoldrdn);"
let s:phpprotos["ldap_start_tls"] = "bool ldap_start_tls(resource link)"
let s:phpprotos["ldap_set_rebind_proc"] = "bool ldap_set_rebind_proc(resource link, string callback)"
let s:phpprotos["ldap_t61_to_8859"] = "string ldap_t61_to_8859(string value)"
let s:phpprotos["ldap_8859_to_t61"] = "string ldap_8859_to_t61(string value)"
let s:phpprotos["void ming_setcubicthreshold "] = "void ming_setcubicthreshold (int threshold)"
let s:phpprotos["ming_setscale"] = "void ming_setscale(int scale)"
let s:phpprotos["ming_useswfversion"] = "void ming_useswfversion(int version)"
let s:phpprotos["ming_useconstants"] = "void ming_useconstants(int use)"
let s:phpprotos["swfaction::__construct"] = "void swfaction::__construct(string)"
let s:phpprotos["swfbitmap::__construct"] = "void swfbitmap::__construct(mixed file [, mixed maskfile])"
let s:phpprotos["swfbitmap::getWidth"] = "float swfbitmap::getWidth()"
let s:phpprotos["swfbitmap::getHeight"] = "float swfbitmap::getHeight()"
let s:phpprotos["swfbutton::__construct"] = "void swfbutton::__construct()"
let s:phpprotos["swfbutton::setHit"] = "void swfbutton::setHit(object SWFCharacter)"
let s:phpprotos["swfbutton::setOver"] = "void swfbutton::setOver(object SWFCharacter)"
let s:phpprotos["swfbutton::setUp"] = "void swfbutton::setUp(object SWFCharacter)"
let s:phpprotos["swfbutton::setDown"] = "void swfbutton::setDown(object SWFCharacter)"
let s:phpprotos["swfbutton::addShape"] = "void swfbutton::addShape(object SWFCharacter, int flags)"
let s:phpprotos["swfbutton::setMenu"] = "void swfbutton::setMenu(int flag)"
let s:phpprotos["swfbutton::setAction"] = "void swfbutton::setAction(object SWFAction)"
let s:phpprotos["swfbutton::addASound"] = "SWFSoundInstance swfbutton::addASound(SWFSound sound, int flags)"
let s:phpprotos["swfbutton::addAction"] = "void swfbutton::addAction(object SWFAction, int flags)"
let s:phpprotos["ming_keypress"] = "int ming_keypress(string str)"
let s:phpprotos["swfdisplayitem::moveTo"] = "void swfdisplayitem::moveTo(int x, int y)"
let s:phpprotos["swfdisplayitem::move"] = "void swfdisplayitem::move(float dx, float dy)"
let s:phpprotos["swfdisplayitem::scaleTo"] = "void swfdisplayitem::scaleTo(float xScale [, float yScale])"
let s:phpprotos["swfdisplayitem::scale"] = "void swfdisplayitem::scale(float xScale, float yScale)"
let s:phpprotos["swfdisplayitem::rotateTo"] = "void swfdisplayitem::rotateTo(float degrees)"
let s:phpprotos["swfdisplayitem::rotate"] = "void swfdisplayitem::rotate(float degrees)"
let s:phpprotos["swfdisplayitem::skewXTo"] = "void swfdisplayitem::skewXTo(float xSkew)"
let s:phpprotos["swfdisplayitem::skewX"] = "void swfdisplayitem::skewX(float xSkew)"
let s:phpprotos["swfdisplayitem::skewYTo"] = "void swfdisplayitem::skewYTo(float ySkew)"
let s:phpprotos["swfdisplayitem::skewY"] = "void swfdisplayitem::skewY(float ySkew)"
let s:phpprotos["swfdisplayitem::setMatrix"] = "void swfdisplayitem::setMatrix(float a, float b, float c, float d, float x, float y)"
let s:phpprotos["swfdisplayitem::setDepth"] = "void swfdisplayitem::setDepth(int depth)"
let s:phpprotos["swfdisplayitem::setRatio"] = "void swfdisplayitem::setRatio(float ratio)"
let s:phpprotos["swfdisplayitem::addColor"] = "void swfdisplayitem::addColor(int r, int g, int b [, int a])"
let s:phpprotos["swfdisplayitem::multColor"] = "void swfdisplayitem::multColor(float r, float g, float b [, float a])"
let s:phpprotos["swfdisplayitem::setName"] = "void swfdisplayitem::setName(string name)"
let s:phpprotos["swfdisplayitem::addAction"] = "void swfdisplayitem::addAction(object SWFAction, int flags)"
let s:phpprotos["swfdisplayitem::setMaskLevel"] = "void swfdisplayitem::setMaskLevel(int level)"
let s:phpprotos["swfdisplayitem::endMask"] = "void swfdisplayitem::endMask()"
let s:phpprotos["swffill::__construct"] = "void swffill::__construct()"
let s:phpprotos["swffill::moveTo"] = "void swffill::moveTo(float x, float y)"
let s:phpprotos["swffill::scaleTo"] = "void swffill::scaleTo(float xScale [, float yScale])"
let s:phpprotos["swffill::rotateTo"] = "void swffill::rotateTo(float degrees)"
let s:phpprotos["swffill::skewXTo"] = "void swffill::skewXTo(float xSkew)"
let s:phpprotos["swffill::skewYTo"] = "void swffill::skewYTo(float ySkew)"
let s:phpprotos["swffontcha::raddChars"] = "void swffontcha::raddChars(string)"
let s:phpprotos["swffontchar::addChars"] = "void swffontchar::addChars(string)"
let s:phpprotos["swffont::__construct"] = "void swffont::__construct(string filename)"
let s:phpprotos["swffont::getWidth"] = "float swffont::getWidth(string str)"
let s:phpprotos["swffont::getUTF8Width"] = "int swffont::getUTF8Width(string)"
let s:phpprotos["swffont::getWideWidth"] = "int swffont::getWideWidth(string)"
let s:phpprotos["swffont::getAscent"] = "float swffont::getAscent()"
let s:phpprotos["swffont::getDescent"] = "float swffont::getDescent()"
let s:phpprotos["swffont::getLeading"] = "float swffont::getLeading()"
let s:phpprotos["swffont::addChars"] = "void swffont::addChars(string)"
let s:phpprotos["swffont::getShape"] = "string swffont::getShape(code)"
let s:phpprotos["swfgradient::__construct"] = "void swfgradient::__construct()"
let s:phpprotos["swfgradient::addEntry"] = "void swfgradient::addEntry(float ratio, int r, int g, int b [, int a])"
let s:phpprotos["swfmorph::__construct"] = "void swfmorph::__construct()"
let s:phpprotos["swfmorph::getShape1"] = "object swfmorph::getShape1()"
let s:phpprotos["swfmorph::getShape2"] = "object swfmorph::getShape2()"
let s:phpprotos["swfsound::__construct"] = "void swfsound::__construct(string filename, int flags)"
let s:phpprotos["swfvideostream_init"] = "class swfvideostream_init([file])"
let s:phpprotos["swfprebuiltclip_init"] = "class swfprebuiltclip_init([file])"
let s:phpprotos["swfmovie::__construct"] = "void swfmovie::__construct(int version) "
let s:phpprotos["swfmovie::nextframe"] = "void swfmovie::nextframe()  "
let s:phpprotos["swfmovie::labelframe"] = "void swfmovie::labelframe(string label)"
let s:phpprotos["swfmovie::namedanchor"] = "void swfmovie::namedanchor(string name)"
let s:phpprotos["swfmovie::protect"] = "void swfmovie::protect([ string pasword])"
let s:phpprotos["swfmovie::add"] = "object swfmovie::add(object SWFBlock) "
let s:phpprotos["swfmovie::remove"] = "void swfmovie::remove(object SWFBlock)"
let s:phpprotos["swfmovie::output"] = "int swfmovie::output([int compression])"
let s:phpprotos["swfmovie::saveToFile"] = "int swfmovie::saveToFile(stream x [, int compression])"
let s:phpprotos["swfmovie::save"] = "int swfmovie::save(mixed where [, int compression])"
let s:phpprotos["swfmovie::setBackground"] = "void swfmovie::setBackground(int r, int g, int b)"
let s:phpprotos["swfmovie::setRate"] = "void swfmovie::setRate(float rate)"
let s:phpprotos["swfmovie::setDimension"] = "void swfmovie::setDimension(float x, float y)"
let s:phpprotos["swfmovie::setFrames"] = "void swfmovie::setFrames(int frames)"
let s:phpprotos["swfmovie::streamMP3"] = "int swfmovie::streamMP3(mixed file [, float skip])"
let s:phpprotos["swfshape::__construct"] = "void swfshape::__construct()"
let s:phpprotos["swfshape::setline"] = "void swfshape::setline(int width, int r, int g, int b [, int a])"
let s:phpprotos["swfshape::addfill"] = "object swfshape::addfill(mixed arg1, int arg2, [int b [, int a]])"
let s:phpprotos["swfshape::setleftfill"] = "void swfshape::setleftfill(int arg1 [, int g ,int b [,int a]])"
let s:phpprotos["swfshape::setleftfill"] = "void swfshape::setleftfill(int arg1 [, int g ,int b [,int a]])"
let s:phpprotos["swfshape::movepento"] = "void swfshape::movepento(float x, float y)"
let s:phpprotos["swfshape::movepen"] = "void swfshape::movepen(float x, float y)"
let s:phpprotos["swfshape::drawlineto"] = "void swfshape::drawlineto(float x, float y)"
let s:phpprotos["swfshape::drawline"] = "void swfshape::drawline(float dx, float dy)"
let s:phpprotos["swfshape::drawcurveto"] = "void swfshape::drawcurveto(float ax, float ay, float bx, float by [, float dx, float dy])"
let s:phpprotos["swfshape::drawcurve"] = "void swfshape::drawcurve(float adx, float ady, float bdx, float bdy [, float cdx, float cdy])"
let s:phpprotos["swfshape::drawglyph"] = "void swfshape::drawglyph(SWFFont font, string character [, int size])"
let s:phpprotos["swfshape::drawcircle"] = "void swfshape::drawcircle(float r)"
let s:phpprotos["swfshape::drawarc"] = "void swfshape::drawarc(float r, float startAngle, float endAngle)"
let s:phpprotos["swfshape::drawcubic"] = "void swfshape::drawcubic(float bx, float by, float cx, float cy, float dx, float dy)"
let s:phpprotos["swfshape::drawcubic"] = "void swfshape::drawcubic(float bx, float by, float cx, float cy, float dx, float dy)"
let s:phpprotos["swfsprite::__construct"] = "void swfsprite::__construct()"
let s:phpprotos["swfsprite::add"] = "object swfsprite::add(object SWFCharacter)"
let s:phpprotos["swfsprite::remove"] = "void swfsprite::remove(object SWFDisplayItem)"
let s:phpprotos["swfsprite::nextFrame"] = "void swfsprite::nextFrame()"
let s:phpprotos["swfsprite::labelFrame"] = "void swfsprite::labelFrame(string label)"
let s:phpprotos["swfsprite::setFrames"] = "void swfsprite::setFrames(int frames)"
let s:phpprotos["swftext::__construct"] = "void swftext::__construct()"
let s:phpprotos["swftext::setFont"] = "void swftext::setFont(object font)"
let s:phpprotos["swftext::setHeight"] = "void swftext::setHeight(float height)"
let s:phpprotos["swftext::setSpacing"] = "void swftext::setSpacing(float spacing)"
let s:phpprotos["swftext::setColor"] = "void swftext::setColor(int r, int g, int b [, int a])"
let s:phpprotos["swftext::moveTo"] = "void swftext::moveTo(float x, float y)"
let s:phpprotos["swftext::addString"] = "void swftext::addString(string text)"
let s:phpprotos["swftext::addUTF8String"] = "void swftext::addUTF8String(string text)"
let s:phpprotos["swftext::addWideString"] = "void swftext::addWideString(string text)"
let s:phpprotos["swftext::getWidth"] = "float swftext::getWidth(string str)"
let s:phpprotos["swftext::getUTF8Width"] = "double swftext::getUTF8Width(string)"
let s:phpprotos["swftext::getWideWidth"] = "double swftext::getWideWidth(string)"
let s:phpprotos["swftext::getAscent"] = "float swftext::getAscent()"
let s:phpprotos["swftext::getDescent"] = "float swftext::getDescent()"
let s:phpprotos["swftext::getLeading"] = "float swftext::getLeading()"
let s:phpprotos["swftextfield::__construct"] = "void swftextfield::__construct([int flags])"
let s:phpprotos["swftextfield::setFont"] = "void swftextfield::setFont(object font)"
let s:phpprotos["swftextfield::setBounds"] = "void swftextfield::setBounds(float width, float height)"
let s:phpprotos["swftextfield::align"] = "void swftextfield::align(int alignment)"
let s:phpprotos["swftextfield::setHeight"] = "void swftextfield::setHeight(float height)"
let s:phpprotos["swftextfield::setLeftMargin"] = "void swftextfield::setLeftMargin(float margin)"
let s:phpprotos["swftextfield::setRightMargin"] = "void swftextfield::setRightMargin(float margin)"
let s:phpprotos["swftextfield::setMargins"] = "void swftextfield::setMargins(float left, float right)"
let s:phpprotos["swftextfield::setIndentation"] = "void swftextfield::setIndentation(float indentation)"
let s:phpprotos["swftextfield::setLineSpacing"] = "void swftextfield::setLineSpacing(float space)"
let s:phpprotos["swftextfield::setColor"] = "void swftextfield::setColor(int r, int g, int b [, int a])"
let s:phpprotos["swftextfield::setName"] = "void swftextfield::setName(string var_name)"
let s:phpprotos["swftextfield::addString"] = "void swftextfield::addString(string str)"
let s:phpprotos["swftextfield::setPadding"] = "void swftextfield::setPadding(float padding)"
let s:phpprotos["swftextfield::addChars"] = "void swftextfield::addChars(string)"
let s:phpprotos["msql_connect"] = "int msql_connect([string hostname[:port]] [, string username] [, string password])"
let s:phpprotos["msql_pconnect"] = "int msql_pconnect([string hostname[:port]] [, string username] [, string password])"
let s:phpprotos["msql_close"] = "bool msql_close([resource link_identifier])"
let s:phpprotos["msql_select_db"] = "bool msql_select_db(string database_name [, resource link_identifier])"
let s:phpprotos["msql_create_db"] = "bool msql_create_db(string database_name [, resource link_identifier])"
let s:phpprotos["msql_drop_db"] = "bool msql_drop_db(string database_name [, resource link_identifier])"
let s:phpprotos["msql_query"] = "resource msql_query(string query [, resource link_identifier])"
let s:phpprotos["msql_db_query"] = "resource msql_db_query(string database_name, string query [, resource link_identifier])"
let s:phpprotos["msql_list_dbs"] = "resource msql_list_dbs([resource link_identifier])"
let s:phpprotos["msql_list_tables"] = "resource msql_list_tables(string database_name [, resource link_identifier])"
let s:phpprotos["msql_list_fields"] = "resource msql_list_fields(string database_name, string table_name [, resource link_identifier])"
let s:phpprotos["msql_error"] = "string msql_error(void)"
let s:phpprotos["msql_result"] = "string msql_result(int query, int row [, mixed field])"
let s:phpprotos["msql_num_rows"] = "int msql_num_rows(resource query)"
let s:phpprotos["msql_num_fields"] = "int msql_num_fields(resource query)"
let s:phpprotos["msql_fetch_row"] = "array msql_fetch_row(resource query)"
let s:phpprotos["msql_fetch_object"] = "object msql_fetch_object(resource query [, resource result_type])"
let s:phpprotos["msql_fetch_array"] = "array msql_fetch_array(resource query [, int result_type])"
let s:phpprotos["msql_data_seek"] = "bool msql_data_seek(resource query, int row_number)"
let s:phpprotos["msql_fetch_field"] = "object msql_fetch_field(resource query [, int field_offset])"
let s:phpprotos["msql_field_seek"] = "bool msql_field_seek(resource query, int field_offset)"
let s:phpprotos["msql_field_name"] = "string msql_field_name(resource query, int field_index)"
let s:phpprotos["msql_field_table"] = "string msql_field_table(resource query, int field_offset)"
let s:phpprotos["msql_field_len"] = "int msql_field_len(int query, int field_offet)"
let s:phpprotos["msql_field_type"] = "string msql_field_type(resource query, int field_offset)"
let s:phpprotos["msql_field_flags"] = "string msql_field_flags(resource query, int field_offset)"
let s:phpprotos["msql_free_result"] = "bool msql_free_result(resource query)"
let s:phpprotos["msql_affected_rows"] = "int msql_affected_rows(resource query)"
let s:phpprotos["oci_define_by_name"] = "bool oci_define_by_name(resource stmt, string name, mixed &var [, int type])"
let s:phpprotos["oci_bind_by_name"] = "bool oci_bind_by_name(resource stmt, string name, mixed &var, [, int maxlength [, int type]])"
let s:phpprotos["oci_bind_array_by_name"] = "bool oci_bind_array_by_name(resource stmt, string name, array &var, int max_table_length [, int max_item_length [, int type ]])"
let s:phpprotos["oci_free_descriptor"] = "bool oci_free_descriptor()"
let s:phpprotos["oci_lob_save"] = "bool oci_lob_save( string data [, int offset ])"
let s:phpprotos["oci_lob_import"] = "bool oci_lob_import( string filename )"
let s:phpprotos["oci_lob_load"] = "string oci_lob_load()"
let s:phpprotos["oci_lob_read"] = "string oci_lob_read( int length )"
let s:phpprotos["oci_lob_eof"] = "bool oci_lob_eof()"
let s:phpprotos["oci_lob_tell"] = "int oci_lob_tell()"
let s:phpprotos["oci_lob_rewind"] = "bool oci_lob_rewind()"
let s:phpprotos["oci_lob_seek"] = "bool oci_lob_seek( int offset [, int whence ])"
let s:phpprotos["oci_lob_size"] = "int oci_lob_size()"
let s:phpprotos["oci_lob_write"] = "int oci_lob_write( string string [, int length ])"
let s:phpprotos["oci_lob_append"] = "bool oci_lob_append( object lob )"
let s:phpprotos["oci_lob_truncate"] = "bool oci_lob_truncate( [ int length ])"
let s:phpprotos["oci_lob_erase"] = "int oci_lob_erase( [ int offset [, int length ] ] )"
let s:phpprotos["oci_lob_flush"] = "bool oci_lob_flush( [ int flag ] )"
let s:phpprotos["ocisetbufferinglob"] = "bool ocisetbufferinglob( boolean flag )"
let s:phpprotos["ocigetbufferinglob"] = "bool ocigetbufferinglob()"
let s:phpprotos["oci_lob_copy"] = "bool oci_lob_copy( object lob_to, object lob_from [, int length ] )"
let s:phpprotos["oci_lob_is_equal"] = "bool oci_lob_is_equal( object lob1, object lob2 )"
let s:phpprotos["oci_lob_export"] = "bool oci_lob_export([string filename [, int start [, int length]]])"
let s:phpprotos["oci_lob_write_temporary"] = "bool oci_lob_write_temporary(string var [, int lob_type])"
let s:phpprotos["oci_lob_close"] = "bool oci_lob_close()"
let s:phpprotos["oci_new_descriptor"] = "object oci_new_descriptor(resource connection [, int type])"
let s:phpprotos["oci_rollback"] = "bool oci_rollback(resource connection)"
let s:phpprotos["oci_commit"] = "bool oci_commit(resource connection)"
let s:phpprotos["oci_field_name"] = "string oci_field_name(resource stmt, int col)"
let s:phpprotos["oci_field_size"] = "int oci_field_size(resource stmt, int col)"
let s:phpprotos["oci_field_scale"] = "int oci_field_scale(resource stmt, int col)"
let s:phpprotos["oci_field_precision"] = "int oci_field_precision(resource stmt, int col)"
let s:phpprotos["oci_field_type"] = "mixed oci_field_type(resource stmt, int col)"
let s:phpprotos["oci_field_type_raw"] = "int oci_field_type_raw(resource stmt, int col)"
let s:phpprotos["oci_field_is_null"] = "bool oci_field_is_null(resource stmt, int col)"
let s:phpprotos["oci_internal_debug"] = "void oci_internal_debug(int onoff)"
let s:phpprotos["oci_execute"] = "bool oci_execute(resource stmt [, int mode])"
let s:phpprotos["oci_cancel"] = "bool oci_cancel(resource stmt)"
let s:phpprotos["oci_fetch"] = "bool oci_fetch(resource stmt)"
let s:phpprotos["ocifetchinto"] = "int ocifetchinto(resource stmt, array &output [, int mode])"
let s:phpprotos["oci_fetch_all"] = "int oci_fetch_all(resource stmt, array &output[, int skip[, int maxrows[, int flags]]])"
let s:phpprotos["oci_fetch_object"] = "object oci_fetch_object( resource stmt )"
let s:phpprotos["oci_fetch_row"] = "array oci_fetch_row( resource stmt )"
let s:phpprotos["oci_fetch_assoc"] = "array oci_fetch_assoc( resource stmt )"
let s:phpprotos["oci_fetch_array"] = "array oci_fetch_array( resource stmt [, int mode ])"
let s:phpprotos["oci_free_statement"] = "bool oci_free_statement(resource stmt)"
let s:phpprotos["oci_close"] = "bool oci_close(resource connection)"
let s:phpprotos["oci_new_connect"] = "resource oci_new_connect(string user, string pass [, string db])"
let s:phpprotos["oci_connect"] = "resource oci_connect(string user, string pass [, string db [, string charset [, int session_mode ]])"
let s:phpprotos["oci_pconnect"] = "resource oci_pconnect(string user, string pass [, string db [, string charset ]])"
let s:phpprotos["oci_error"] = "array oci_error([resource stmt|connection|global])"
let s:phpprotos["oci_num_fields"] = "int oci_num_fields(resource stmt)"
let s:phpprotos["oci_parse"] = "resource oci_parse(resource connection, string query)"
let s:phpprotos["oci_set_prefetch"] = "bool oci_set_prefetch(resource stmt, int prefetch_rows)"
let s:phpprotos["oci_password_change"] = "bool oci_password_change(resource connection, string username, string old_password, string new_password)"
let s:phpprotos["oci_new_cursor"] = "resource oci_new_cursor(resource connection)"
let s:phpprotos["oci_result"] = "string oci_result(resource stmt, mixed column)"
let s:phpprotos["oci_server_version"] = "string oci_server_version(resource connection)"
let s:phpprotos["oci_statement_type"] = "string oci_statement_type(resource stmt)"
let s:phpprotos["oci_num_rows"] = "int oci_num_rows(resource stmt)"
let s:phpprotos["oci_free_collection"] = "bool oci_free_collection()"
let s:phpprotos["oci_collection_append"] = "bool oci_collection_append(string value)"
let s:phpprotos["oci_collection_element_get"] = "string oci_collection_element_get(int ndx)"
let s:phpprotos["oci_collection_assign"] = "bool oci_collection_assign(object from)"
let s:phpprotos["oci_collection_element_assign"] = "bool oci_collection_element_assign(int index, string val)"
let s:phpprotos["oci_collection_size"] = "int oci_collection_size()"
let s:phpprotos["oci_collection_max"] = "int oci_collection_max()"
let s:phpprotos["oci_collection_trim"] = "bool oci_collection_trim(int num)"
let s:phpprotos["oci_new_collection"] = "object oci_new_collection(resource connection, string tdo [, string schema])"
let s:phpprotos["odbc_close_all"] = "void odbc_close_all(void)"
let s:phpprotos["odbc_binmode"] = "bool odbc_binmode(int result_id, int mode)"
let s:phpprotos["odbc_longreadlen"] = "bool odbc_longreadlen(int result_id, int length)"
let s:phpprotos["odbc_prepare"] = "resource odbc_prepare(resource connection_id, string query)"
let s:phpprotos["odbc_execute"] = "bool odbc_execute(resource result_id [, array parameters_array])"
let s:phpprotos["odbc_cursor"] = "string odbc_cursor(resource result_id)"
let s:phpprotos["odbc_data_source"] = "array odbc_data_source(resource connection_id, int fetch_type)"
let s:phpprotos["odbc_exec"] = "resource odbc_exec(resource connection_id, string query [, int flags])"
let s:phpprotos["odbc_fetch_object"] = "object odbc_fetch_object(int result [, int rownumber])"
let s:phpprotos["odbc_fetch_array"] = "array odbc_fetch_array(int result [, int rownumber])"
let s:phpprotos["odbc_fetch_into"] = "int odbc_fetch_into(resource result_id, array result_array, [, int rownumber])"
let s:phpprotos["solid_fetch_prev"] = "bool solid_fetch_prev(resource result_id)"
let s:phpprotos["odbc_fetch_row"] = "bool odbc_fetch_row(resource result_id [, int row_number])"
let s:phpprotos["odbc_result"] = "mixed odbc_result(resource result_id, mixed field)"
let s:phpprotos["odbc_result_all"] = "int odbc_result_all(resource result_id [, string format])"
let s:phpprotos["odbc_free_result"] = "bool odbc_free_result(resource result_id)"
let s:phpprotos["odbc_connect"] = "resource odbc_connect(string DSN, string user, string password [, int cursor_option])"
let s:phpprotos["odbc_pconnect"] = "resource odbc_pconnect(string DSN, string user, string password [, int cursor_option])"
let s:phpprotos["odbc_close"] = "void odbc_close(resource connection_id)"
let s:phpprotos["odbc_num_rows"] = "int odbc_num_rows(resource result_id)"
let s:phpprotos["odbc_next_result"] = "bool odbc_next_result(resource result_id)"
let s:phpprotos["odbc_num_fields"] = "int odbc_num_fields(resource result_id)"
let s:phpprotos["odbc_field_name"] = "string odbc_field_name(resource result_id, int field_number)"
let s:phpprotos["odbc_field_type"] = "string odbc_field_type(resource result_id, int field_number)"
let s:phpprotos["odbc_field_len"] = "int odbc_field_len(resource result_id, int field_number)"
let s:phpprotos["odbc_field_scale"] = "int odbc_field_scale(resource result_id, int field_number)"
let s:phpprotos["odbc_field_num"] = "int odbc_field_num(resource result_id, string field_name)"
let s:phpprotos["odbc_autocommit"] = "mixed odbc_autocommit(resource connection_id [, int OnOff])"
let s:phpprotos["odbc_commit"] = "bool odbc_commit(resource connection_id)"
let s:phpprotos["odbc_rollback"] = "bool odbc_rollback(resource connection_id)"
let s:phpprotos["odbc_error"] = "string odbc_error([resource connection_id])"
let s:phpprotos["odbc_errormsg"] = "string odbc_errormsg([resource connection_id])"
let s:phpprotos["odbc_setoption"] = "bool odbc_setoption(resource conn_id|result_id, int which, int option, int value)"
let s:phpprotos["odbc_tables"] = "resource odbc_tables(resource connection_id [, string qualifier [, string owner [, string name [, string table_types]]]])"
let s:phpprotos["odbc_columns"] = "resource odbc_columns(resource connection_id [, string qualifier [, string owner [, string table_name [, string column_name]]]])"
let s:phpprotos["odbc_columnprivileges"] = "resource odbc_columnprivileges(resource connection_id, string catalog, string schema, string table, string column)"
let s:phpprotos["odbc_foreignkeys"] = "resource odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)"
let s:phpprotos["odbc_gettypeinfo"] = "resource odbc_gettypeinfo(resource connection_id [, int data_type])"
let s:phpprotos["odbc_primarykeys"] = "resource odbc_primarykeys(resource connection_id, string qualifier, string owner, string table)"
let s:phpprotos["odbc_procedurecolumns"] = "resource odbc_procedurecolumns(resource connection_id [, string qualifier, string owner, string proc, string column])"
let s:phpprotos["odbc_procedures"] = "resource odbc_procedures(resource connection_id [, string qualifier, string owner, string name])"
let s:phpprotos["odbc_specialcolumns"] = "resource odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)"
let s:phpprotos["odbc_statistics"] = "resource odbc_statistics(resource connection_id, string qualifier, string owner, string name, int unique, int accuracy)"
let s:phpprotos["odbc_tableprivileges"] = "resource odbc_tableprivileges(resource connection_id, string qualifier, string owner, string name)"
let s:phpprotos["birdstep_connect"] = "int birdstep_connect(string server, string user, string pass)"
let s:phpprotos["birdstep_close"] = "bool birdstep_close(int id)"
let s:phpprotos["birdstep_exec"] = "int birdstep_exec(int index, string exec_str)"
let s:phpprotos["birdstep_fetch"] = "bool birdstep_fetch(int index)"
let s:phpprotos["birdstep_result"] = "mixed birdstep_result(int index, int col)"
let s:phpprotos["birdstep_freeresult"] = "bool birdstep_freeresult(int index)"
let s:phpprotos["birdstep_autocommit"] = "bool birdstep_autocommit(int index)"
let s:phpprotos["birdstep_off_autocommit"] = "bool birdstep_off_autocommit(int index)"
let s:phpprotos["birdstep_commit"] = "bool birdstep_commit(int index)"
let s:phpprotos["birdstep_rollback"] = "bool birdstep_rollback(int index)"
let s:phpprotos["birdstep_fieldname"] = "string birdstep_fieldname(int index, int col)"
let s:phpprotos["birdstep_fieldnum"] = "int birdstep_fieldnum(int index)"
let s:phpprotos["preg_match"] = "int preg_match(string pattern, string subject [, array subpatterns [, int flags [, int offset]]])"
let s:phpprotos["preg_match_all"] = "int preg_match_all(string pattern, string subject, array subpatterns [, int flags [, int offset]])"
let s:phpprotos["preg_replace"] = "string preg_replace(mixed regex, mixed replace, mixed subject [, int limit [, count]])"
let s:phpprotos["preg_replace_callback"] = "string preg_replace_callback(mixed regex, mixed callback, mixed subject [, int limit [, count]])"
let s:phpprotos["preg_split"] = "array preg_split(string pattern, string subject [, int limit [, int flags]]) "
let s:phpprotos["preg_quote"] = "string preg_quote(string str [, string delim_char])"
let s:phpprotos["preg_grep"] = "array preg_grep(string regex, array input [, int flags])"
let s:phpprotos["preg_last_error"] = "int preg_last_error()"
let s:phpprotos["object SoapParam::SoapParam "] = "object SoapParam::SoapParam ( mixed data, string name)"
let s:phpprotos["object SoapHeader::SoapHeader "] = "object SoapHeader::SoapHeader ( string namespace, string name [, mixed data [, bool mustUnderstand [, mixed actor]]])"
let s:phpprotos["object SoapFault::SoapFault "] = "object SoapFault::SoapFault ( string faultcode, string faultstring [, string faultactor [, mixed detail [, string faultname [, mixed headerfault]]]])"
let s:phpprotos["object SoapFault::SoapFault "] = "object SoapFault::SoapFault ( string faultcode, string faultstring [, string faultactor [, mixed detail [, string faultname [, mixed headerfault]]]])"
let s:phpprotos["object SoapVar::SoapVar "] = "object SoapVar::SoapVar ( mixed data, int encoding [, string type_name [, string type_namespace [, string node_name [, string node_namespace]]]])"
let s:phpprotos["object SoapServer::SoapServer "] = "object SoapServer::SoapServer ( mixed wsdl [, array options])"
let s:phpprotos["object SoapServer::setPersistence "] = "object SoapServer::setPersistence ( int mode )"
let s:phpprotos["SoapServer::setClass"] = "void SoapServer::setClass(string class_name [, mixed args])"
let s:phpprotos["SoapServer::setObject"] = "void SoapServer::setObject(object)"
let s:phpprotos["SoapServer::getFunctions"] = "array SoapServer::getFunctions(void)"
let s:phpprotos["SoapServer::addFunction"] = "void SoapServer::addFunction(mixed functions)"
let s:phpprotos["void SoapServer::handle "] = "void SoapServer::handle ( [string soap_request])"
let s:phpprotos["SoapServer::fault "] = "SoapServer::fault ( staring code, string string [, string actor [, mixed details [, string name]]] )"
let s:phpprotos["object SoapClient::SoapClient "] = "object SoapClient::SoapClient ( mixed wsdl [, array options])"
let s:phpprotos["mixed SoapClient::__call "] = "mixed SoapClient::__call ( string function_name, array arguments [, array options [, array input_headers [, array output_headers]]])"
let s:phpprotos["array SoapClient::__getFunctions "] = "array SoapClient::__getFunctions ( void )"
let s:phpprotos["array SoapClient::__getTypes "] = "array SoapClient::__getTypes ( void )"
let s:phpprotos["string SoapClient::__getLastRequest "] = "string SoapClient::__getLastRequest ( void )"
let s:phpprotos["object SoapClient::__getLastResponse "] = "object SoapClient::__getLastResponse ( void )"
let s:phpprotos["SoapClient::__getLastRequestHeaders"] = "string SoapClient::__getLastRequestHeaders(void)"
let s:phpprotos["SoapClient::__getLastResponseHeaders"] = "string SoapClient::__getLastResponseHeaders(void)"
let s:phpprotos["SoapClient::__doRequest"] = "string SoapClient::__doRequest()"
let s:phpprotos["SoapClient::__setCookie"] = "void SoapClient::__setCookie(string name [, strung value])"
let s:phpprotos["SoapClient::__setSoapHeaders"] = "void SoapClient::__setSoapHeaders(array SoapHeaders)"
let s:phpprotos["SoapClient::__setLocation"] = "string SoapClient::__setLocation([string new_location])"
let s:phpprotos["snmpget"] = "string snmpget(string host, string community, string object_id [, int timeout [, int retries]]) "
let s:phpprotos["snmpgetnext"] = "string snmpgetnext(string host, string community, string object_id [, int timeout [, int retries]]) "
let s:phpprotos["snmpwalk"] = "array snmpwalk(string host, string community, string object_id [, int timeout [, int retries]]) "
let s:phpprotos["snmprealwalk"] = "array snmprealwalk(string host, string community, string object_id [, int timeout [, int retries]])"
let s:phpprotos["snmp_get_quick_print"] = "bool snmp_get_quick_print(void)"
let s:phpprotos["snmp_set_quick_print"] = "void snmp_set_quick_print(int quick_print)"
let s:phpprotos["snmp_set_enum_print"] = "void snmp_set_enum_print(int enum_print)"
let s:phpprotos["snmp_set_oid_output_format"] = "void snmp_set_oid_output_format(int oid_format)"
let s:phpprotos["snmpset"] = "int snmpset(string host, string community, string object_id, string type, mixed value [, int timeout [, int retries]]) "
let s:phpprotos["snmp2_get"] = "string snmp2_get(string host, string community, string object_id [, int timeout [, int retries]]) "
let s:phpprotos["snmp2_getnext"] = "string snmp2_getnext(string host, string community, string object_id [, int timeout [, int retries]]) "
let s:phpprotos["snmp2_walk"] = "array snmp2_walk(string host, string community, string object_id [, int timeout [, int retries]]) "
let s:phpprotos["snmp2_real_walk"] = "array snmp2_real_walk(string host, string community, string object_id [, int timeout [, int retries]])"
let s:phpprotos["snmp2_set"] = "int snmp2_set(string host, string community, string object_id, string type, mixed value [, int timeout [, int retries]]) "
let s:phpprotos["php_snmpv3"] = "void php_snmpv3(INTERNAL_FUNCTION_PARAMETERS, int st)"
let s:phpprotos["snmp3_get"] = "int snmp3_get(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])"
let s:phpprotos["snmp3_getnext"] = "int snmp3_getnext(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])"
let s:phpprotos["snmp3_walk"] = "int snmp3_walk(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])"
let s:phpprotos["snmp3_real_walk"] = "int snmp3_real_walk(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])"
let s:phpprotos["snmp3_set"] = "int snmp3_set(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id, string type, mixed value [, int timeout [, int retries]])"
let s:phpprotos["snmp_set_valueretrieval"] = "int snmp_set_valueretrieval(int method)"
let s:phpprotos["snmp_get_valueretrieval"] = "int snmp_get_valueretrieval()"
let s:phpprotos["snmp_read_mib"] = "int snmp_read_mib(string filename)"
let s:phpprotos["tidy_parse_string"] = "bool tidy_parse_string(string input [, mixed config_options [, string encoding]])"
let s:phpprotos["tidy_get_error_buffer"] = "string tidy_get_error_buffer([boolean detailed])"
let s:phpprotos["tidy_get_output"] = "string tidy_get_output()"
let s:phpprotos["tidy_parse_file"] = "boolean tidy_parse_file(string file [, mixed config_options [, string encoding [, bool use_include_path]]])"
let s:phpprotos["tidy_clean_repair"] = "boolean tidy_clean_repair()"
let s:phpprotos["tidy_repair_string"] = "boolean tidy_repair_string(string data [, mixed config_file [, string encoding]])"
let s:phpprotos["tidy_repair_file"] = "boolean tidy_repair_file(string filename [, mixed config_file [, string encoding [, bool use_include_path]]])"
let s:phpprotos["tidy_diagnose"] = "boolean tidy_diagnose()"
let s:phpprotos["tidy_get_release"] = "string tidy_get_release()"
let s:phpprotos["tidy_get_opt_doc"] = "string tidy_get_opt_doc(tidy resource, string optname)"
let s:phpprotos["tidy_get_config"] = "array tidy_get_config()"
let s:phpprotos["tidy_get_status"] = "int tidy_get_status()"
let s:phpprotos["tidy_get_html_ver"] = "int tidy_get_html_ver()"
let s:phpprotos["tidy_is_xhtml"] = "boolean tidy_is_xhtml()"
let s:phpprotos["tidy_is_xml"] = "boolean tidy_is_xml()"
let s:phpprotos["tidy_error_count"] = "int tidy_error_count()"
let s:phpprotos["tidy_warning_count"] = "int tidy_warning_count()"
let s:phpprotos["tidy_access_count"] = "int tidy_access_count()"
let s:phpprotos["tidy_config_count"] = "int tidy_config_count()"
let s:phpprotos["tidy_getopt"] = "mixed tidy_getopt(string option)"
let s:phpprotos["tidy_get_root"] = "TidyNode tidy_get_root()"
let s:phpprotos["tidy_get_html"] = "TidyNode tidy_get_html()"
let s:phpprotos["tidy_get_head"] = "TidyNode tidy_get_head()"
let s:phpprotos["tidy_get_body"] = "TidyNode tidy_get_body(resource tidy)"
let s:phpprotos["tidyNode::hasChildren"] = "boolean tidyNode::hasChildren()"
let s:phpprotos["tidyNode::hasSiblings"] = "boolean tidyNode::hasSiblings()"
let s:phpprotos["tidyNode::isComment"] = "boolean tidyNode::isComment()"
let s:phpprotos["tidyNode::isHtml"] = "boolean tidyNode::isHtml()"
let s:phpprotos["tidyNode::isText"] = "boolean tidyNode::isText()"
let s:phpprotos["tidyNode::isJste"] = "boolean tidyNode::isJste()"
let s:phpprotos["tidyNode::isAsp"] = "boolean tidyNode::isAsp()"
let s:phpprotos["tidyNode::isPhp"] = "boolean tidyNode::isPhp()"
let s:phpprotos["tidyNode::getParent"] = "tidyNode tidyNode::getParent()"
let s:phpprotos["wddx_serialize_value"] = "string wddx_serialize_value(mixed var [, string comment])"
let s:phpprotos["wddx_serialize_vars"] = "string wddx_serialize_vars(mixed var_name [, mixed ...])"
let s:phpprotos["wddx_packet_start"] = "int wddx_packet_start([string comment])"
let s:phpprotos["wddx_packet_end"] = "string wddx_packet_end(int packet_id)"
let s:phpprotos["wddx_add_vars"] = "int wddx_add_vars(int packet_id,  mixed var_names [, mixed ...])"
let s:phpprotos["wddx_deserialize"] = "mixed wddx_deserialize(mixed packet) "
let s:phpprotos["gzfile"] = "array gzfile(string filename [, int use_include_path])"
let s:phpprotos["gzopen"] = "resource gzopen(string filename, string mode [, int use_include_path])"
let s:phpprotos["readgzfile"] = "int readgzfile(string filename [, int use_include_path])"
let s:phpprotos["gzcompress"] = "string gzcompress(string data [, int level]) "
let s:phpprotos["gzuncompress"] = "string gzuncompress(string data [, int length]) "
let s:phpprotos["gzdeflate"] = "string gzdeflate(string data [, int level]) "
let s:phpprotos["gzinflate"] = "string gzinflate(string data [, int length]) "
let s:phpprotos["zlib_get_coding_type"] = "string zlib_get_coding_type(void)"
let s:phpprotos["gzencode"] = "string gzencode(string data [, int level [, int encoding_mode]])"
let s:phpprotos["ob_gzhandler"] = "string ob_gzhandler(string str, int mode)"
let s:phpprotos["dbase_open"] = "int dbase_open(string name, int mode)"
let s:phpprotos["dbase_close"] = "bool dbase_close(int identifier)"
let s:phpprotos["dbase_numrecords"] = "int dbase_numrecords(int identifier)"
let s:phpprotos["dbase_numfields"] = "int dbase_numfields(int identifier)"
let s:phpprotos["dbase_pack"] = "bool dbase_pack(int identifier)"
let s:phpprotos["dbase_add_record"] = "bool dbase_add_record(int identifier, array data)"
let s:phpprotos["dbase_replace_record"] = "bool dbase_replace_record(int identifier, array data, int recnum)"
let s:phpprotos["dbase_delete_record"] = "bool dbase_delete_record(int identifier, int record)"
let s:phpprotos["dbase_get_record"] = "array dbase_get_record(int identifier, int record)"
let s:phpprotos["dbase_get_record_with_names"] = "array dbase_get_record_with_names(int identifier, int record)"
let s:phpprotos["dbase_create"] = "bool dbase_create(string filename, array fields)"
let s:phpprotos["dbase_get_header_info"] = "array dbase_get_header_info(int database_handle)"
let s:phpprotos["ctype_alnum"] = "bool ctype_alnum(mixed c)"
let s:phpprotos["ctype_alpha"] = "bool ctype_alpha(mixed c)"
let s:phpprotos["ctype_cntrl"] = "bool ctype_cntrl(mixed c)"
let s:phpprotos["ctype_digit"] = "bool ctype_digit(mixed c)"
let s:phpprotos["ctype_lower"] = "bool ctype_lower(mixed c)"
let s:phpprotos["ctype_graph"] = "bool ctype_graph(mixed c)"
let s:phpprotos["ctype_print"] = "bool ctype_print(mixed c)"
let s:phpprotos["ctype_punct"] = "bool ctype_punct(mixed c)"
let s:phpprotos["ctype_space"] = "bool ctype_space(mixed c)"
let s:phpprotos["ctype_upper"] = "bool ctype_upper(mixed c)"
let s:phpprotos["ctype_xdigit"] = "bool ctype_xdigit(mixed c)"
let s:phpprotos["fbsql_connect"] = "resource fbsql_connect([string hostname [, string username [, string password]]])"
let s:phpprotos["fbsql_pconnect"] = "resource fbsql_pconnect([string hostname [, string username [, string password]]])"
let s:phpprotos["fbsql_close"] = "bool fbsql_close([resource link_identifier])"
let s:phpprotos["fbsql_set_transaction"] = "void fbsql_set_transaction(resource link_identifier, int locking, int isolation)"
let s:phpprotos["fbsql_autocommit"] = "bool fbsql_autocommit(resource link_identifier [, bool OnOff])"
let s:phpprotos["fbsql_commit"] = "bool fbsql_commit([resource link_identifier])"
let s:phpprotos["fbsql_rollback"] = "bool fbsql_rollback([resource link_identifier])"
let s:phpprotos["fbsql_create_blob"] = "string fbsql_create_blob(string blob_data [, resource link_identifier])"
let s:phpprotos["fbsql_create_clob"] = "string fbsql_create_clob(string clob_data [, resource link_identifier])"
let s:phpprotos["fbsql_set_lob_mode"] = "bool fbsql_set_lob_mode(resource result, int lob_mode)"
let s:phpprotos["fbsql_read_blob"] = "string fbsql_read_blob(string blob_handle [, resource link_identifier])"
let s:phpprotos["fbsql_read_clob"] = "string fbsql_read_clob(string clob_handle [, resource link_identifier])"
let s:phpprotos["fbsql_blob_size"] = "int fbsql_blob_size(string blob_handle [, resource link_identifier])"
let s:phpprotos["fbsql_clob_size"] = "int fbsql_clob_size(string clob_handle [, resource link_identifier])"
let s:phpprotos["fbsql_hostname"] = "string fbsql_hostname(resource link_identifier [, string host_name])"
let s:phpprotos["fbsql_database"] = "string fbsql_database(resource link_identifier [, string database]) "
let s:phpprotos["fbsql_database_password"] = "string fbsql_database_password(resource link_identifier [, string database_password])"
let s:phpprotos["fbsql_username"] = "string fbsql_username(resource link_identifier [, string username])"
let s:phpprotos["fbsql_password"] = "string fbsql_password(resource link_identifier [, string password])"
let s:phpprotos["fbsql_set_password"] = "bool fbsql_set_password(resource link_identifier, string user, string password, string old_password)"
let s:phpprotos["fbsql_select_db"] = "bool fbsql_select_db([string database_name [, resource link_identifier]])"
let s:phpprotos["fbsql_set_characterset"] = "void fbsql_set_characterset(resource link_identifier, long charcterset [, long in_out_both]])"
let s:phpprotos["fbsql_change_user"] = "int fbsql_change_user(string user, string password [, string database [, resource link_identifier]])"
let s:phpprotos["fbsql_create_db"] = "bool fbsql_create_db(string database_name [, resource link_identifier [, string database_options]])"
let s:phpprotos["fbsql_drop_db"] = "int fbsql_drop_db(string database_name [, resource link_identifier])"
let s:phpprotos["fbsql_start_db"] = "bool fbsql_start_db(string database_name [, resource link_identifier [, string database_options]])"
let s:phpprotos["fbsql_stop_db"] = "bool fbsql_stop_db(string database_name [, resource link_identifier])"
let s:phpprotos["fbsql_db_status"] = "int fbsql_db_status(string database_name [, resource link_identifier])"
let s:phpprotos["fbsql_query"] = "resource fbsql_query(string query [, resource link_identifier [, long batch_size]])"
let s:phpprotos["fbsql_db_query"] = "resource fbsql_db_query(string database_name, string query [, resource link_identifier])"
let s:phpprotos["fbsql_list_dbs"] = "resource fbsql_list_dbs([resource link_identifier])"
let s:phpprotos["fbsql_list_tables"] = "resource fbsql_list_tables(string database [, int link_identifier])"
let s:phpprotos["fbsql_list_fields"] = "resource fbsql_list_fields(string database_name, string table_name [, resource link_identifier])"
let s:phpprotos["fbsql_error"] = "string fbsql_error([resource link_identifier])"
let s:phpprotos["fbsql_errno"] = "int fbsql_errno([resource link_identifier])"
let s:phpprotos["fbsql_warnings"] = "bool fbsql_warnings([int flag])"
let s:phpprotos["fbsql_affected_rows"] = "int fbsql_affected_rows([resource link_identifier])"
let s:phpprotos["fbsql_rows_fetched"] = "int fbsql_rows_fetched(resource result)"
let s:phpprotos["fbsql_insert_id"] = "int fbsql_insert_id([resource link_identifier])"
let s:phpprotos["fbsql_result"] = "mixed fbsql_result(int result [, int row [, mixed field]])"
let s:phpprotos["fbsql_next_result"] = "bool fbsql_next_result(int result)"
let s:phpprotos["fbsql_num_rows"] = "int fbsql_num_rows(int result)"
let s:phpprotos["fbsql_num_fields"] = "int fbsql_num_fields(int result)"
let s:phpprotos["fbsql_fetch_row"] = "array fbsql_fetch_row(resource result)"
let s:phpprotos["fbsql_fetch_assoc"] = "object fbsql_fetch_assoc(resource result)"
let s:phpprotos["fbsql_fetch_object"] = "object fbsql_fetch_object(resource result [, int result_type])"
let s:phpprotos["fbsql_fetch_array"] = "array fbsql_fetch_array(resource result [, int result_type])"
let s:phpprotos["fbsql_data_seek"] = "bool fbsql_data_seek(int result, int row_number)"
let s:phpprotos["fbsql_fetch_lengths"] = "array fbsql_fetch_lengths(int result)"
let s:phpprotos["fbsql_fetch_field"] = "object fbsql_fetch_field(int result [, int field_index])"
let s:phpprotos["fbsql_field_seek"] = "bool fbsql_field_seek(int result [, int field_index])"
let s:phpprotos["fbsql_field_name"] = "string fbsql_field_name(int result [, int field_index])"
let s:phpprotos["fbsql_field_table"] = "string fbsql_field_table(int result [, int field_index])"
let s:phpprotos["fbsql_field_len"] = "mixed fbsql_field_len(int result [, int field_index])"
let s:phpprotos["fbsql_field_type"] = "string fbsql_field_type(int result [, int field_index])"
let s:phpprotos["fbsql_field_flags"] = "string fbsql_field_flags(int result [, int field_index])"
let s:phpprotos["fbsql_table_name"] = "string fbsql_table_name(resource result, int index)"
let s:phpprotos["fbsql_free_result"] = "bool fbsql_free_result(resource result)"
let s:phpprotos["fbsql_get_autostart_info"] = "array fbsql_get_autostart_info([resource link_identifier])"
let s:phpprotos["iconv_strlen"] = "int iconv_strlen(string str [, string charset])"
let s:phpprotos["iconv_substr"] = "string iconv_substr(string str, int offset, [int length, string charset])"
let s:phpprotos["iconv_strpos"] = "int iconv_strpos(string haystack, string needle [, int offset [, string charset]])"
let s:phpprotos["iconv_strrpos"] = "int iconv_strrpos(string haystack, string needle [, string charset])"
let s:phpprotos["iconv_mime_encode"] = "string iconv_mime_encode(string field_name, string field_value [, array preference])"
let s:phpprotos["iconv_mime_decode"] = "string iconv_mime_decode(string encoded_string [, int mode, string charset])"
let s:phpprotos["iconv_mime_decode_headers"] = "array iconv_mime_decode_headers(string headers [, int mode, string charset])"
let s:phpprotos["iconv"] = "string iconv(string in_charset, string out_charset, string str)"
let s:phpprotos["ob_iconv_handler"] = "string ob_iconv_handler(string contents, int status)"
let s:phpprotos["iconv_set_encoding"] = "bool iconv_set_encoding(string type, string charset)"
let s:phpprotos["iconv_get_encoding"] = "mixed iconv_get_encoding([string type])"
let s:phpprotos["mhash_count"] = "int mhash_count(void)"
let s:phpprotos["mhash_get_block_size"] = "int mhash_get_block_size(int hash)"
let s:phpprotos["mhash_get_hash_name"] = "string mhash_get_hash_name(int hash)"
let s:phpprotos["mhash"] = "string mhash(int hash, string data [, string key])"
let s:phpprotos["mhash_keygen_s2k"] = "string mhash_keygen_s2k(int hash, string input_password, string salt, int bytes)"
let s:phpprotos["mssql_connect"] = "int mssql_connect([string servername [, string username [, string password [, bool new_link]]])"
let s:phpprotos["mssql_pconnect"] = "int mssql_pconnect([string servername [, string username [, string password [, bool new_link]]]])"
let s:phpprotos["mssql_close"] = "bool mssql_close([resource conn_id])"
let s:phpprotos["mssql_select_db"] = "bool mssql_select_db(string database_name [, resource conn_id])"
let s:phpprotos["mssql_fetch_batch"] = "int mssql_fetch_batch(resource result_index)"
let s:phpprotos["mssql_query"] = "resource mssql_query(string query [, resource conn_id [, int batch_size]])"
let s:phpprotos["mssql_rows_affected"] = "int mssql_rows_affected(resource conn_id)"
let s:phpprotos["mssql_free_result"] = "bool mssql_free_result(resource result_index)"
let s:phpprotos["mssql_get_last_message"] = "string mssql_get_last_message(void)"
let s:phpprotos["mssql_num_rows"] = "int mssql_num_rows(resource mssql_result_index)"
let s:phpprotos["mssql_num_fields"] = "int mssql_num_fields(resource mssql_result_index)"
let s:phpprotos["mssql_fetch_row"] = "array mssql_fetch_row(resource result_id)"
let s:phpprotos["mssql_fetch_object"] = "object mssql_fetch_object(resource result_id [, int result_type])"
let s:phpprotos["mssql_fetch_array"] = "array mssql_fetch_array(resource result_id [, int result_type])"
let s:phpprotos["mssql_fetch_assoc"] = "array mssql_fetch_assoc(resource result_id)"
let s:phpprotos["mssql_data_seek"] = "bool mssql_data_seek(resource result_id, int offset)"
let s:phpprotos["mssql_fetch_field"] = "object mssql_fetch_field(resource result_id [, int offset])"
let s:phpprotos["mssql_field_length"] = "int mssql_field_length(resource result_id [, int offset])"
let s:phpprotos["mssql_field_name"] = "string mssql_field_name(resource result_id [, int offset])"
let s:phpprotos["mssql_field_type"] = "string mssql_field_type(resource result_id [, int offset])"
let s:phpprotos["mssql_field_seek"] = "bool mssql_field_seek(int result_id, int offset)"
let s:phpprotos["mssql_result"] = "string mssql_result(resource result_id, int row, mixed field)"
let s:phpprotos["mssql_next_result"] = "bool mssql_next_result(resource result_id)"
let s:phpprotos["mssql_min_error_severity"] = "void mssql_min_error_severity(int severity)"
let s:phpprotos["mssql_min_message_severity"] = "void mssql_min_message_severity(int severity)"
let s:phpprotos["mssql_init"] = "int mssql_init(string sp_name [, resource conn_id])"
let s:phpprotos["mssql_bind"] = "bool mssql_bind(resource stmt, string param_name, mixed var, int type [, int is_output [, int is_null [, int maxlen]]])"
let s:phpprotos["mssql_execute"] = "mixed mssql_execute(resource stmt [, bool skip_results = false])"
let s:phpprotos["mssql_free_statement"] = "bool mssql_free_statement(resource result_index)"
let s:phpprotos["mssql_guid_string"] = "string mssql_guid_string(string binary [,int short_format])"
let s:phpprotos["mysql_connect"] = "resource mysql_connect([string hostname[:port][:/path/to/socket] [, string username [, string password [, bool new [, int flags]]]]])"
let s:phpprotos["mysql_pconnect"] = "resource mysql_pconnect([string hostname[:port][:/path/to/socket] [, string username [, string password [, int flags]]]])"
let s:phpprotos["mysql_close"] = "bool mysql_close([int link_identifier])"
let s:phpprotos["mysql_select_db"] = "bool mysql_select_db(string database_name [, int link_identifier])"
let s:phpprotos["mysql_get_client_info"] = "string mysql_get_client_info(void)"
let s:phpprotos["mysql_get_host_info"] = "string mysql_get_host_info([int link_identifier])"
let s:phpprotos["mysql_get_proto_info"] = "int mysql_get_proto_info([int link_identifier])"
let s:phpprotos["mysql_get_server_info"] = "string mysql_get_server_info([int link_identifier])"
let s:phpprotos["mysql_info"] = "string mysql_info([int link_identifier])"
let s:phpprotos["mysql_thread_id"] = "int mysql_thread_id([int link_identifier])"
let s:phpprotos["mysql_stat"] = "string mysql_stat([int link_identifier])"
let s:phpprotos["mysql_client_encoding"] = "string mysql_client_encoding([int link_identifier])"
let s:phpprotos["mysql_set_charset"] = "bool mysql_set_charset(string csname [, int link_identifier])"
let s:phpprotos["mysql_create_db"] = "bool mysql_create_db(string database_name [, int link_identifier])"
let s:phpprotos["mysql_drop_db"] = "bool mysql_drop_db(string database_name [, int link_identifier])"
let s:phpprotos["mysql_query"] = "resource mysql_query(string query [, int link_identifier])"
let s:phpprotos["mysql_unbuffered_query"] = "resource mysql_unbuffered_query(string query [, int link_identifier])"
let s:phpprotos["mysql_db_query"] = "resource mysql_db_query(string database_name, string query [, int link_identifier])"
let s:phpprotos["mysql_list_dbs"] = "resource mysql_list_dbs([int link_identifier])"
let s:phpprotos["mysql_list_tables"] = "resource mysql_list_tables(string database_name [, int link_identifier])"
let s:phpprotos["mysql_list_fields"] = "resource mysql_list_fields(string database_name, string table_name [, int link_identifier])"
let s:phpprotos["mysql_list_processes"] = "resource mysql_list_processes([int link_identifier])"
let s:phpprotos["mysql_error"] = "string mysql_error([int link_identifier])"
let s:phpprotos["mysql_errno"] = "int mysql_errno([int link_identifier])"
let s:phpprotos["mysql_affected_rows"] = "int mysql_affected_rows([int link_identifier])"
let s:phpprotos["mysql_escape_string"] = "string mysql_escape_string(string to_be_escaped)"
let s:phpprotos["mysql_real_escape_string"] = "string mysql_real_escape_string(string to_be_escaped [, int link_identifier])"
let s:phpprotos["mysql_insert_id"] = "int mysql_insert_id([int link_identifier])"
let s:phpprotos["mysql_result"] = "mixed mysql_result(resource result, int row [, mixed field])"
let s:phpprotos["mysql_num_rows"] = "int mysql_num_rows(resource result)"
let s:phpprotos["mysql_num_fields"] = "int mysql_num_fields(resource result)"
let s:phpprotos["mysql_fetch_row"] = "array mysql_fetch_row(resource result)"
let s:phpprotos["mysql_fetch_object"] = "object mysql_fetch_object(resource result [, string class_name [, NULL|array ctor_params]])"
let s:phpprotos["mysql_fetch_array"] = "array mysql_fetch_array(resource result [, int result_type])"
let s:phpprotos["mysql_fetch_assoc"] = "array mysql_fetch_assoc(resource result)"
let s:phpprotos["mysql_data_seek"] = "bool mysql_data_seek(resource result, int row_number)"
let s:phpprotos["mysql_fetch_lengths"] = "array mysql_fetch_lengths(resource result)"
let s:phpprotos["mysql_fetch_field"] = "object mysql_fetch_field(resource result [, int field_offset])"
let s:phpprotos["mysql_field_seek"] = "bool mysql_field_seek(resource result, int field_offset)"
let s:phpprotos["mysql_field_name"] = "string mysql_field_name(resource result, int field_index)"
let s:phpprotos["mysql_field_table"] = "string mysql_field_table(resource result, int field_offset)"
let s:phpprotos["mysql_field_len"] = "int mysql_field_len(resource result, int field_offset)"
let s:phpprotos["mysql_field_type"] = "string mysql_field_type(resource result, int field_offset)"
let s:phpprotos["mysql_field_flags"] = "string mysql_field_flags(resource result, int field_offset)"
let s:phpprotos["mysql_free_result"] = "bool mysql_free_result(resource result)"
let s:phpprotos["mysql_ping"] = "bool mysql_ping([int link_identifier])"
let s:phpprotos["pcntl_fork"] = "int pcntl_fork(void)"
let s:phpprotos["pcntl_alarm"] = "int pcntl_alarm(int seconds)"
let s:phpprotos["pcntl_waitpid"] = "int pcntl_waitpid(int pid, int &status, int options)"
let s:phpprotos["pcntl_wait"] = "int pcntl_wait(int &status)"
let s:phpprotos["pcntl_wifexited"] = "bool pcntl_wifexited(int status) "
let s:phpprotos["pcntl_wifstopped"] = "bool pcntl_wifstopped(int status) "
let s:phpprotos["pcntl_wifsignaled"] = "bool pcntl_wifsignaled(int status) "
let s:phpprotos["pcntl_wexitstatus"] = "int pcntl_wexitstatus(int status) "
let s:phpprotos["pcntl_wtermsig"] = "int pcntl_wtermsig(int status) "
let s:phpprotos["pcntl_wstopsig"] = "int pcntl_wstopsig(int status) "
let s:phpprotos["pcntl_exec"] = "bool pcntl_exec(string path [, array args [, array envs]])"
let s:phpprotos["pcntl_signal"] = "bool pcntl_signal(int signo, callback handle [, bool restart_syscalls])"
let s:phpprotos["pcntl_getpriority"] = "int pcntl_getpriority([int pid [, int process_identifier]])"
let s:phpprotos["pcntl_setpriority"] = "bool pcntl_setpriority(int priority [, int pid [, int process_identifier]])"
let s:phpprotos["pg_connect"] = "resource pg_connect(string connection_string[, int connect_type] | [string host, string port [, string options [, string tty,]]] string database)"
let s:phpprotos["pg_pconnect"] = "resource pg_pconnect(string connection_string | [string host, string port [, string options [, string tty,]]] string database)"
let s:phpprotos["pg_close"] = "bool pg_close([resource connection])"
let s:phpprotos["pg_dbname"] = "string pg_dbname([resource connection])"
let s:phpprotos["pg_last_error"] = "string pg_last_error([resource connection])"
let s:phpprotos["pg_options"] = "string pg_options([resource connection])"
let s:phpprotos["pg_port"] = "int pg_port([resource connection])"
let s:phpprotos["pg_tty"] = "string pg_tty([resource connection])"
let s:phpprotos["pg_host"] = "string pg_host([resource connection])"
let s:phpprotos["pg_version"] = "array pg_version([resource connection])"
let s:phpprotos["pg_parameter_status"] = "string|false pg_parameter_status([resource connection,] string param_name)"
let s:phpprotos["pg_ping"] = "bool pg_ping([resource connection])"
let s:phpprotos["pg_query"] = "resource pg_query([resource connection,] string query)"
let s:phpprotos["pg_query_params"] = "resource pg_query_params([resource connection,] string query, array params)"
let s:phpprotos["pg_prepare"] = "resource pg_prepare([resource connection,] string stmtname, string query)"
let s:phpprotos["pg_execute"] = "resource pg_execute([resource connection,] string stmtname, array params)"
let s:phpprotos["pg_num_rows"] = "int pg_num_rows(resource result)"
let s:phpprotos["pg_num_fields"] = "int pg_num_fields(resource result)"
let s:phpprotos["pg_affected_rows"] = "int pg_affected_rows(resource result)"
let s:phpprotos["pg_last_notice"] = "string pg_last_notice(resource connection)"
let s:phpprotos["pg_field_table"] = "mixed pg_field_table(resource result, int field_number[, bool oid_only])"
let s:phpprotos["pg_field_name"] = "string pg_field_name(resource result, int field_number)"
let s:phpprotos["pg_field_size"] = "int pg_field_size(resource result, int field_number)"
let s:phpprotos["pg_field_type"] = "string pg_field_type(resource result, int field_number)"
let s:phpprotos["pg_field_type_oid"] = "string pg_field_type_oid(resource result, int field_number)"
let s:phpprotos["pg_field_num"] = "int pg_field_num(resource result, string field_name)"
let s:phpprotos["pg_fetch_result"] = "mixed pg_fetch_result(resource result, [int row_number,] mixed field_name)"
let s:phpprotos["pg_fetch_row"] = "array pg_fetch_row(resource result [, int row [, int result_type]])"
let s:phpprotos["pg_fetch_assoc"] = "array pg_fetch_assoc(resource result [, int row])"
let s:phpprotos["pg_fetch_array"] = "array pg_fetch_array(resource result [, int row [, int result_type]])"
let s:phpprotos["pg_fetch_object"] = "object pg_fetch_object(resource result [, int row [, string class_name [, NULL|array ctor_params]]])"
let s:phpprotos["pg_fetch_all"] = "array pg_fetch_all(resource result)"
let s:phpprotos["pg_fetch_all_columns"] = "array pg_fetch_all_columns(resource result [, int column_number])"
let s:phpprotos["pg_result_seek"] = "bool pg_result_seek(resource result, int offset)"
let s:phpprotos["pg_field_prtlen"] = "int pg_field_prtlen(resource result, [int row,] mixed field_name_or_number)"
let s:phpprotos["pg_field_is_null"] = "int pg_field_is_null(resource result, [int row,] mixed field_name_or_number)"
let s:phpprotos["pg_free_result"] = "bool pg_free_result(resource result)"
let s:phpprotos["pg_last_oid"] = "string pg_last_oid(resource result)"
let s:phpprotos["pg_trace"] = "bool pg_trace(string filename [, string mode [, resource connection]])"
let s:phpprotos["pg_untrace"] = "bool pg_untrace([resource connection])"
let s:phpprotos["pg_lo_create"] = "int pg_lo_create([resource connection])"
let s:phpprotos["pg_lo_unlink"] = "bool pg_lo_unlink([resource connection,] string large_object_oid)"
let s:phpprotos["pg_lo_open"] = "resource pg_lo_open([resource connection,] int large_object_oid, string mode)"
let s:phpprotos["pg_lo_close"] = "bool pg_lo_close(resource large_object)"
let s:phpprotos["pg_lo_read"] = "string pg_lo_read(resource large_object [, int len])"
let s:phpprotos["pg_lo_write"] = "int pg_lo_write(resource large_object, string buf [, int len])"
let s:phpprotos["pg_lo_read_all"] = "int pg_lo_read_all(resource large_object)"
let s:phpprotos["pg_lo_import"] = "int pg_lo_import([resource connection, ] string filename)"
let s:phpprotos["pg_lo_export"] = "bool pg_lo_export([resource connection, ] int objoid, string filename)"
let s:phpprotos["pg_lo_seek"] = "bool pg_lo_seek(resource large_object, int offset [, int whence])"
let s:phpprotos["pg_lo_tell"] = "int pg_lo_tell(resource large_object)"
let s:phpprotos["pg_set_error_verbosity"] = "int pg_set_error_verbosity([resource connection,] int verbosity)"
let s:phpprotos["pg_set_client_encoding"] = "int pg_set_client_encoding([resource connection,] string encoding)"
let s:phpprotos["pg_client_encoding"] = "string pg_client_encoding([resource connection])"
let s:phpprotos["pg_end_copy"] = "bool pg_end_copy([resource connection])"
let s:phpprotos["pg_put_line"] = "bool pg_put_line([resource connection,] string query)"
let s:phpprotos["pg_copy_to"] = "array pg_copy_to(resource connection, string table_name [, string delimiter [, string null_as]])"
let s:phpprotos["pg_copy_from"] = "bool pg_copy_from(resource connection, string table_name , array rows [, string delimiter [, string null_as]])"
let s:phpprotos["pg_escape_string"] = "string pg_escape_string([resource connection,] string data)"
let s:phpprotos["pg_escape_bytea"] = "string pg_escape_bytea([resource connection,] string data)"
let s:phpprotos["pg_unescape_bytea"] = "string pg_unescape_bytea(string data)"
let s:phpprotos["pg_result_error"] = "string pg_result_error(resource result)"
let s:phpprotos["pg_result_error_field"] = "string pg_result_error_field(resource result, int fieldcode)"
let s:phpprotos["pg_connection_status"] = "int pg_connection_status(resource connnection)"
let s:phpprotos["pg_transaction_status"] = "int pg_transaction_status(resource connnection)"
let s:phpprotos["pg_connection_reset"] = "bool pg_connection_reset(resource connection)"
let s:phpprotos["pg_cancel_query"] = "bool pg_cancel_query(resource connection)"
let s:phpprotos["pg_connection_busy"] = "bool pg_connection_busy(resource connection)"
let s:phpprotos["pg_send_query"] = "bool pg_send_query(resource connection, string query)"
let s:phpprotos["pg_send_query_params"] = "bool pg_send_query_params(resource connection, string query)"
let s:phpprotos["pg_send_prepare"] = "bool pg_send_prepare(resource connection, string stmtname, string query)"
let s:phpprotos["pg_send_execute"] = "bool pg_send_execute(resource connection, string stmtname, array params)"
let s:phpprotos["pg_get_result"] = "resource pg_get_result(resource connection)"
let s:phpprotos["pg_result_status"] = "mixed pg_result_status(resource result[, long result_type])"
let s:phpprotos["pg_get_notify"] = "array pg_get_notify([resource connection[, result_type]])"
let s:phpprotos["pg_get_pid"] = "int pg_get_pid([resource connection)"
let s:phpprotos["pg_meta_data"] = "array pg_meta_data(resource db, string table)"
let s:phpprotos["pg_convert"] = "array pg_convert(resource db, string table, array values[, int options])"
let s:phpprotos["pg_insert"] = "mixed pg_insert(resource db, string table, array values[, int options])"
let s:phpprotos["pg_update"] = "mixed pg_update(resource db, string table, array fields, array ids[, int options])"
let s:phpprotos["pg_delete"] = "mixed pg_delete(resource db, string table, array ids[, int options])"
let s:phpprotos["pg_select"] = "mixed pg_select(resource db, string table, array ids[, int options])"
let s:phpprotos["posix_kill"] = "bool posix_kill(int pid, int sig)"
let s:phpprotos["posix_getpid"] = "int posix_getpid(void)"
let s:phpprotos["posix_getppid"] = "int posix_getppid(void)"
let s:phpprotos["posix_getuid"] = "int posix_getuid(void)"
let s:phpprotos["posix_getgid"] = "int posix_getgid(void)"
let s:phpprotos["posix_geteuid"] = "int posix_geteuid(void)"
let s:phpprotos["posix_getegid"] = "int posix_getegid(void)"
let s:phpprotos["posix_setuid"] = "bool posix_setuid(long uid)"
let s:phpprotos["posix_setgid"] = "bool posix_setgid(int uid)"
let s:phpprotos["posix_seteuid"] = "bool posix_seteuid(long uid)"
let s:phpprotos["posix_setegid"] = "bool posix_setegid(long uid)"
let s:phpprotos["posix_getgroups"] = "array posix_getgroups(void)"
let s:phpprotos["posix_getlogin"] = "string posix_getlogin(void) "
let s:phpprotos["posix_getpgrp"] = "int posix_getpgrp(void)"
let s:phpprotos["posix_setsid"] = "int posix_setsid(void)"
let s:phpprotos["posix_setpgid"] = "bool posix_setpgid(int pid, int pgid)"
let s:phpprotos["posix_getpgid"] = "int posix_getpgid(void)"
let s:phpprotos["posix_getsid"] = "int posix_getsid(void)"
let s:phpprotos["posix_uname"] = "array posix_uname(void)"
let s:phpprotos["posix_times"] = "array posix_times(void)"
let s:phpprotos["posix_ctermid"] = "string posix_ctermid(void)"
let s:phpprotos["posix_ttyname"] = "string posix_ttyname(int fd)"
let s:phpprotos["posix_isatty"] = "bool posix_isatty(int fd)"
let s:phpprotos["posix_getcwd"] = "string posix_getcwd(void)"
let s:phpprotos["posix_mkfifo"] = "bool posix_mkfifo(string pathname, int mode)"
let s:phpprotos["posix_mknod"] = "bool posix_mknod(string pathname, int mode [, int major [, int minor]])"
let s:phpprotos["posix_access"] = "bool posix_access(string file [, int mode])"
let s:phpprotos["posix_getgrnam"] = "array posix_getgrnam(string groupname)"
let s:phpprotos["posix_getgrgid"] = "array posix_getgrgid(long gid) "
let s:phpprotos["posix_getpwnam"] = "array posix_getpwnam(string groupname) "
let s:phpprotos["posix_getpwuid"] = "array posix_getpwuid(long uid) "
let s:phpprotos["posix_getrlimit"] = "array posix_getrlimit(void)"
let s:phpprotos["posix_get_last_error"] = "int posix_get_last_error(void)"
let s:phpprotos["posix_strerror"] = "string posix_strerror(int errno)"
let s:phpprotos["posix_initgroups"] = "bool posix_initgroups(string name, int base_group_id)"
let s:phpprotos["int shmop_open "] = "int shmop_open (int key, string flags, int mode, int size)"
let s:phpprotos["string shmop_read "] = "string shmop_read (int shmid, int start, int count)"
let s:phpprotos["void shmop_close "] = "void shmop_close (int shmid)"
let s:phpprotos["int shmop_size "] = "int shmop_size (int shmid)"
let s:phpprotos["int shmop_write "] = "int shmop_write (int shmid, string data, int offset)"
let s:phpprotos["bool shmop_delete "] = "bool shmop_delete (int shmid)"
let s:phpprotos["PDO::pgsqlLOBCreate"] = "string PDO::pgsqlLOBCreate()"
let s:phpprotos["PDO::pgsqlLOBOpen"] = "resource PDO::pgsqlLOBOpen(string oid [, string mode = 'rb'])"
let s:phpprotos["PDO::pgsqlLOBUnlink"] = "bool PDO::pgsqlLOBUnlink(string oid)"
let s:phpprotos["session_set_cookie_params"] = "void session_set_cookie_params(int lifetime [, string path [, string domain [, bool secure[, bool httponly]]]])"
let s:phpprotos["session_get_cookie_params"] = "array session_get_cookie_params(void)"
let s:phpprotos["session_name"] = "string session_name([string newname])"
let s:phpprotos["session_module_name"] = "string session_module_name([string newname])"
let s:phpprotos["session_set_save_handler"] = "void session_set_save_handler(string open, string close, string read, string write, string destroy, string gc)"
let s:phpprotos["session_save_path"] = "string session_save_path([string newname])"
let s:phpprotos["session_id"] = "string session_id([string newid])"
let s:phpprotos["session_regenerate_id"] = "bool session_regenerate_id([bool delete_old_session])"
let s:phpprotos["session_cache_limiter"] = "string session_cache_limiter([string new_cache_limiter])"
let s:phpprotos["session_cache_expire"] = "int session_cache_expire([int new_cache_expire])"
let s:phpprotos["session_register"] = "bool session_register(mixed var_names [, mixed ...])"
let s:phpprotos["session_unregister"] = "bool session_unregister(string varname)"
let s:phpprotos["session_is_registered"] = "bool session_is_registered(string varname)"
let s:phpprotos["session_encode"] = "string session_encode(void)"
let s:phpprotos["session_decode"] = "bool session_decode(string data)"
let s:phpprotos["session_start"] = "bool session_start(void)"
let s:phpprotos["session_destroy"] = "bool session_destroy(void)"
let s:phpprotos["session_unset"] = "void session_unset(void)"
let s:phpprotos["session_write_close"] = "void session_write_close(void)"
let s:phpprotos["socket_select"] = "int socket_select(array &read_fds, array &write_fds, &array except_fds, int tv_sec[, int tv_usec]) U"
let s:phpprotos["socket_create_listen"] = "resource socket_create_listen(int port[, int backlog]) U"
let s:phpprotos["socket_accept"] = "resource socket_accept(resource socket) U"
let s:phpprotos["socket_set_nonblock"] = "bool socket_set_nonblock(resource socket) U"
let s:phpprotos["socket_set_block"] = "bool socket_set_block(resource socket) U"
let s:phpprotos["socket_listen"] = "bool socket_listen(resource socket[, int backlog]) U"
let s:phpprotos["socket_close"] = "void socket_close(resource socket) U"
let s:phpprotos["socket_write"] = "int socket_write(resource socket, string buf[, int length])"
let s:phpprotos["socket_read"] = "string socket_read(resource socket, int length [, int type]) U"
let s:phpprotos["socket_getsockname"] = "bool socket_getsockname(resource socket, string &addr[, int &port])"
let s:phpprotos["socket_getpeername"] = "bool socket_getpeername(resource socket, string &addr[, int &port])"
let s:phpprotos["socket_create"] = "resource socket_create(int domain, int type, int protocol) U"
let s:phpprotos["socket_connect"] = "bool socket_connect(resource socket, string addr [, int port])"
let s:phpprotos["socket_strerror"] = "string socket_strerror(int errno)"
let s:phpprotos["socket_bind"] = "bool socket_bind(resource socket, string addr [, int port])"
let s:phpprotos["socket_recv"] = "int socket_recv(resource socket, string &buf, int len, int flags)"
let s:phpprotos["socket_send"] = "int socket_send(resource socket, string buf, int len, int flags)"
let s:phpprotos["socket_recvfrom"] = "int socket_recvfrom(resource socket, string &buf, int len, int flags, string &name [, int &port])"
let s:phpprotos["socket_sendto"] = "int socket_sendto(resource socket, string buf, int len, int flags, string addr [, int port])"
let s:phpprotos["socket_get_option"] = "mixed socket_get_option(resource socket, int level, int optname) U"
let s:phpprotos["socket_set_option"] = "bool socket_set_option(resource socket, int level, int optname, int|array optval)"
let s:phpprotos["socket_create_pair"] = "bool socket_create_pair(int domain, int type, int protocol, array &fd) U"
let s:phpprotos["socket_shutdown"] = "bool socket_shutdown(resource socket[, int how]) U"
let s:phpprotos["socket_last_error"] = "int socket_last_error([resource socket]) U"
let s:phpprotos["socket_clear_error"] = "void socket_clear_error([resource socket]) U"
let s:phpprotos["cal_info"] = "array cal_info([int calendar])"
let s:phpprotos["cal_days_in_month"] = "int cal_days_in_month(int calendar, int month, int year)"
let s:phpprotos["cal_to_jd"] = "int cal_to_jd(int calendar, int month, int day, int year)"
let s:phpprotos["cal_from_jd"] = "array cal_from_jd(int jd, int calendar)"
let s:phpprotos["jdtogregorian"] = "string jdtogregorian(int juliandaycount)"
let s:phpprotos["gregoriantojd"] = "int gregoriantojd(int month, int day, int year)"
let s:phpprotos["jdtojulian"] = "string jdtojulian(int juliandaycount)"
let s:phpprotos["juliantojd"] = "int juliantojd(int month, int day, int year)"
let s:phpprotos["jdtojewish"] = "string jdtojewish(int juliandaycount [, bool hebrew [, int fl]])"
let s:phpprotos["jewishtojd"] = "int jewishtojd(int month, int day, int year)"
let s:phpprotos["jdtofrench"] = "string jdtofrench(int juliandaycount)"
let s:phpprotos["frenchtojd"] = "int frenchtojd(int month, int day, int year)"
let s:phpprotos["jddayofweek"] = "mixed jddayofweek(int juliandaycount [, int mode])"
let s:phpprotos["jdmonthname"] = "string jdmonthname(int juliandaycount, int mode)"
let s:phpprotos["unixtojd"] = "int unixtojd([int timestamp])"
let s:phpprotos["jdtounix"] = "int jdtounix(int jday)"
let s:phpprotos["easter_date"] = "int easter_date([int year])"
let s:phpprotos["easter_days"] = "int easter_days([int year, [int method]])"
let s:phpprotos["bcadd"] = "string bcadd(string left_operand, string right_operand [, int scale])"
let s:phpprotos["bcsub"] = "string bcsub(string left_operand, string right_operand [, int scale])"
let s:phpprotos["bcmul"] = "string bcmul(string left_operand, string right_operand [, int scale])"
let s:phpprotos["bcdiv"] = "string bcdiv(string left_operand, string right_operand [, int scale])"
let s:phpprotos["bcmod"] = "string bcmod(string left_operand, string right_operand)"
let s:phpprotos["bcpowmod"] = "string bcpowmod(string x, string y, string mod [, int scale])"
let s:phpprotos["bcpow"] = "string bcpow(string x, string y [, int scale])"
let s:phpprotos["bcsqrt"] = "string bcsqrt(string operand [, int scale])"
let s:phpprotos["bccomp"] = "int bccomp(string left_operand, string right_operand [, int scale])"
let s:phpprotos["bcscale"] = "bool bcscale(int scale)"
let s:phpprotos["confirm_extname_compiled"] = "string confirm_extname_compiled(string arg)"
let s:phpprotos["filter_has_var"] = "mixed filter_has_var(constant type, string variable_name)"
let s:phpprotos["filter_input"] = "mixed filter_input(constant type, string variable_name [, long filter [, mixed options]])"
let s:phpprotos["filter_var"] = "mixed filter_var(mixed variable [, long filter [, mixed options]])"
let s:phpprotos["filter_input_array"] = "mixed filter_input_array(constant type, [, mixed options]])"
let s:phpprotos["filter_var_array"] = "mixed filter_var_array(array data, [, mixed options]])"
let s:phpprotos["filter_list"] = "filter_list()"
let s:phpprotos["filter_id"] = "filter_id(string filtername)"
let s:phpprotos["ncurses_addch"] = "int ncurses_addch(int ch)"
let s:phpprotos["ncurses_waddch"] = "int ncurses_waddch(resource window, int ch)"
let s:phpprotos["ncurses_color_set"] = "int ncurses_color_set(int pair)"
let s:phpprotos["ncurses_delwin"] = "bool ncurses_delwin(resource window)"
let s:phpprotos["ncurses_end"] = "int ncurses_end(void)"
let s:phpprotos["ncurses_getch"] = "int ncurses_getch(void)"
let s:phpprotos["ncurses_has_colors"] = "bool ncurses_has_colors(void)"
let s:phpprotos["ncurses_init"] = "int ncurses_init(void)"
let s:phpprotos["ncurses_init_pair"] = "int ncurses_init_pair(int pair, int fg, int bg)"
let s:phpprotos["ncurses_move"] = "int ncurses_move(int y, int x)"
let s:phpprotos["ncurses_newpad"] = "resource ncurses_newpad(int rows, int cols)"
let s:phpprotos["ncurses_prefresh"] = "int ncurses_prefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)"
let s:phpprotos["ncurses_pnoutrefresh"] = "int ncurses_pnoutrefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)"
let s:phpprotos["ncurses_newwin"] = "int ncurses_newwin(int rows, int cols, int y, int x)"
let s:phpprotos["ncurses_refresh"] = "int ncurses_refresh(int ch)"
let s:phpprotos["ncurses_start_color"] = "int ncurses_start_color(void)"
let s:phpprotos["ncurses_standout"] = "int ncurses_standout(void)"
let s:phpprotos["ncurses_standend"] = "int ncurses_standend(void)"
let s:phpprotos["ncurses_baudrate"] = "int ncurses_baudrate(void)"
let s:phpprotos["ncurses_beep"] = "int ncurses_beep(void)"
let s:phpprotos["ncurses_can_change_color"] = "bool ncurses_can_change_color(void)"
let s:phpprotos["ncurses_cbreak"] = "bool ncurses_cbreak(void)"
let s:phpprotos["ncurses_clear"] = "bool ncurses_clear(void)"
let s:phpprotos["ncurses_clrtobot"] = "bool ncurses_clrtobot(void)"
let s:phpprotos["ncurses_clrtoeol"] = "bool ncurses_clrtoeol(void)"
let s:phpprotos["ncurses_reset_prog_mode"] = "int ncurses_reset_prog_mode(void)"
let s:phpprotos["ncurses_reset_shell_mode"] = "int ncurses_reset_shell_mode(void)"
let s:phpprotos["ncurses_def_prog_mode"] = "int ncurses_def_prog_mode(void)"
let s:phpprotos["ncurses_def_shell_mode"] = "int ncurses_def_shell_mode(void)"
let s:phpprotos["ncurses_delch"] = "int ncurses_delch(void)"
let s:phpprotos["ncurses_deleteln"] = "int ncurses_deleteln(void)"
let s:phpprotos["ncurses_doupdate"] = "int ncurses_doupdate(void)"
let s:phpprotos["ncurses_echo"] = "int ncurses_echo(void)"
let s:phpprotos["ncurses_erase"] = "int ncurses_erase(void)"
let s:phpprotos["ncurses_erasechar"] = "string ncurses_erasechar(void)"
let s:phpprotos["ncurses_flash"] = "int ncurses_flash(void)"
let s:phpprotos["ncurses_flushinp"] = "int ncurses_flushinp(void)"
let s:phpprotos["ncurses_has_ic"] = "int ncurses_has_ic(void)"
let s:phpprotos["ncurses_has_il"] = "int ncurses_has_il(void)"
let s:phpprotos["ncurses_inch"] = "string ncurses_inch(void)"
let s:phpprotos["ncurses_insertln"] = "int ncurses_insertln(void)"
let s:phpprotos["ncurses_isendwin"] = "int ncurses_isendwin(void)"
let s:phpprotos["ncurses_killchar"] = "string ncurses_killchar(void)"
let s:phpprotos["ncurses_nl"] = "int ncurses_nl(void)"
let s:phpprotos["ncurses_nocbreak"] = "int ncurses_nocbreak(void)"
let s:phpprotos["ncurses_noecho"] = "int ncurses_noecho(void)"
let s:phpprotos["ncurses_nonl"] = "int ncurses_nonl(void)"
let s:phpprotos["ncurses_noraw"] = "bool ncurses_noraw(void)"
let s:phpprotos["ncurses_raw"] = "int ncurses_raw(void)"
let s:phpprotos["ncurses_meta"] = "int ncurses_meta(resource window, bool 8bit)"
let s:phpprotos["ncurses_werase"] = "int ncurses_werase(resource window)"
let s:phpprotos["ncurses_resetty"] = "int ncurses_resetty(void)"
let s:phpprotos["ncurses_savetty"] = "int ncurses_savetty(void)"
let s:phpprotos["ncurses_termattrs"] = "int ncurses_termattrs(void)"
let s:phpprotos["ncurses_use_default_colors"] = "int ncurses_use_default_colors(void)"
let s:phpprotos["ncurses_slk_attr"] = "int ncurses_slk_attr(void)"
let s:phpprotos["ncurses_slk_clear"] = "int ncurses_slk_clear(void)"
let s:phpprotos["ncurses_slk_noutrefresh"] = "int ncurses_slk_noutrefresh(void)"
let s:phpprotos["ncurses_slk_refresh"] = "int ncurses_slk_refresh(void)"
let s:phpprotos["ncurses_slk_restore"] = "int ncurses_slk_restore(void)"
let s:phpprotos["ncurses_slk_touch"] = "int ncurses_slk_touch(void)"
let s:phpprotos["ncurses_slk_set"] = "bool ncurses_slk_set(int labelnr, string label, int format)"
let s:phpprotos["ncurses_attroff"] = "int ncurses_attroff(int attributes)"
let s:phpprotos["ncurses_attron"] = "int ncurses_attron(int attributes)"
let s:phpprotos["ncurses_attrset"] = "int ncurses_attrset(int attributes)"
let s:phpprotos["ncurses_bkgd"] = "int ncurses_bkgd(int attrchar)"
let s:phpprotos["ncurses_curs_set"] = "int ncurses_curs_set(int visibility)"
let s:phpprotos["ncurses_delay_output"] = "int ncurses_delay_output(int milliseconds)"
let s:phpprotos["ncurses_echochar"] = "int ncurses_echochar(int character)"
let s:phpprotos["ncurses_halfdelay"] = "int ncurses_halfdelay(int tenth)"
let s:phpprotos["ncurses_has_key"] = "int ncurses_has_key(int keycode)"
let s:phpprotos["ncurses_insch"] = "int ncurses_insch(int character)"
let s:phpprotos["ncurses_insdelln"] = "int ncurses_insdelln(int count)"
let s:phpprotos["ncurses_mouseinterval"] = "int ncurses_mouseinterval(int milliseconds)"
let s:phpprotos["ncurses_napms"] = "int ncurses_napms(int milliseconds)"
let s:phpprotos["ncurses_scrl"] = "int ncurses_scrl(int count)"
let s:phpprotos["ncurses_slk_attroff"] = "int ncurses_slk_attroff(int intarg)"
let s:phpprotos["ncurses_slk_attron"] = "int ncurses_slk_attron(int intarg)"
let s:phpprotos["ncurses_slk_attrset"] = "int ncurses_slk_attrset(int intarg)"
let s:phpprotos["ncurses_slk_color"] = "int ncurses_slk_color(int intarg)"
let s:phpprotos["ncurses_slk_init"] = "int ncurses_slk_init(int intarg)"
let s:phpprotos["ncurses_typeahead"] = "int ncurses_typeahead(int fd)"
let s:phpprotos["ncurses_ungetch"] = "int ncurses_ungetch(int keycode)"
let s:phpprotos["ncurses_vidattr"] = "int ncurses_vidattr(int intarg)"
let s:phpprotos["ncurses_use_extended_names"] = "int ncurses_use_extended_names(bool flag)"
let s:phpprotos["ncurses_bkgdset"] = "void ncurses_bkgdset(int attrchar)"
let s:phpprotos["ncurses_filter"] = "void ncurses_filter(void)"
let s:phpprotos["ncurses_noqiflush"] = "int ncurses_noqiflush(void)"
let s:phpprotos["ncurses_qiflush"] = "void ncurses_qiflush(void)"
let s:phpprotos["ncurses_timeout"] = "void ncurses_timeout(int millisec)"
let s:phpprotos["ncurses_use_env"] = "void ncurses_use_env(int flag)"
let s:phpprotos["ncurses_addstr"] = "int ncurses_addstr(string text)"
let s:phpprotos["ncurses_putp"] = "int ncurses_putp(string text)"
let s:phpprotos["ncurses_scr_dump"] = "int ncurses_scr_dump(string filename)"
let s:phpprotos["ncurses_scr_init"] = "int ncurses_scr_init(string filename)"
let s:phpprotos["ncurses_scr_restore"] = "int ncurses_scr_restore(string filename)"
let s:phpprotos["ncurses_scr_set"] = "int ncurses_scr_set(string filename)"
let s:phpprotos["ncurses_mvaddch"] = "int ncurses_mvaddch(int y, int x, int c)"
let s:phpprotos["ncurses_mvaddchnstr"] = "int ncurses_mvaddchnstr(int y, int x, string s, int n)"
let s:phpprotos["ncurses_addchnstr"] = "int ncurses_addchnstr(string s, int n)"
let s:phpprotos["ncurses_mvaddchstr"] = "int ncurses_mvaddchstr(int y, int x, string s)"
let s:phpprotos["ncurses_addchstr"] = "int ncurses_addchstr(string s)"
let s:phpprotos["ncurses_mvaddnstr"] = "int ncurses_mvaddnstr(int y, int x, string s, int n)"
let s:phpprotos["ncurses_addnstr"] = "int ncurses_addnstr(string s, int n)"
let s:phpprotos["ncurses_mvaddstr"] = "int ncurses_mvaddstr(int y, int x, string s)"
let s:phpprotos["ncurses_mvdelch"] = "int ncurses_mvdelch(int y, int x)"
let s:phpprotos["ncurses_mvgetch"] = "int ncurses_mvgetch(int y, int x)"
let s:phpprotos["ncurses_mvinch"] = "int ncurses_mvinch(int y, int x)"
let s:phpprotos["ncurses_insstr"] = "int ncurses_insstr(string text)"
let s:phpprotos["ncurses_instr"] = "int ncurses_instr(string &buffer)"
let s:phpprotos["ncurses_mvhline"] = "int ncurses_mvhline(int y, int x, int attrchar, int n)"
let s:phpprotos["ncurses_mvvline"] = "int ncurses_mvvline(int y, int x, int attrchar, int n)"
let s:phpprotos["ncurses_mvcur"] = "int ncurses_mvcur(int old_y,int old_x, int new_y, int new_x)"
let s:phpprotos["ncurses_init_color"] = "int ncurses_init_color(int color, int r, int g, int b)"
let s:phpprotos["ncurses_color_content"] = "int ncurses_color_content(int color, int &r, int &g, int &b)"
let s:phpprotos["ncurses_pair_content"] = "int ncurses_pair_content(int pair, int &f, int &b)"
let s:phpprotos["ncurses_border"] = "int ncurses_border(int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)"
let s:phpprotos["ncurses_wborder"] = "int ncurses_wborder(resource window, int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)"
let s:phpprotos["ncurses_assume_default_colors"] = "int ncurses_assume_default_colors(int fg, int bg)"
let s:phpprotos["ncurses_define_key"] = "int ncurses_define_key(string definition, int keycode)"
let s:phpprotos["ncurses_hline"] = "int ncurses_hline(int charattr, int n)"
let s:phpprotos["ncurses_vline"] = "int ncurses_vline(int charattr, int n)"
let s:phpprotos["ncurses_whline"] = "int ncurses_whline(resource window, int charattr, int n)"
let s:phpprotos["ncurses_wvline"] = "int ncurses_wvline(resource window, int charattr, int n)"
let s:phpprotos["ncurses_keyok"] = "int ncurses_keyok(int keycode, int enable)"
let s:phpprotos["ncurses_mvwaddstr"] = "int ncurses_mvwaddstr(resource window, int y, int x, string text)"
let s:phpprotos["ncurses_wrefresh"] = "int ncurses_wrefresh(resource window)"
let s:phpprotos["ncurses_termname"] = "string ncurses_termname(void)"
let s:phpprotos["ncurses_longname"] = "string ncurses_longname(void)"
let s:phpprotos["ncurses_mousemask"] = "int ncurses_mousemask(int newmask, int &oldmask)"
let s:phpprotos["ncurses_getmouse"] = "bool ncurses_getmouse(array &mevent)"
let s:phpprotos["ncurses_ungetmouse"] = "int ncurses_ungetmouse(array mevent)"
let s:phpprotos["ncurses_mouse_trafo"] = "bool ncurses_mouse_trafo(int &y, int &x, bool toscreen)"
let s:phpprotos["ncurses_wmouse_trafo"] = "bool ncurses_wmouse_trafo(resource window, int &y, int &x, bool toscreen)"
let s:phpprotos["ncurses_getyx"] = "void ncurses_getyx(resource window, int &y, int &x)"
let s:phpprotos["ncurses_getmaxyx"] = "void ncurses_getmaxyx(resource window, int &y, int &x)"
let s:phpprotos["ncurses_wmove"] = "int ncurses_wmove(resource window, int y, int x)"
let s:phpprotos["ncurses_keypad"] = "int ncurses_keypad(resource window, bool bf)"
let s:phpprotos["ncurses_wcolor_set"] = "int ncurses_wcolor_set(resource window, int color_pair)"
let s:phpprotos["ncurses_wclear"] = "int ncurses_wclear(resource window)"
let s:phpprotos["ncurses_wnoutrefresh"] = "int ncurses_wnoutrefresh(resource window)"
let s:phpprotos["ncurses_waddstr"] = "int ncurses_waddstr(resource window, string str [, int n])"
let s:phpprotos["ncurses_wgetch"] = "int ncurses_wgetch(resource window)"
let s:phpprotos["ncurses_wattroff"] = "int ncurses_wattroff(resource window, int attrs)"
let s:phpprotos["ncurses_wattron"] = "int ncurses_wattron(resource window, int attrs)"
let s:phpprotos["ncurses_wattrset"] = "int ncurses_wattrset(resource window, int attrs)"
let s:phpprotos["ncurses_wstandend"] = "int ncurses_wstandend(resource window)"
let s:phpprotos["ncurses_wstandout"] = "int ncurses_wstandout(resource window)"
let s:phpprotos["ncurses_new_panel"] = "resource ncurses_new_panel(resource window)"
let s:phpprotos["ncurses_del_panel"] = "bool ncurses_del_panel(resource panel)"
let s:phpprotos["ncurses_hide_panel"] = "int ncurses_hide_panel(resource panel)"
let s:phpprotos["ncurses_show_panel"] = "int ncurses_show_panel(resource panel)"
let s:phpprotos["ncurses_top_panel"] = "int ncurses_top_panel(resource panel)"
let s:phpprotos["ncurses_bottom_panel"] = "int ncurses_bottom_panel(resource panel)"
let s:phpprotos["ncurses_move_panel"] = "int ncurses_move_panel(resource panel, int startx, int starty)"
let s:phpprotos["ncurses_replace_panel"] = "int ncurses_replace_panel(resource panel, resource window)"
let s:phpprotos["ncurses_panel_above"] = "resource ncurses_panel_above(resource panel)"
let s:phpprotos["ncurses_panel_below"] = "resource ncurses_panel_below(resource panel)"
let s:phpprotos["ncurses_panel_window"] = "resource ncurses_panel_window(resource panel)"
let s:phpprotos["ncurses_update_panels"] = "void ncurses_update_panels(void)"
let s:phpprotos["textdomain"] = "string textdomain(string domain)"
let s:phpprotos["gettext"] = "string gettext(string msgid)"
let s:phpprotos["dgettext"] = "string dgettext(string domain_name, string msgid)"
let s:phpprotos["dcgettext"] = "string dcgettext(string domain_name, string msgid, long category)"
let s:phpprotos["bindtextdomain"] = "string bindtextdomain(string domain_name, string dir)"
let s:phpprotos["ngettext"] = "string ngettext(string MSGID1, string MSGID2, int N)"
let s:phpprotos["string dngettext "] = "string dngettext (string domain, string msgid1, string msgid2, int count)"
let s:phpprotos["string dcngettext "] = "string dcngettext (string domain, string msgid1, string msgid2, int n, int category)"
let s:phpprotos["string bind_textdomain_codeset "] = "string bind_textdomain_codeset (string domain, string codeset)"
let s:phpprotos["msg_set_queue"] = "bool msg_set_queue(resource queue, array data)"
let s:phpprotos["msg_stat_queue"] = "array msg_stat_queue(resource queue)"
let s:phpprotos["msg_get_queue"] = "resource msg_get_queue(int key [, int perms])"
let s:phpprotos["msg_remove_queue"] = "bool msg_remove_queue(resource queue)"
let s:phpprotos["msg_receive"] = "mixed msg_receive(resource queue, int desiredmsgtype, int &msgtype, int maxsize, mixed message [, bool unserialize=true [, int flags=0 [, int errorcode]]])"
let s:phpprotos["msg_send"] = "bool msg_send(resource queue, int msgtype, mixed message [, bool serialize=true [, bool blocking=true [, int errorcode]]])"
let s:phpprotos["sem_get"] = "resource sem_get(int key [, int max_acquire [, int perm [, int auto_release]])"
let s:phpprotos["sem_acquire"] = "bool sem_acquire(resource id)"
let s:phpprotos["sem_release"] = "bool sem_release(resource id)"
let s:phpprotos["sem_remove"] = "bool sem_remove(resource id)"
let s:phpprotos["shm_attach"] = "int shm_attach(int key [, int memsize [, int perm]])"
let s:phpprotos["shm_detach"] = "bool shm_detach(int shm_identifier)"
let s:phpprotos["shm_remove"] = "bool shm_remove(int shm_identifier)"
let s:phpprotos["shm_put_var"] = "bool shm_put_var(int shm_identifier, int variable_key, mixed variable)"
let s:phpprotos["shm_get_var"] = "mixed shm_get_var(int id, int variable_key)"
let s:phpprotos["shm_remove_var"] = "bool shm_remove_var(int id, int variable_key)"
let s:phpprotos["token_get_all"] = "array token_get_all(string source)"
let s:phpprotos["token_name"] = "string token_name(int type)"
let s:phpprotos["libxml_set_streams_context"] = "void libxml_set_streams_context(resource streams_context) "
let s:phpprotos["libxml_use_internal_errors"] = "void libxml_use_internal_errors([boolean use_errors]) "
let s:phpprotos["libxml_get_last_error"] = "object libxml_get_last_error() "
let s:phpprotos["libxml_get_errors"] = "object libxml_get_errors()"
let s:phpprotos["libxml_clear_errors"] = "void libxml_clear_errors() "
let s:phpprotos["mcrypt_module_open"] = "resource mcrypt_module_open(string cipher, string cipher_directory, string mode, string mode_directory)"
let s:phpprotos["mcrypt_generic_init"] = "int mcrypt_generic_init(resource td, string key, string iv)"
let s:phpprotos["mcrypt_generic"] = "string mcrypt_generic(resource td, string data)"
let s:phpprotos["mdecrypt_generic"] = "string mdecrypt_generic(resource td, string data)"
let s:phpprotos["mcrypt_enc_get_supported_key_sizes"] = "array mcrypt_enc_get_supported_key_sizes(resource td)"
let s:phpprotos["mcrypt_enc_self_test"] = "int mcrypt_enc_self_test(resource td)"
let s:phpprotos["mcrypt_module_close"] = "bool mcrypt_module_close(resource td)"
let s:phpprotos["mcrypt_generic_deinit"] = "bool mcrypt_generic_deinit(resource td)"
let s:phpprotos["mcrypt_enc_is_block_algorithm_mode"] = "bool mcrypt_enc_is_block_algorithm_mode(resource td)"
let s:phpprotos["mcrypt_enc_is_block_algorithm"] = "bool mcrypt_enc_is_block_algorithm(resource td)"
let s:phpprotos["mcrypt_enc_is_block_mode"] = "bool mcrypt_enc_is_block_mode(resource td)"
let s:phpprotos["mcrypt_enc_get_block_size"] = "int mcrypt_enc_get_block_size(resource td)"
let s:phpprotos["mcrypt_enc_get_key_size"] = "int mcrypt_enc_get_key_size(resource td)"
let s:phpprotos["mcrypt_enc_get_iv_size"] = "int mcrypt_enc_get_iv_size(resource td)"
let s:phpprotos["mcrypt_enc_get_algorithms_name"] = "string mcrypt_enc_get_algorithms_name(resource td)"
let s:phpprotos["mcrypt_enc_get_modes_name"] = "string mcrypt_enc_get_modes_name(resource td)"
let s:phpprotos["mcrypt_module_self_test"] = "bool mcrypt_module_self_test(string algorithm [, string lib_dir])"
let s:phpprotos["mcrypt_module_is_block_algorithm_mode"] = "bool mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir])"
let s:phpprotos["mcrypt_module_is_block_algorithm"] = "bool mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir])"
let s:phpprotos["mcrypt_module_is_block_mode"] = "bool mcrypt_module_is_block_mode(string mode [, string lib_dir])"
let s:phpprotos["mcrypt_module_get_algo_block_size"] = "int mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir])"
let s:phpprotos["mcrypt_module_get_algo_key_size"] = "int mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir])"
let s:phpprotos["mcrypt_module_get_supported_key_sizes"] = "array mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir])"
let s:phpprotos["mcrypt_list_algorithms"] = "array mcrypt_list_algorithms([string lib_dir])"
let s:phpprotos["mcrypt_list_modes"] = "array mcrypt_list_modes([string lib_dir])"
let s:phpprotos["mcrypt_get_key_size"] = "int mcrypt_get_key_size(string cipher, string module)"
let s:phpprotos["mcrypt_get_block_size"] = "int mcrypt_get_block_size(string cipher, string module)"
let s:phpprotos["mcrypt_get_iv_size"] = "int mcrypt_get_iv_size(string cipher, string module)"
let s:phpprotos["mcrypt_get_cipher_name"] = "string mcrypt_get_cipher_name(string cipher)"
let s:phpprotos["mcrypt_encrypt"] = "string mcrypt_encrypt(string cipher, string key, string data, string mode, string iv)"
let s:phpprotos["mcrypt_decrypt"] = "string mcrypt_decrypt(string cipher, string key, string data, string mode, string iv)"
let s:phpprotos["mcrypt_ecb"] = "string mcrypt_ecb(int cipher, string key, string data, int mode, string iv)"
let s:phpprotos["mcrypt_cbc"] = "string mcrypt_cbc(int cipher, string key, string data, int mode, string iv)"
let s:phpprotos["mcrypt_cfb"] = "string mcrypt_cfb(int cipher, string key, string data, int mode, string iv)"
let s:phpprotos["mcrypt_ofb"] = "string mcrypt_ofb(int cipher, string key, string data, int mode, string iv)"
let s:phpprotos["mcrypt_create_iv"] = "string mcrypt_create_iv(int size, int source)"
let s:phpprotos["public static mixed Reflection::export"] = "public static mixed Reflection::export(Reflector r [, bool return])"
let s:phpprotos["public static array Reflection::getModifierNames"] = "public static array Reflection::getModifierNames(int modifiers)"
let s:phpprotos["public static mixed ReflectionFunction::export"] = "public static mixed ReflectionFunction::export(string name [, bool return])"
let s:phpprotos["public void ReflectionFunction::__construct"] = "public void ReflectionFunction::__construct(string name)"
let s:phpprotos["public string ReflectionFunction::__toString"] = "public string ReflectionFunction::__toString()"
let s:phpprotos["public string ReflectionFunction::getName"] = "public string ReflectionFunction::getName()"
let s:phpprotos["public bool ReflectionFunction::isInternal"] = "public bool ReflectionFunction::isInternal()"
let s:phpprotos["public bool ReflectionFunction::isUserDefined"] = "public bool ReflectionFunction::isUserDefined()"
let s:phpprotos["public bool ReflectionFunction::isDisabled"] = "public bool ReflectionFunction::isDisabled()"
let s:phpprotos["public string ReflectionFunction::getFileName"] = "public string ReflectionFunction::getFileName()"
let s:phpprotos["public int ReflectionFunction::getStartLine"] = "public int ReflectionFunction::getStartLine()"
let s:phpprotos["public int ReflectionFunction::getEndLine"] = "public int ReflectionFunction::getEndLine()"
let s:phpprotos["public string ReflectionFunction::getDocComment"] = "public string ReflectionFunction::getDocComment()"
let s:phpprotos["public array ReflectionFunction::getStaticVariables"] = "public array ReflectionFunction::getStaticVariables()"
let s:phpprotos["public mixed ReflectionFunction::invoke"] = "public mixed ReflectionFunction::invoke(mixed* args)"
let s:phpprotos["public mixed ReflectionFunction::invokeArgs"] = "public mixed ReflectionFunction::invokeArgs(array args)"
let s:phpprotos["public bool ReflectionFunction::returnsReference"] = "public bool ReflectionFunction::returnsReference()"
let s:phpprotos["public bool ReflectionFunction::getNumberOfParameters"] = "public bool ReflectionFunction::getNumberOfParameters()"
let s:phpprotos["public bool ReflectionFunction::getNumberOfRequiredParameters"] = "public bool ReflectionFunction::getNumberOfRequiredParameters()"
let s:phpprotos["public ReflectionParameter[] ReflectionFunction::getParameters"] = "public ReflectionParameter[] ReflectionFunction::getParameters()"
let s:phpprotos["public ReflectionExtension|NULL ReflectionFunction::getExtension"] = "public ReflectionExtension|NULL ReflectionFunction::getExtension()"
let s:phpprotos["public string|false ReflectionFunction::getExtensionName"] = "public string|false ReflectionFunction::getExtensionName()"
let s:phpprotos["public static mixed ReflectionParameter::export"] = "public static mixed ReflectionParameter::export(mixed function, mixed parameter [, bool return]) throws ReflectionException"
let s:phpprotos["public void ReflectionParameter::__construct"] = "public void ReflectionParameter::__construct(mixed function, mixed parameter)"
let s:phpprotos["public string ReflectionParameter::__toString"] = "public string ReflectionParameter::__toString()"
let s:phpprotos["public string ReflectionParameter::getName"] = "public string ReflectionParameter::getName()"
let s:phpprotos["public ReflectionFunction ReflectionParameter::getDeclaringFunction"] = "public ReflectionFunction ReflectionParameter::getDeclaringFunction()"
let s:phpprotos["public ReflectionClass|NULL ReflectionParameter::getDeclaringClass"] = "public ReflectionClass|NULL ReflectionParameter::getDeclaringClass()"
let s:phpprotos["public ReflectionClass|NULL ReflectionParameter::getClass"] = "public ReflectionClass|NULL ReflectionParameter::getClass()"
let s:phpprotos["public bool ReflectionParameter::isArray"] = "public bool ReflectionParameter::isArray()"
let s:phpprotos["public bool ReflectionParameter::allowsNull"] = "public bool ReflectionParameter::allowsNull()"
let s:phpprotos["public bool ReflectionParameter::isPassedByReference"] = "public bool ReflectionParameter::isPassedByReference()"
let s:phpprotos["public bool ReflectionParameter::getPosition"] = "public bool ReflectionParameter::getPosition()"
let s:phpprotos["public bool ReflectionParameter::isOptional"] = "public bool ReflectionParameter::isOptional()"
let s:phpprotos["public bool ReflectionParameter::isDefaultValueAvailable"] = "public bool ReflectionParameter::isDefaultValueAvailable()"
let s:phpprotos["public bool ReflectionParameter::getDefaultValue"] = "public bool ReflectionParameter::getDefaultValue()"
let s:phpprotos["public static mixed ReflectionMethod::export"] = "public static mixed ReflectionMethod::export(mixed class, string name [, bool return]) throws ReflectionException"
let s:phpprotos["public void ReflectionMethod::__construct"] = "public void ReflectionMethod::__construct(mixed class_or_method [, string name])"
let s:phpprotos["public string ReflectionMethod::__toString"] = "public string ReflectionMethod::__toString()"
let s:phpprotos["public mixed ReflectionMethod::invoke"] = "public mixed ReflectionMethod::invoke(mixed object, mixed* args)"
let s:phpprotos["public mixed ReflectionMethod::invokeArgs"] = "public mixed ReflectionMethod::invokeArgs(mixed object, array args)"
let s:phpprotos["public bool ReflectionMethod::isFinal"] = "public bool ReflectionMethod::isFinal()"
let s:phpprotos["public bool ReflectionMethod::isAbstract"] = "public bool ReflectionMethod::isAbstract()"
let s:phpprotos["public bool ReflectionMethod::isPublic"] = "public bool ReflectionMethod::isPublic()"
let s:phpprotos["public bool ReflectionMethod::isPrivate"] = "public bool ReflectionMethod::isPrivate()"
let s:phpprotos["public bool ReflectionMethod::isProtected"] = "public bool ReflectionMethod::isProtected()"
let s:phpprotos["public bool ReflectionMethod::isStatic"] = "public bool ReflectionMethod::isStatic()"
let s:phpprotos["public bool ReflectionFunction::isDeprecated"] = "public bool ReflectionFunction::isDeprecated()"
let s:phpprotos["public bool ReflectionMethod::isConstructor"] = "public bool ReflectionMethod::isConstructor()"
let s:phpprotos["public bool ReflectionMethod::isDestructor"] = "public bool ReflectionMethod::isDestructor()"
let s:phpprotos["public int ReflectionMethod::getModifiers"] = "public int ReflectionMethod::getModifiers()"
let s:phpprotos["public ReflectionClass ReflectionMethod::getDeclaringClass"] = "public ReflectionClass ReflectionMethod::getDeclaringClass()"
let s:phpprotos["public ReflectionClass ReflectionMethod::getPrototype"] = "public ReflectionClass ReflectionMethod::getPrototype()"
let s:phpprotos["public static mixed ReflectionClass::export"] = "public static mixed ReflectionClass::export(mixed argument [, bool return]) throws ReflectionException"
let s:phpprotos["public void ReflectionClass::__construct"] = "public void ReflectionClass::__construct(mixed argument) throws ReflectionException"
let s:phpprotos["public array ReflectionClass::getStaticProperties"] = "public array ReflectionClass::getStaticProperties()"
let s:phpprotos["public mixed ReflectionClass::getStaticPropertyValue"] = "public mixed ReflectionClass::getStaticPropertyValue(string name [, mixed default])"
let s:phpprotos["public void ReflectionClass::setStaticPropertyValue"] = "public void ReflectionClass::setStaticPropertyValue($name, $value)"
let s:phpprotos["public array ReflectionClass::getDefaultProperties"] = "public array ReflectionClass::getDefaultProperties()"
let s:phpprotos["public string ReflectionClass::__toString"] = "public string ReflectionClass::__toString()"
let s:phpprotos["public string ReflectionClass::getName"] = "public string ReflectionClass::getName()"
let s:phpprotos["public bool ReflectionClass::isInternal"] = "public bool ReflectionClass::isInternal()"
let s:phpprotos["public bool ReflectionClass::isUserDefined"] = "public bool ReflectionClass::isUserDefined()"
let s:phpprotos["public string ReflectionClass::getFileName"] = "public string ReflectionClass::getFileName()"
let s:phpprotos["public int ReflectionClass::getStartLine"] = "public int ReflectionClass::getStartLine()"
let s:phpprotos["public int ReflectionClass::getEndLine"] = "public int ReflectionClass::getEndLine()"
let s:phpprotos["public string ReflectionClass::getDocComment"] = "public string ReflectionClass::getDocComment()"
let s:phpprotos["public ReflectionMethod ReflectionClass::getConstructor"] = "public ReflectionMethod ReflectionClass::getConstructor()"
let s:phpprotos["public bool ReflectionClass::hasMethod"] = "public bool ReflectionClass::hasMethod(string name)"
let s:phpprotos["public ReflectionMethod ReflectionClass::getMethod"] = "public ReflectionMethod ReflectionClass::getMethod(string name) throws ReflectionException"
let s:phpprotos["public ReflectionMethod[] ReflectionClass::getMethods"] = "public ReflectionMethod[] ReflectionClass::getMethods([long $filter])"
let s:phpprotos["public bool ReflectionClass::hasProperty"] = "public bool ReflectionClass::hasProperty(string name)"
let s:phpprotos["public ReflectionProperty ReflectionClass::getProperty"] = "public ReflectionProperty ReflectionClass::getProperty(string name) throws ReflectionException"
let s:phpprotos["public ReflectionProperty[] ReflectionClass::getProperties"] = "public ReflectionProperty[] ReflectionClass::getProperties([long $filter])"
let s:phpprotos["public bool ReflectionClass::hasConstant"] = "public bool ReflectionClass::hasConstant(string name)"
let s:phpprotos["public array ReflectionClass::getConstants"] = "public array ReflectionClass::getConstants()"
let s:phpprotos["public mixed ReflectionClass::getConstant"] = "public mixed ReflectionClass::getConstant(string name)"
let s:phpprotos["public bool ReflectionClass::isInstantiable"] = "public bool ReflectionClass::isInstantiable()"
let s:phpprotos["public bool ReflectionClass::isInterface"] = "public bool ReflectionClass::isInterface()"
let s:phpprotos["public bool ReflectionClass::isFinal"] = "public bool ReflectionClass::isFinal()"
let s:phpprotos["public bool ReflectionClass::isAbstract"] = "public bool ReflectionClass::isAbstract()"
let s:phpprotos["public int ReflectionClass::getModifiers"] = "public int ReflectionClass::getModifiers()"
let s:phpprotos["public bool ReflectionClass::isInstance"] = "public bool ReflectionClass::isInstance(stdclass object)"
let s:phpprotos["public stdclass ReflectionClass::newInstance"] = "public stdclass ReflectionClass::newInstance(mixed* args, ...)"
let s:phpprotos["public stdclass ReflectionClass::newInstanceArgs"] = "public stdclass ReflectionClass::newInstanceArgs([array args])"
let s:phpprotos["public ReflectionClass[] ReflectionClass::getInterfaces"] = "public ReflectionClass[] ReflectionClass::getInterfaces()"
let s:phpprotos["public String[] ReflectionClass::getInterfaceNames"] = "public String[] ReflectionClass::getInterfaceNames()"
let s:phpprotos["public ReflectionClass ReflectionClass::getParentClass"] = "public ReflectionClass ReflectionClass::getParentClass()"
let s:phpprotos["public bool ReflectionClass::isSubclassOf"] = "public bool ReflectionClass::isSubclassOf(string|ReflectionClass class)"
let s:phpprotos["public bool ReflectionClass::implementsInterface"] = "public bool ReflectionClass::implementsInterface(string|ReflectionClass interface_name)"
let s:phpprotos["public bool ReflectionClass::isIterateable"] = "public bool ReflectionClass::isIterateable()"
let s:phpprotos["public ReflectionExtension|NULL ReflectionClass::getExtension"] = "public ReflectionExtension|NULL ReflectionClass::getExtension()"
let s:phpprotos["public string|false ReflectionClass::getExtensionName"] = "public string|false ReflectionClass::getExtensionName()"
let s:phpprotos["public static mixed ReflectionObject::export"] = "public static mixed ReflectionObject::export(mixed argument [, bool return]) throws ReflectionException"
let s:phpprotos["public void ReflectionObject::__construct"] = "public void ReflectionObject::__construct(mixed argument) throws ReflectionException"
let s:phpprotos["public static mixed ReflectionProperty::export"] = "public static mixed ReflectionProperty::export(mixed class, string name [, bool return]) throws ReflectionException"
let s:phpprotos["public void ReflectionProperty::__construct"] = "public void ReflectionProperty::__construct(mixed class, string name)"
let s:phpprotos["public string ReflectionProperty::__toString"] = "public string ReflectionProperty::__toString()"
let s:phpprotos["public string ReflectionProperty::getName"] = "public string ReflectionProperty::getName()"
let s:phpprotos["public bool ReflectionProperty::isPublic"] = "public bool ReflectionProperty::isPublic()"
let s:phpprotos["public bool ReflectionProperty::isPrivate"] = "public bool ReflectionProperty::isPrivate()"
let s:phpprotos["public bool ReflectionProperty::isProtected"] = "public bool ReflectionProperty::isProtected()"
let s:phpprotos["public bool ReflectionProperty::isStatic"] = "public bool ReflectionProperty::isStatic()"
let s:phpprotos["public bool ReflectionProperty::isDefault"] = "public bool ReflectionProperty::isDefault()"
let s:phpprotos["public int ReflectionProperty::getModifiers"] = "public int ReflectionProperty::getModifiers()"
let s:phpprotos["public mixed ReflectionProperty::getValue"] = "public mixed ReflectionProperty::getValue([stdclass object])"
let s:phpprotos["public void ReflectionProperty::setValue"] = "public void ReflectionProperty::setValue([stdclass object,] mixed value)"
let s:phpprotos["public ReflectionClass ReflectionProperty::getDeclaringClass"] = "public ReflectionClass ReflectionProperty::getDeclaringClass()"
let s:phpprotos["public string ReflectionProperty::getDocComment"] = "public string ReflectionProperty::getDocComment()"
let s:phpprotos["public static mixed ReflectionExtension::export"] = "public static mixed ReflectionExtension::export(string name [, bool return]) throws ReflectionException"
let s:phpprotos["public void ReflectionExtension::__construct"] = "public void ReflectionExtension::__construct(string name)"
let s:phpprotos["public string ReflectionExtension::__toString"] = "public string ReflectionExtension::__toString()"
let s:phpprotos["public string ReflectionExtension::getName"] = "public string ReflectionExtension::getName()"
let s:phpprotos["public string ReflectionExtension::getVersion"] = "public string ReflectionExtension::getVersion()"
let s:phpprotos["public ReflectionFunction[] ReflectionExtension::getFunctions"] = "public ReflectionFunction[] ReflectionExtension::getFunctions()"
let s:phpprotos["public array ReflectionExtension::getConstants"] = "public array ReflectionExtension::getConstants()"
let s:phpprotos["public array ReflectionExtension::getINIEntries"] = "public array ReflectionExtension::getINIEntries()"
let s:phpprotos["public ReflectionClass[] ReflectionExtension::getClasses"] = "public ReflectionClass[] ReflectionExtension::getClasses()"
let s:phpprotos["public array ReflectionExtension::getClassNames"] = "public array ReflectionExtension::getClassNames()"
let s:phpprotos["public array ReflectionExtension::getDependencies"] = "public array ReflectionExtension::getDependencies()"
let s:phpprotos["public void ReflectionExtension::info"] = "public void ReflectionExtension::info() U"
let s:phpprotos["mysqli_connect"] = "object mysqli_connect([string hostname [,string username [,string passwd [,string dbname [,int port [,string socket]]]]]])"
let s:phpprotos["mysqli_connect_errno"] = "int mysqli_connect_errno(void)"
let s:phpprotos["mysqli_connect_error"] = "string mysqli_connect_error(void)"
let s:phpprotos["mixed mysqli_fetch_array "] = "mixed mysqli_fetch_array (object result [,int resulttype])"
let s:phpprotos["mixed mysqli_fetch_assoc "] = "mixed mysqli_fetch_assoc (object result)"
let s:phpprotos["mixed mysqli_fetch_object "] = "mixed mysqli_fetch_object (object result [, string class_name [, NULL|array ctor_params]])"
let s:phpprotos["mysqli_multi_query"] = "bool mysqli_multi_query(object link, string query)"
let s:phpprotos["mysqli_query"] = "mixed mysqli_query(object link, string query [,int resultmode]) */"
let s:phpprotos["mysqli_get_warnings"] = "object mysqli_get_warnings(object link) */"
let s:phpprotos["mysqli_stmt_get_warnings"] = "object mysqli_stmt_get_warnings(object link) */"
let s:phpprotos["mysqli_set_charset"] = "bool mysqli_set_charset(object link, string csname)"
let s:phpprotos["mysqli_get_charset"] = "object mysqli_get_charset(object link) "
let s:phpprotos["mysqli_embedded_server_start"] = "bool mysqli_embedded_server_start(bool start, array arguments, array groups)"
let s:phpprotos["mysqli_embedded_server_end"] = "void mysqli_embedded_server_end(void)"
let s:phpprotos["mysqli_report"] = "bool mysqli_report(int flags)"
let s:phpprotos["mysqli_affected_rows"] = "mixed mysqli_affected_rows(object link)"
let s:phpprotos["mysqli_autocommit"] = "bool mysqli_autocommit(object link, bool mode)"
let s:phpprotos["mysqli_stmt_bind_param"] = "bool mysqli_stmt_bind_param(object stmt, string types, mixed variable [,mixed,....])"
let s:phpprotos["mysqli_stmt_bind_result"] = "bool mysqli_stmt_bind_result(object stmt, mixed var, [,mixed, ...])"
let s:phpprotos["mysqli_change_user"] = "bool mysqli_change_user(object link, string user, string password, string database)"
let s:phpprotos["mysqli_character_set_name"] = "string mysqli_character_set_name(object link)"
let s:phpprotos["mysqli_close"] = "bool mysqli_close(object link)"
let s:phpprotos["mysqli_commit"] = "bool mysqli_commit(object link)"
let s:phpprotos["mysqli_data_seek"] = "bool mysqli_data_seek(object result, int offset)"
let s:phpprotos["mysqli_debug"] = "void mysqli_debug(string debug)"
let s:phpprotos["mysqli_dump_debug_info"] = "bool mysqli_dump_debug_info(object link)"
let s:phpprotos["mysqli_errno"] = "int mysqli_errno(object link)"
let s:phpprotos["mysqli_error"] = "string mysqli_error(object link)"
let s:phpprotos["mysqli_stmt_execute"] = "bool mysqli_stmt_execute(object stmt)"
let s:phpprotos["mysqli_stmt_fetch"] = "mixed mysqli_stmt_fetch(object stmt)"
let s:phpprotos["mixed mysqli_fetch_field "] = "mixed mysqli_fetch_field (object result)"
let s:phpprotos["mixed mysqli_fetch_fields "] = "mixed mysqli_fetch_fields (object result)"
let s:phpprotos["mixed mysqli_fetch_field_direct "] = "mixed mysqli_fetch_field_direct (object result, int offset)"
let s:phpprotos["mixed mysqli_fetch_lengths "] = "mixed mysqli_fetch_lengths (object result)"
let s:phpprotos["array mysqli_fetch_row "] = "array mysqli_fetch_row (object result)"
let s:phpprotos["mysqli_field_count"] = "int mysqli_field_count(object link)"
let s:phpprotos["mysqli_field_seek"] = "int mysqli_field_seek(object result, int fieldnr)"
let s:phpprotos["mysqli_field_tell"] = "int mysqli_field_tell(object result)"
let s:phpprotos["mysqli_free_result"] = "void mysqli_free_result(object result)"
let s:phpprotos["mysqli_get_client_info"] = "string mysqli_get_client_info(void) "
let s:phpprotos["mysqli_get_client_version"] = "int mysqli_get_client_version(void) "
let s:phpprotos["string mysqli_get_host_info "] = "string mysqli_get_host_info (object link) "
let s:phpprotos["mysqli_get_proto_info"] = "int mysqli_get_proto_info(object link)"
let s:phpprotos["mysqli_get_server_info"] = "string mysqli_get_server_info(object link) "
let s:phpprotos["mysqli_get_server_version"] = "int mysqli_get_server_version(object link) "
let s:phpprotos["mysqli_info"] = "string mysqli_info(object link)"
let s:phpprotos["mysqli_init"] = "resource mysqli_init(void)"
let s:phpprotos["mysqli_insert_id"] = "mixed mysqli_insert_id(object link)"
let s:phpprotos["mysqli_kill"] = "bool mysqli_kill(object link, int processid)"
let s:phpprotos["mysqli_set_local_infile_default"] = "void mysqli_set_local_infile_default(object link)"
let s:phpprotos["mysqli_set_local_infile_handler"] = "bool mysqli_set_local_infile_handler(object link, callback read_func)"
let s:phpprotos["mysqli_more_results"] = "bool mysqli_more_results(object link)"
let s:phpprotos["mysqli_next_result"] = "bool mysqli_next_result(object link)"
let s:phpprotos["mysqli_num_fields"] = "int mysqli_num_fields(object result)"
let s:phpprotos["mysqli_num_rows"] = "mixed mysqli_num_rows(object result)"
let s:phpprotos["mysqli_options"] = "bool mysqli_options(object link, int flags, mixed values)"
let s:phpprotos["mysqli_ping"] = "bool mysqli_ping(object link)"
let s:phpprotos["mysqli_prepare"] = "mixed mysqli_prepare(object link, string query)"
let s:phpprotos["mysqli_real_connect"] = "bool mysqli_real_connect(object link [,string hostname [,string username [,string passwd [,string dbname [,int port [,string socket [,int flags]]]]]]])"
let s:phpprotos["mysqli_real_query"] = "bool mysqli_real_query(object link, string query)"
let s:phpprotos["mysqli_real_escape_string"] = "string mysqli_real_escape_string(object link, string escapestr) "
let s:phpprotos["mysqli_rollback"] = "bool mysqli_rollback(object link)"
let s:phpprotos["mysqli_stmt_send_long_data"] = "bool mysqli_stmt_send_long_data(object stmt, int param_nr, string data)"
let s:phpprotos["mysqli_stmt_affected_rows"] = "mixed mysqli_stmt_affected_rows(object stmt)"
let s:phpprotos["mysqli_stmt_close"] = "bool mysqli_stmt_close(object stmt) "
let s:phpprotos["mysqli_stmt_data_seek"] = "void mysqli_stmt_data_seek(object stmt, int offset)"
let s:phpprotos["mysqli_stmt_field_count"] = "int mysqli_stmt_field_count(object stmt) {"
let s:phpprotos["mysqli_stmt_free_result"] = "void mysqli_stmt_free_result(object stmt)"
let s:phpprotos["mysqli_stmt_insert_id"] = "mixed mysqli_stmt_insert_id(object stmt)"
let s:phpprotos["mysqli_stmt_param_count"] = "int mysqli_stmt_param_count(object stmt) {"
let s:phpprotos["mysqli_stmt_reset"] = "bool mysqli_stmt_reset(object stmt)"
let s:phpprotos["mysqli_stmt_num_rows"] = "mixed mysqli_stmt_num_rows(object stmt)"
let s:phpprotos["mysqli_select_db"] = "string mysqli_select_db(object link, string dbname)"
let s:phpprotos["mysqli_sqlstate"] = "string mysqli_sqlstate(object link)"
let s:phpprotos["mysqli_ssl_set"] = "bool mysqli_ssl_set(object link ,string key ,string cert ,string ca ,string capath ,string cipher])"
let s:phpprotos["mysqli_stat"] = "mixed mysqli_stat(object link) "
let s:phpprotos["mysqli_stmt_attr_set"] = "int mysqli_stmt_attr_set(object stmt, long attr, long mode)"
let s:phpprotos["mysqli_stmt_attr_get"] = "int mysqli_stmt_attr_get(object stmt, long attr)"
let s:phpprotos["mysqli_stmt_errno"] = "int mysqli_stmt_errno(object stmt)"
let s:phpprotos["mysqli_stmt_error"] = "string mysqli_stmt_error(object stmt)"
let s:phpprotos["mysqli_stmt_init"] = "mixed mysqli_stmt_init(object link)"
let s:phpprotos["mysqli_stmt_prepare"] = "bool mysqli_stmt_prepare(object stmt, string query)"
let s:phpprotos["mysqli_stmt_result_metadata"] = "mixed mysqli_stmt_result_metadata(object stmt)"
let s:phpprotos["mysqli_stmt_store_result"] = "bool mysqli_stmt_store_result(stmt)"
let s:phpprotos["mysqli_stmt_sqlstate"] = "string mysqli_stmt_sqlstate(object stmt)"
let s:phpprotos["mysqli_store_result"] = "object mysqli_store_result(object link)"
let s:phpprotos["mysqli_thread_id"] = "int mysqli_thread_id(object link)"
let s:phpprotos["mysqli_thread_safe"] = "bool mysqli_thread_safe(void)"
let s:phpprotos["mysqli_use_result"] = "mixed mysqli_use_result(object link)"
let s:phpprotos["int mysqli_warning_count "] = "int mysqli_warning_count (object link)"
let s:phpprotos["mysqli_disable_reads_from_master"] = "void mysqli_disable_reads_from_master(object link)"
let s:phpprotos["mysqli_disable_rpl_parse"] = "void mysqli_disable_rpl_parse(object link)"
let s:phpprotos["mysqli_enable_reads_from_master"] = "void mysqli_enable_reads_from_master(object link)"
let s:phpprotos["mysqli_enable_rpl_parse"] = "void mysqli_enable_rpl_parse(object link)"
let s:phpprotos["mysqli_master_query"] = "bool mysqli_master_query(object link, string query)"
let s:phpprotos["mysqli_rpl_parse_enabled"] = "int mysqli_rpl_parse_enabled(object link)"
let s:phpprotos["mysqli_rpl_probe"] = "bool mysqli_rpl_probe(object link)"
let s:phpprotos["mysqli_rpl_query_type"] = "int mysqli_rpl_query_type(string query)"
let s:phpprotos["mysqli_send_query"] = "bool mysqli_send_query(object link, string query)"
let s:phpprotos["mysqli_slave_query"] = "bool mysqli_slave_query(object link, string query)"
let s:phpprotos["mime_content_type"] = "string mime_content_type(string filename|resource stream)"
let s:phpprotos["pspell_new"] = "int pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]])"
let s:phpprotos["pspell_new_personal"] = "int pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]])"
let s:phpprotos["pspell_new_config"] = "int pspell_new_config(int config)"
let s:phpprotos["pspell_check"] = "bool pspell_check(int pspell, string word)"
let s:phpprotos["pspell_suggest"] = "array pspell_suggest(int pspell, string word)"
let s:phpprotos["pspell_store_replacement"] = "bool pspell_store_replacement(int pspell, string misspell, string correct)"
let s:phpprotos["pspell_add_to_personal"] = "bool pspell_add_to_personal(int pspell, string word)"
let s:phpprotos["pspell_add_to_session"] = "bool pspell_add_to_session(int pspell, string word)"
let s:phpprotos["pspell_clear_session"] = "bool pspell_clear_session(int pspell)"
let s:phpprotos["pspell_save_wordlist"] = "bool pspell_save_wordlist(int pspell)"
let s:phpprotos["pspell_config_create"] = "int pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]])"
let s:phpprotos["pspell_config_runtogether"] = "bool pspell_config_runtogether(int conf, bool runtogether)"
let s:phpprotos["pspell_config_mode"] = "bool pspell_config_mode(int conf, long mode)"
let s:phpprotos["pspell_config_ignore"] = "bool pspell_config_ignore(int conf, int ignore)"
let s:phpprotos["pspell_config_personal"] = "bool pspell_config_personal(int conf, string personal)"
let s:phpprotos["pspell_config_dict_dir"] = "bool pspell_config_dict_dir(int conf, string directory)"
let s:phpprotos["pspell_config_data_dir"] = "bool pspell_config_data_dir(int conf, string directory)"
let s:phpprotos["pspell_config_repl"] = "bool pspell_config_repl(int conf, string repl)"
let s:phpprotos["pspell_config_save_repl"] = "bool pspell_config_save_repl(int conf, bool save)"
let s:phpprotos["mb_language"] = "string mb_language([string language])"
let s:phpprotos["mb_internal_encoding"] = "string mb_internal_encoding([string encoding])"
let s:phpprotos["mb_http_input"] = "mixed mb_http_input([string type])"
let s:phpprotos["mb_http_output"] = "string mb_http_output([string encoding])"
let s:phpprotos["mb_detect_order"] = "bool|array mb_detect_order([mixed encoding-list])"
let s:phpprotos["mb_substitute_character"] = "mixed mb_substitute_character([mixed substchar])"
let s:phpprotos["mb_preferred_mime_name"] = "string mb_preferred_mime_name(string encoding)"
let s:phpprotos["mb_parse_str"] = "bool mb_parse_str(string encoded_string [, array result])"
let s:phpprotos["mb_output_handler"] = "string mb_output_handler(string contents, int status)"
let s:phpprotos["mb_strlen"] = "int mb_strlen(string str [, string encoding])"
let s:phpprotos["mb_strpos"] = "int mb_strpos(string haystack, string needle [, int offset [, string encoding]])"
let s:phpprotos["mb_strrpos"] = "int mb_strrpos(string haystack, string needle [, int offset [, string encoding]])"
let s:phpprotos["mb_stripos"] = "int mb_stripos(string haystack, string needle [, int offset [, string encoding]])"
let s:phpprotos["mb_strripos"] = "int mb_strripos(string haystack, string needle [, int offset [, string encoding]])"
let s:phpprotos["mb_strstr"] = "string mb_strstr(string haystack, string needle[, bool part[, string encoding]])"
let s:phpprotos["mb_strrchr"] = "string mb_strrchr(string haystack, string needle[, bool part[, string encoding]])"
let s:phpprotos["mb_stristr"] = "string mb_stristr(string haystack, string needle[, bool part[, string encoding]])"
let s:phpprotos["mb_strrichr"] = "string mb_strrichr(string haystack, string needle[, bool part[, string encoding]])"
let s:phpprotos["mb_substr_count"] = "int mb_substr_count(string haystack, string needle [, string encoding])"
let s:phpprotos["mb_substr"] = "string mb_substr(string str, int start [, int length [, string encoding]])"
let s:phpprotos["mb_strcut"] = "string mb_strcut(string str, int start [, int length [, string encoding]])"
let s:phpprotos["mb_strwidth"] = "int mb_strwidth(string str [, string encoding])"
let s:phpprotos["mb_strimwidth"] = "string mb_strimwidth(string str, int start, int width [, string trimmarker [, string encoding]])"
let s:phpprotos["mb_convert_encoding"] = "string mb_convert_encoding(string str, string to-encoding [, mixed from-encoding])"
let s:phpprotos["mb_convert_case"] = "string mb_convert_case(string sourcestring, int mode [, string encoding])"
let s:phpprotos["mb_strtoupper"] = "string mb_strtoupper(string sourcestring [, string encoding])"
let s:phpprotos["mb_strtolower"] = "string mb_strtolower(string sourcestring [, string encoding])"
let s:phpprotos["mb_detect_encoding"] = "string mb_detect_encoding(string str [, mixed encoding_list [, bool strict]])"
let s:phpprotos["mb_list_encodings"] = "mixed mb_list_encodings()"
let s:phpprotos["mb_list_encodings_alias_names"] = "array mb_list_encodings_alias_names([string encoding])"
let s:phpprotos["mb_list_mime_names"] = "mixed mb_list_mime_names([string encoding])"
let s:phpprotos["mb_encode_mimeheader"] = "string mb_encode_mimeheader(string str [, string charset [, string transfer-encoding [, string linefeed [, int indent]]]])"
let s:phpprotos["mb_decode_mimeheader"] = "string mb_decode_mimeheader(string string)"
let s:phpprotos["mb_convert_kana"] = "string mb_convert_kana(string str [, string option] [, string encoding])"
let s:phpprotos["mb_convert_variables"] = "string mb_convert_variables(string to-encoding, mixed from-encoding [, mixed ...])"
let s:phpprotos["mb_encode_numericentity"] = "string mb_encode_numericentity(string string, array convmap [, string encoding])"
let s:phpprotos["mb_decode_numericentity"] = "string mb_decode_numericentity(string string, array convmap [, string encoding])"
let s:phpprotos["mb_send_mail"] = "int mb_send_mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])"
let s:phpprotos["mb_get_info"] = "mixed mb_get_info([string type])"
let s:phpprotos["mb_check_encoding"] = "bool mb_check_encoding([string var[, string encoding]])"
let s:phpprotos["mb_regex_encoding"] = "string mb_regex_encoding([string encoding])"
let s:phpprotos["mb_ereg"] = "int mb_ereg(string pattern, string string [, array registers])"
let s:phpprotos["mb_eregi"] = "int mb_eregi(string pattern, string string [, array registers])"
let s:phpprotos["mb_ereg_replace"] = "string mb_ereg_replace(string pattern, string replacement, string string [, string option])"
let s:phpprotos["mb_eregi_replace"] = "string mb_eregi_replace(string pattern, string replacement, string string)"
let s:phpprotos["mb_split"] = "array mb_split(string pattern, string string [, int limit])"
let s:phpprotos["mb_ereg_match"] = "bool mb_ereg_match(string pattern, string string [,string option])"
let s:phpprotos["mb_ereg_search"] = "bool mb_ereg_search([string pattern[, string option]])"
let s:phpprotos["mb_ereg_search_pos"] = "array mb_ereg_search_pos([string pattern[, string option]])"
let s:phpprotos["mb_ereg_search_regs"] = "array mb_ereg_search_regs([string pattern[, string option]])"
let s:phpprotos["mb_ereg_search_init"] = "bool mb_ereg_search_init(string string [, string pattern[, string option]])"
let s:phpprotos["mb_ereg_search_getregs"] = "array mb_ereg_search_getregs(void)"
let s:phpprotos["mb_ereg_search_getpos"] = "int mb_ereg_search_getpos(void)"
let s:phpprotos["mb_ereg_search_setpos"] = "bool mb_ereg_search_setpos(int position)"
let s:phpprotos["mb_regex_set_options"] = "string mb_regex_set_options([string options])"
let s:phpprotos["recode_string"] = "string recode_string(string request, string str)"
let s:phpprotos["recode_file"] = "bool recode_file(string request, resource input, resource output)"
let s:phpprotos["sqlite_popen"] = "resource sqlite_popen(string filename [, int mode [, string &error_message]])"
let s:phpprotos["sqlite_open"] = "resource sqlite_open(string filename [, int mode [, string &error_message]])"
let s:phpprotos["sqlite_factory"] = "object sqlite_factory(string filename [, int mode [, string &error_message]])"
let s:phpprotos["sqlite_busy_timeout"] = "void sqlite_busy_timeout(resource db, int ms)"
let s:phpprotos["sqlite_close"] = "void sqlite_close(resource db)"
let s:phpprotos["sqlite_unbuffered_query"] = "resource sqlite_unbuffered_query(string query, resource db [ , int result_type [, string &error_message]])"
let s:phpprotos["sqlite_fetch_column_types"] = "resource sqlite_fetch_column_types(string table_name, resource db [, int result_type])"
let s:phpprotos["sqlite_query"] = "resource sqlite_query(string query, resource db [, int result_type [, string &error_message]])"
let s:phpprotos["sqlite_exec"] = "boolean sqlite_exec(string query, resource db[, string &error_message])"
let s:phpprotos["sqlite_fetch_all"] = "array sqlite_fetch_all(resource result [, int result_type [, bool decode_binary]])"
let s:phpprotos["sqlite_fetch_array"] = "array sqlite_fetch_array(resource result [, int result_type [, bool decode_binary]])"
let s:phpprotos["sqlite_fetch_object"] = "object sqlite_fetch_object(resource result [, string class_name [, NULL|array ctor_params [, bool decode_binary]]])"
let s:phpprotos["sqlite_array_query"] = "array sqlite_array_query(resource db, string query [ , int result_type [, bool decode_binary]])"
let s:phpprotos["sqlite_single_query"] = "array sqlite_single_query(resource db, string query [, bool first_row_only [, bool decode_binary]])"
let s:phpprotos["sqlite_fetch_single"] = "string sqlite_fetch_single(resource result [, bool decode_binary])"
let s:phpprotos["sqlite_current"] = "array sqlite_current(resource result [, int result_type [, bool decode_binary]])"
let s:phpprotos["sqlite_column"] = "mixed sqlite_column(resource result, mixed index_or_name [, bool decode_binary])"
let s:phpprotos["sqlite_libversion"] = "string sqlite_libversion()"
let s:phpprotos["sqlite_libencoding"] = "string sqlite_libencoding()"
let s:phpprotos["sqlite_changes"] = "int sqlite_changes(resource db)"
let s:phpprotos["sqlite_last_insert_rowid"] = "int sqlite_last_insert_rowid(resource db)"
let s:phpprotos["sqlite_num_rows"] = "int sqlite_num_rows(resource result)"
let s:phpprotos["sqlite_valid"] = "bool sqlite_valid(resource result)"
let s:phpprotos["sqlite_has_prev"] = "bool sqlite_has_prev(resource result)"
let s:phpprotos["sqlite_num_fields"] = "int sqlite_num_fields(resource result)"
let s:phpprotos["sqlite_field_name"] = "string sqlite_field_name(resource result, int field_index)"
let s:phpprotos["sqlite_seek"] = "bool sqlite_seek(resource result, int row)"
let s:phpprotos["sqlite_rewind"] = "bool sqlite_rewind(resource result)"
let s:phpprotos["sqlite_next"] = "bool sqlite_next(resource result)"
let s:phpprotos["sqlite_key"] = "int sqlite_key(resource result)"
let s:phpprotos["sqlite_prev"] = "bool sqlite_prev(resource result)"
let s:phpprotos["sqlite_escape_string"] = "string sqlite_escape_string(string item)"
let s:phpprotos["sqlite_last_error"] = "int sqlite_last_error(resource db)"
let s:phpprotos["sqlite_error_string"] = "string sqlite_error_string(int error_code)"
let s:phpprotos["sqlite_create_aggregate"] = "bool sqlite_create_aggregate(resource db, string funcname, mixed step_func, mixed finalize_func[, long num_args])"
let s:phpprotos["sqlite_create_function"] = "bool sqlite_create_function(resource db, string funcname, mixed callback[, long num_args])"
let s:phpprotos["sqlite_udf_encode_binary"] = "string sqlite_udf_encode_binary(string data)"
let s:phpprotos["sqlite_udf_decode_binary"] = "string sqlite_udf_decode_binary(string data)"
let s:phpprotos["sybase_connect"] = "int sybase_connect([string host [, string user [, string password [, string charset [, string appname]]]]])"
let s:phpprotos["sybase_pconnect"] = "int sybase_pconnect([string host [, string user [, string password [, string charset [, string appname]]]]])"
let s:phpprotos["sybase_close"] = "bool sybase_close([int link_id])"
let s:phpprotos["sybase_select_db"] = "bool sybase_select_db(string database [, int link_id])"
let s:phpprotos["sybase_query"] = "int sybase_query(string query [, int link_id])"
let s:phpprotos["sybase_free_result"] = "bool sybase_free_result(int result)"
let s:phpprotos["sybase_get_last_message"] = "string sybase_get_last_message(void)"
let s:phpprotos["sybase_num_rows"] = "int sybase_num_rows(int result)"
let s:phpprotos["sybase_num_fields"] = "int sybase_num_fields(int result)"
let s:phpprotos["sybase_fetch_row"] = "array sybase_fetch_row(int result)"
let s:phpprotos["sybase_fetch_object"] = "object sybase_fetch_object(int result)"
let s:phpprotos["sybase_fetch_array"] = "array sybase_fetch_array(int result)"
let s:phpprotos["sybase_data_seek"] = "bool sybase_data_seek(int result, int offset)"
let s:phpprotos["sybase_fetch_field"] = "object sybase_fetch_field(int result [, int offset])"
let s:phpprotos["sybase_field_seek"] = "bool sybase_field_seek(int result, int offset)"
let s:phpprotos["sybase_result"] = "string sybase_result(int result, int row, mixed field)"
let s:phpprotos["sybase_affected_rows"] = "int sybase_affected_rows([int link_id])"
let s:phpprotos["sybase_min_error_severity"] = "void sybase_min_error_severity(int severity)"
let s:phpprotos["sybase_min_message_severity"] = "void sybase_min_message_severity(int severity)"
let s:phpprotos["sybase_connect"] = "int sybase_connect([string host [, string user [, string password [, string charset [, string appname]]]]])"
let s:phpprotos["sybase_pconnect"] = "int sybase_pconnect([string host [, string user [, string password [, string charset [, string appname]]]]])"
let s:phpprotos["sybase_close"] = "bool sybase_close([int link_id])"
let s:phpprotos["sybase_select_db"] = "bool sybase_select_db(string database [, int link_id])"
let s:phpprotos["sybase_query"] = "int sybase_query(string query [, int link_id])"
let s:phpprotos["sybase_unbuffered_query"] = "int sybase_unbuffered_query(string query [, int link_id])"
let s:phpprotos["sybase_free_result"] = "bool sybase_free_result(int result)"
let s:phpprotos["sybase_get_last_message"] = "string sybase_get_last_message(void)"
let s:phpprotos["sybase_num_rows"] = "int sybase_num_rows(int result)"
let s:phpprotos["sybase_num_fields"] = "int sybase_num_fields(int result)"
let s:phpprotos["sybase_fetch_row"] = "array sybase_fetch_row(int result)"
let s:phpprotos["sybase_fetch_object"] = "object sybase_fetch_object(int result [, mixed object])"
let s:phpprotos["sybase_fetch_array"] = "array sybase_fetch_array(int result)"
let s:phpprotos["sybase_fetch_assoc"] = "array sybase_fetch_assoc(int result)"
let s:phpprotos["sybase_data_seek"] = "bool sybase_data_seek(int result, int offset)"
let s:phpprotos["sybase_fetch_field"] = "object sybase_fetch_field(int result [, int offset])"
let s:phpprotos["sybase_field_seek"] = "bool sybase_field_seek(int result, int offset)"
let s:phpprotos["sybase_result"] = "string sybase_result(int result, int row, mixed field)"
let s:phpprotos["sybase_affected_rows"] = "int sybase_affected_rows([int link_id])"
let s:phpprotos["sybase_min_client_severity"] = "void sybase_min_client_severity(int severity)"
let s:phpprotos["sybase_min_server_severity"] = "void sybase_min_server_severity(int severity)"
let s:phpprotos["sybase_deadlock_retry_count"] = "void sybase_deadlock_retry_count(int retry_count)"
let s:phpprotos["sybase_set_message_handler"] = "bool sybase_set_message_handler(mixed error_func [, resource connection])"
let s:phpprotos["dl"] = "int dl(string extension_filename)"
let s:phpprotos["sprintf"] = "string sprintf(string format [, mixed arg1 [, mixed ...]])"
let s:phpprotos["vsprintf"] = "string vsprintf(string format, array args)"
let s:phpprotos["printf"] = "int printf(string format [, mixed arg1 [, mixed ...]])"
let s:phpprotos["vprintf"] = "int vprintf(string format, array args)"
let s:phpprotos["fprintf"] = "int fprintf(resource stream, string format [, mixed arg1 [, mixed ...]])"
let s:phpprotos["vfprintf"] = "int vfprintf(resource stream, string format, array args)"
let s:phpprotos["crc32"] = "string crc32(string str)"
let s:phpprotos["crypt"] = "string crypt(string str [, string salt])"
let s:phpprotos["metaphone"] = "string metaphone(string text[, int phones])"
let s:phpprotos["uniqid"] = "string uniqid([string prefix , bool more_entropy])"
let s:phpprotos["quoted_printable_decode"] = "string quoted_printable_decode(string str)"
let s:phpprotos["opendir"] = "mixed opendir(string path[, resource context])"
let s:phpprotos["dir"] = "object dir(string directory[, resource context])"
let s:phpprotos["closedir"] = "void closedir([resource dir_handle])"
let s:phpprotos["chroot"] = "bool chroot(string directory)"
let s:phpprotos["chdir"] = "bool chdir(string directory)"
let s:phpprotos["getcwd"] = "mixed getcwd(void)"
let s:phpprotos["rewinddir"] = "void rewinddir([resource dir_handle])"
let s:phpprotos["readdir"] = "string readdir([resource dir_handle])"
let s:phpprotos["glob"] = "array glob(string pattern [, int flags])"
let s:phpprotos["scandir"] = "array scandir(string dir [, int sorting_order [, resource context]])"
let s:phpprotos["gethostbyaddr"] = "string gethostbyaddr(string ip_address)"
let s:phpprotos["gethostbyname"] = "string gethostbyname(string hostname)"
let s:phpprotos["gethostbynamel"] = "array gethostbynamel(string hostname)"
let s:phpprotos["dns_check_record"] = "int dns_check_record(string host [, string type])"
let s:phpprotos["dns_get_record"] = "array|false dns_get_record(string hostname [, int type[, array authns, array addtl]])"
let s:phpprotos["dns_get_mx"] = "bool dns_get_mx(string hostname, array mxhosts [, array weight])"
let s:phpprotos["lcg_value"] = "float lcg_value()"
let s:phpprotos["md5"] = "string md5(string str, [ bool raw_output])"
let s:phpprotos["md5_file"] = "string md5_file(string filename [, bool raw_output])"
let s:phpprotos["ereg"] = "int ereg(string pattern, string string [, array registers])"
let s:phpprotos["eregi"] = "int eregi(string pattern, string string [, array registers])"
let s:phpprotos["ereg_replace"] = "string ereg_replace(string pattern, string replacement, string string)"
let s:phpprotos["eregi_replace"] = "string eregi_replace(string pattern, string replacement, string string)"
let s:phpprotos["split"] = "array split(string pattern, string string [, int limit])"
let s:phpprotos["spliti"] = "array spliti(string pattern, string string [, int limit])"
let s:phpprotos["sql_regcase"] = "string sql_regcase(string string)"
let s:phpprotos["var_dump"] = "void var_dump(mixed var)"
let s:phpprotos["debug_zval_dump"] = "void debug_zval_dump(mixed var)"
let s:phpprotos["var_export"] = "mixed var_export(mixed var [, bool return])"
let s:phpprotos["serialize"] = "string serialize(mixed variable)"
let s:phpprotos["unserialize"] = "mixed unserialize(string variable_representation)"
let s:phpprotos["memory_get_usage"] = "int memory_get_usage([real_usage])"
let s:phpprotos["memory_get_peak_usage"] = "int memory_get_peak_usage([real_usage])"
let s:phpprotos["parse_url"] = "mixed parse_url(string url, [int url_component])"
let s:phpprotos["urlencode"] = "string urlencode(string str)"
let s:phpprotos["urldecode"] = "string urldecode(string str)"
let s:phpprotos["rawurlencode"] = "string rawurlencode(string str)"
let s:phpprotos["rawurldecode"] = "string rawurldecode(string str)"
let s:phpprotos["get_headers"] = "array get_headers(string url[, int format])"
let s:phpprotos["version_compare"] = "int version_compare(string ver1, string ver2 [, string oper])"
let s:phpprotos["constant"] = "mixed constant(string const_name)"
let s:phpprotos["inet_ntop"] = "string inet_ntop(string in_addr)"
let s:phpprotos["inet_pton"] = "string inet_pton(string ip_address)"
let s:phpprotos["ip2long"] = "int ip2long(string ip_address)"
let s:phpprotos["long2ip"] = "string long2ip(int proper_address)"
let s:phpprotos["getenv"] = "string getenv(string varname)"
let s:phpprotos["putenv"] = "bool putenv(string setting)"
let s:phpprotos["getopt"] = "array getopt(string options [, array longopts])"
let s:phpprotos["flush"] = "void flush(void)"
let s:phpprotos["sleep"] = "void sleep(int seconds)"
let s:phpprotos["usleep"] = "void usleep(int micro_seconds)"
let s:phpprotos["time_nanosleep"] = "mixed time_nanosleep(long seconds, long nanoseconds)"
let s:phpprotos["time_sleep_until"] = "mixed time_sleep_until(float timestamp)"
let s:phpprotos["get_current_user"] = "string get_current_user(void)"
let s:phpprotos["get_cfg_var"] = "string get_cfg_var(string option_name)"
let s:phpprotos["set_magic_quotes_runtime"] = "bool set_magic_quotes_runtime(int new_setting)"
let s:phpprotos["get_magic_quotes_runtime"] = "int get_magic_quotes_runtime(void)"
let s:phpprotos["get_magic_quotes_gpc"] = "int get_magic_quotes_gpc(void)"
let s:phpprotos["error_log"] = "bool error_log(string message [, int message_type [, string destination [, string extra_headers]]])"
let s:phpprotos["error_get_last"] = "array error_get_last()"
let s:phpprotos["call_user_func"] = "mixed call_user_func(string function_name [, mixed parmeter] [, mixed ...])"
let s:phpprotos["call_user_func_array"] = "mixed call_user_func_array(string function_name, array parameters)"
let s:phpprotos["call_user_method"] = "mixed call_user_method(string method_name, mixed object [, mixed parameter] [, mixed ...])"
let s:phpprotos["call_user_method_array"] = "mixed call_user_method_array(string method_name, mixed object, array params)"
let s:phpprotos["register_shutdown_function"] = "void register_shutdown_function(string function_name)"
let s:phpprotos["highlight_file"] = "bool highlight_file(string file_name [, bool return] )"
let s:phpprotos["php_strip_whitespace"] = "string php_strip_whitespace(string file_name)"
let s:phpprotos["highlight_string"] = "bool highlight_string(string string [, bool return] )"
let s:phpprotos["ini_get"] = "string ini_get(string varname)"
let s:phpprotos["ini_get_all"] = "array ini_get_all([string extension])"
let s:phpprotos["ini_set"] = "string ini_set(string varname, string newvalue)"
let s:phpprotos["ini_restore"] = "void ini_restore(string varname)"
let s:phpprotos["set_include_path"] = "string set_include_path(string new_include_path)"
let s:phpprotos["get_include_path"] = "string get_include_path()"
let s:phpprotos["restore_include_path"] = "void restore_include_path()"
let s:phpprotos["print_r"] = "mixed print_r(mixed var [, bool return])"
let s:phpprotos["connection_aborted"] = "int connection_aborted(void)"
let s:phpprotos["connection_status"] = "int connection_status(void)"
let s:phpprotos["ignore_user_abort"] = "int ignore_user_abort(bool value)"
let s:phpprotos["getservbyname"] = "int getservbyname(string service, string protocol)"
let s:phpprotos["getservbyport"] = "string getservbyport(int port, string protocol)"
let s:phpprotos["getprotobyname"] = "int getprotobyname(string name)"
let s:phpprotos["getprotobynumber"] = "string getprotobynumber(int proto)"
let s:phpprotos["register_tick_function"] = "bool register_tick_function(string function_name [, mixed arg [, mixed ... ]])"
let s:phpprotos["unregister_tick_function"] = "void unregister_tick_function(string function_name)"
let s:phpprotos["is_uploaded_file"] = "bool is_uploaded_file(string path)"
let s:phpprotos["move_uploaded_file"] = "bool move_uploaded_file(string path, string new_path)"
let s:phpprotos["parse_ini_file"] = "array parse_ini_file(string filename [, bool process_sections])"
let s:phpprotos["import_request_variables"] = "bool import_request_variables(string types [, string prefix])"
let s:phpprotos["sys_getloadavg"] = "array sys_getloadavg()"
let s:phpprotos["get_browser"] = "mixed get_browser([string browser_name [, bool return_array]])"
let s:phpprotos["convert_uuencode"] = "string convert_uuencode(string data) "
let s:phpprotos["convert_uudecode"] = "string convert_uudecode(string data)"
let s:phpprotos["levenshtein"] = "int levenshtein(string str1, string str2[, int cost_ins, int cost_rep, int cost_del])"
let s:phpprotos["proc_terminate"] = "bool proc_terminate(resource process [, long signal])"
let s:phpprotos["proc_close"] = "int proc_close(resource process)"
let s:phpprotos["proc_get_status"] = "array proc_get_status(resource process)"
let s:phpprotos["proc_open"] = "resource proc_open(string command, array descriptorspec, array &pipes [, string cwd [, array env [, array other_options]]])"
let s:phpprotos["strptime"] = "string strptime(string timestamp, string format)"
let s:phpprotos["convert_cyr_string"] = "string convert_cyr_string(string str, string from, string to)"
let s:phpprotos["getmyuid"] = "int getmyuid(void)"
let s:phpprotos["getmygid"] = "int getmygid(void)"
let s:phpprotos["getmypid"] = "int getmypid(void)"
let s:phpprotos["getmyinode"] = "int getmyinode(void)"
let s:phpprotos["getlastmod"] = "int getlastmod(void)"
let s:phpprotos["flock"] = "bool flock(resource fp, int operation [, int &wouldblock])"
let s:phpprotos["get_meta_tags"] = "array get_meta_tags(string filename [, bool use_include_path])"
let s:phpprotos["file_get_contents"] = "string file_get_contents(string filename [, bool use_include_path [, resource context [, long offset [, long maxlen]]]])"
let s:phpprotos["file_put_contents"] = "int file_put_contents(string file, mixed data [, int flags [, resource context]])"
let s:phpprotos["file"] = "array file(string filename [, int flags[, resource context]])"
let s:phpprotos["tempnam"] = "string tempnam(string dir, string prefix)"
let s:phpprotos["tmpfile"] = "resource tmpfile(void)"
let s:phpprotos["fopen"] = "resource fopen(string filename, string mode [, bool use_include_path [, resource context]])"
let s:phpprotos["fclose"] = "bool fclose(resource fp)"
let s:phpprotos["popen"] = "resource popen(string command, string mode)"
let s:phpprotos["pclose"] = "int pclose(resource fp)"
let s:phpprotos["feof"] = "bool feof(resource fp)"
let s:phpprotos["fgets"] = "string fgets(resource fp[, int length])"
let s:phpprotos["fgetc"] = "string fgetc(resource fp)"
let s:phpprotos["fgetss"] = "string fgetss(resource fp [, int length, string allowable_tags])"
let s:phpprotos["fscanf"] = "mixed fscanf(resource stream, string format [, string ...])"
let s:phpprotos["fwrite"] = "int fwrite(resource fp, string str [, int length])"
let s:phpprotos["fflush"] = "bool fflush(resource fp)"
let s:phpprotos["rewind"] = "bool rewind(resource fp)"
let s:phpprotos["ftell"] = "int ftell(resource fp)"
let s:phpprotos["fseek"] = "int fseek(resource fp, int offset [, int whence])"
let s:phpprotos["mkdir"] = "bool mkdir(string pathname [, int mode [, bool recursive [, resource context]]])"
let s:phpprotos["rmdir"] = "bool rmdir(string dirname[, resource context])"
let s:phpprotos["readfile"] = "int readfile(string filename [, bool use_include_path[, resource context]])"
let s:phpprotos["umask"] = "int umask([int mask])"
let s:phpprotos["fpassthru"] = "int fpassthru(resource fp)"
let s:phpprotos["rename"] = "bool rename(string old_name, string new_name[, resource context])"
let s:phpprotos["unlink"] = "bool unlink(string filename[, context context])"
let s:phpprotos["ftruncate"] = "bool ftruncate(resource fp, int size)"
let s:phpprotos["fstat"] = "array fstat(resource fp)"
let s:phpprotos["copy"] = "bool copy(string source_file, string destination_file)"
let s:phpprotos["fread"] = "string fread(resource fp, int length)"
let s:phpprotos["fputcsv"] = "int fputcsv(resource fp, array fields [, string delimiter [, string enclosure]])"
let s:phpprotos["fgetcsv"] = "array fgetcsv(resource fp [,int length [, string delimiter [, string enclosure]]])"
let s:phpprotos["realpath"] = "string realpath(string path)"
let s:phpprotos["fnmatch"] = "bool fnmatch(string pattern, string filename [, int flags])"
let s:phpprotos["sys_get_temp_dir"] = "string sys_get_temp_dir()"
let s:phpprotos["exec"] = "string exec(string command [, array &output [, int &return_value]])"
let s:phpprotos["system"] = "int system(string command [, int &return_value])"
let s:phpprotos["passthru"] = "void passthru(string command [, int &return_value])"
let s:phpprotos["escapeshellcmd"] = "string escapeshellcmd(string command)"
let s:phpprotos["escapeshellarg"] = "string escapeshellarg(string arg)"
let s:phpprotos["shell_exec"] = "string shell_exec(string cmd)"
let s:phpprotos["proc_nice"] = "bool proc_nice(int priority)"
let s:phpprotos["ftok"] = "int ftok(string pathname, string proj)"
let s:phpprotos["header"] = "void header(string header [, bool replace, [int http_response_code]])"
let s:phpprotos["setcookie"] = "bool setcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure[, bool httponly]]]]]])"
let s:phpprotos["setrawcookie"] = "bool setrawcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure[, bool httponly]]]]]])"
let s:phpprotos["headers_sent"] = "bool headers_sent([string &$file [, int &$line]])"
let s:phpprotos["headers_list"] = "array headers_list(void)"
let s:phpprotos["htmlspecialchars"] = "string htmlspecialchars(string string [, int quote_style[, string charset[, bool double_encode]]])"
let s:phpprotos["htmlspecialchars_decode"] = "string htmlspecialchars_decode(string string [, int quote_style])"
let s:phpprotos["html_entity_decode"] = "string html_entity_decode(string string [, int quote_style][, string charset])"
let s:phpprotos["htmlentities"] = "string htmlentities(string string [, int quote_style[, string charset[, bool double_encode]]])"
let s:phpprotos["get_html_translation_table"] = "array get_html_translation_table([int table [, int quote_style]])"
let s:phpprotos["http_build_query"] = "string http_build_query(mixed formdata [, string prefix [, string arg_separator]])"
let s:phpprotos["soundex"] = "string soundex(string str)"
let s:phpprotos["fsockopen"] = "resource fsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])"
let s:phpprotos["pfsockopen"] = "resource pfsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])"
let s:phpprotos["phpinfo"] = "void phpinfo([int what])"
let s:phpprotos["phpversion"] = "string phpversion([string extension])"
let s:phpprotos["phpcredits"] = "void phpcredits([int flag])"
let s:phpprotos["php_logo_guid"] = "string php_logo_guid(void)"
let s:phpprotos["php_real_logo_guid"] = "string php_real_logo_guid(void)"
let s:phpprotos["php_egg_logo_guid"] = "string php_egg_logo_guid(void)"
let s:phpprotos["zend_logo_guid"] = "string zend_logo_guid(void)"
let s:phpprotos["php_sapi_name"] = "string php_sapi_name(void)"
let s:phpprotos["php_uname"] = "string php_uname(void)"
let s:phpprotos["php_ini_scanned_files"] = "string php_ini_scanned_files(void)"
let s:phpprotos["php_ini_loaded_file"] = "string php_ini_loaded_file(void)"
let s:phpprotos["iptcembed"] = "array iptcembed(string iptcdata, string jpeg_file_name [, int spool])"
let s:phpprotos["iptcparse"] = "array iptcparse(string iptcdata)"
let s:phpprotos["disk_total_space"] = "float disk_total_space(string path)"
let s:phpprotos["disk_free_space"] = "float disk_free_space(string path)"
let s:phpprotos["chgrp"] = "bool chgrp(string filename, mixed group)"
let s:phpprotos["lchgrp"] = "bool lchgrp(string filename, mixed group)"
let s:phpprotos["bool chown "] = "bool chown (string filename, mixed user)"
let s:phpprotos["bool chown "] = "bool chown (string filename, mixed user)"
let s:phpprotos["chmod"] = "bool chmod(string filename, int mode)"
let s:phpprotos["touch"] = "bool touch(string filename [, int time [, int atime]])"
let s:phpprotos["clearstatcache"] = "void clearstatcache(void)"
let s:phpprotos["fileperms"] = "int fileperms(string filename)"
let s:phpprotos["fileinode"] = "int fileinode(string filename)"
let s:phpprotos["filesize"] = "int filesize(string filename)"
let s:phpprotos["fileowner"] = "int fileowner(string filename)"
let s:phpprotos["filegroup"] = "int filegroup(string filename)"
let s:phpprotos["fileatime"] = "int fileatime(string filename)"
let s:phpprotos["filemtime"] = "int filemtime(string filename)"
let s:phpprotos["filectime"] = "int filectime(string filename)"
let s:phpprotos["filetype"] = "string filetype(string filename)"
let s:phpprotos["is_writable"] = "bool is_writable(string filename)"
let s:phpprotos["is_readable"] = "bool is_readable(string filename)"
let s:phpprotos["is_executable"] = "bool is_executable(string filename)"
let s:phpprotos["is_file"] = "bool is_file(string filename)"
let s:phpprotos["is_dir"] = "bool is_dir(string filename)"
let s:phpprotos["is_link"] = "bool is_link(string filename)"
let s:phpprotos["file_exists"] = "bool file_exists(string filename)"
let s:phpprotos["lstat"] = "array lstat(string filename)"
let s:phpprotos["stat"] = "array stat(string filename)"
let s:phpprotos["readlink"] = "string readlink(string filename)"
let s:phpprotos["linkinfo"] = "int linkinfo(string filename)"
let s:phpprotos["symlink"] = "int symlink(string target, string link)"
let s:phpprotos["link"] = "int link(string target, string link)"
let s:phpprotos["ezmlm_hash"] = "int ezmlm_hash(string addr)"
let s:phpprotos["mail"] = "int mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])"
let s:phpprotos["abs"] = "int abs(int number)"
let s:phpprotos["ceil"] = "float ceil(float number)"
let s:phpprotos["floor"] = "float floor(float number)"
let s:phpprotos["round"] = "float round(float number [, int precision])"
let s:phpprotos["sin"] = "float sin(float number)"
let s:phpprotos["cos"] = "float cos(float number)"
let s:phpprotos["tan"] = "float tan(float number)"
let s:phpprotos["asin"] = "float asin(float number)"
let s:phpprotos["acos"] = "float acos(float number)"
let s:phpprotos["atan"] = "float atan(float number)"
let s:phpprotos["atan2"] = "float atan2(float y, float x)"
let s:phpprotos["sinh"] = "float sinh(float number)"
let s:phpprotos["cosh"] = "float cosh(float number)"
let s:phpprotos["tanh"] = "float tanh(float number)"
let s:phpprotos["asinh"] = "float asinh(float number)"
let s:phpprotos["acosh"] = "float acosh(float number)"
let s:phpprotos["atanh"] = "float atanh(float number)"
let s:phpprotos["pi"] = "float pi(void)"
let s:phpprotos["is_finite"] = "bool is_finite(float val)"
let s:phpprotos["is_infinite"] = "bool is_infinite(float val)"
let s:phpprotos["is_nan"] = "bool is_nan(float val)"
let s:phpprotos["pow"] = "number pow(number base, number exponent)"
let s:phpprotos["exp"] = "float exp(float number)"
let s:phpprotos["expm1"] = "float expm1(float number)"
let s:phpprotos["log1p"] = "float log1p(float number)"
let s:phpprotos["log"] = "float log(float number, [float base])"
let s:phpprotos["log10"] = "float log10(float number)"
let s:phpprotos["sqrt"] = "float sqrt(float number)"
let s:phpprotos["hypot"] = "float hypot(float num1, float num2)"
let s:phpprotos["deg2rad"] = "float deg2rad(float number)"
let s:phpprotos["rad2deg"] = "float rad2deg(float number)"
let s:phpprotos["bindec"] = "int bindec(string binary_number)"
let s:phpprotos["hexdec"] = "int hexdec(string hexadecimal_number)"
let s:phpprotos["octdec"] = "int octdec(string octal_number)"
let s:phpprotos["decbin"] = "string decbin(int decimal_number)"
let s:phpprotos["decoct"] = "string decoct(int decimal_number)"
let s:phpprotos["dechex"] = "string dechex(int decimal_number)"
let s:phpprotos["base_convert"] = "string base_convert(string number, int frombase, int tobase)"
let s:phpprotos["number_format"] = "string number_format(float number [, int num_decimal_places [, string dec_seperator, string thousands_seperator]])"
let s:phpprotos["fmod"] = "float fmod(float x, float y)"
let s:phpprotos["microtime"] = "mixed microtime([bool get_as_float])"
let s:phpprotos["gettimeofday"] = "array gettimeofday([bool get_as_float])"
let s:phpprotos["getrusage"] = "array getrusage([int who])"
let s:phpprotos["pack"] = "string pack(string format, mixed arg1 [, mixed arg2 [, mixed ...]])"
let s:phpprotos["unpack"] = "array unpack(string format, string input)"
let s:phpprotos["srand"] = "void srand([int seed])"
let s:phpprotos["mt_srand"] = "void mt_srand([int seed])"
let s:phpprotos["rand"] = "int rand([int min, int max])"
let s:phpprotos["mt_rand"] = "int mt_rand([int min, int max])"
let s:phpprotos["getrandmax"] = "int getrandmax(void)"
let s:phpprotos["mt_getrandmax"] = "int mt_getrandmax(void)"
let s:phpprotos["sha1"] = "string sha1(string str [, bool raw_output])"
let s:phpprotos["sha1_file"] = "string sha1_file(string filename [, bool raw_output])"
let s:phpprotos["define_syslog_variables"] = "void define_syslog_variables(void)"
let s:phpprotos["openlog"] = "bool openlog(string ident, int option, int facility)"
let s:phpprotos["closelog"] = "bool closelog(void)"
let s:phpprotos["syslog"] = "bool syslog(int priority, string message)"
let s:phpprotos["gettype"] = "string gettype(mixed var)"
let s:phpprotos["settype"] = "bool settype(mixed var, string type)"
let s:phpprotos["intval"] = "int intval(mixed var [, int base])"
let s:phpprotos["floatval"] = "float floatval(mixed var)"
let s:phpprotos["strval"] = "string strval(mixed var)"
let s:phpprotos["is_null"] = "bool is_null(mixed var)"
let s:phpprotos["is_resource"] = "bool is_resource(mixed var)"
let s:phpprotos["is_bool"] = "bool is_bool(mixed var)"
let s:phpprotos["is_long"] = "bool is_long(mixed var)"
let s:phpprotos["is_float"] = "bool is_float(mixed var)"
let s:phpprotos["is_string"] = "bool is_string(mixed var)"
let s:phpprotos["is_array"] = "bool is_array(mixed var)"
let s:phpprotos["is_object"] = "bool is_object(mixed var)"
let s:phpprotos["is_numeric"] = "bool is_numeric(mixed value)"
let s:phpprotos["is_scalar"] = "bool is_scalar(mixed value)"
let s:phpprotos["is_callable"] = "bool is_callable(mixed var [, bool syntax_only [, string callable_name]]) "
let s:phpprotos["stream_bucket_make_writeable"] = "object stream_bucket_make_writeable(resource brigade)"
let s:phpprotos["stream_bucket_prepend"] = "void stream_bucket_prepend(resource brigade, resource bucket)"
let s:phpprotos["stream_bucket_append"] = "void stream_bucket_append(resource brigade, resource bucket)"
let s:phpprotos["stream_bucket_new"] = "resource stream_bucket_new(resource stream, string buffer)"
let s:phpprotos["stream_get_filters"] = "array stream_get_filters(void)"
let s:phpprotos["stream_filter_register"] = "bool stream_filter_register(string filtername, string classname)"
let s:phpprotos["stream_socket_pair"] = "array stream_socket_pair(int domain, int type, int protocol)"
let s:phpprotos["stream_socket_client"] = "resource stream_socket_client(string remoteaddress [, long &errcode, string &errstring, double timeout, long flags, resource context])"
let s:phpprotos["stream_socket_server"] = "resource stream_socket_server(string localaddress [, long &errcode, string &errstring, long flags, resource context])"
let s:phpprotos["stream_socket_accept"] = "resource stream_socket_accept(resource serverstream, [ double timeout, string &peername ])"
let s:phpprotos["stream_socket_get_name"] = "string stream_socket_get_name(resource stream, bool want_peer)"
let s:phpprotos["stream_socket_sendto"] = "long stream_socket_sendto(resouce stream, string data [, long flags [, string target_addr]])"
let s:phpprotos["stream_socket_recvfrom"] = "string stream_socket_recvfrom(resource stream, long amount [, long flags [, string &remote_addr]])"
let s:phpprotos["stream_get_contents"] = "long stream_get_contents(resource source [, long maxlen [, long offset]])"
let s:phpprotos["stream_copy_to_stream"] = "long stream_copy_to_stream(resource source, resource dest [, long maxlen [, long pos]])"
let s:phpprotos["stream_get_meta_data"] = "array stream_get_meta_data(resource fp)"
let s:phpprotos["stream_get_transports"] = "array stream_get_transports()"
let s:phpprotos["stream_get_wrappers"] = "array stream_get_wrappers()"
let s:phpprotos["stream_select"] = "int stream_select(array &read_streams, array &write_streams, array &except_streams, int tv_sec[, int tv_usec])"
let s:phpprotos["stream_context_get_options"] = "array stream_context_get_options(resource context|resource stream)"
let s:phpprotos["stream_context_set_option"] = "bool stream_context_set_option(resource context|resource stream, string wrappername, string optionname, mixed value)"
let s:phpprotos["stream_context_set_params"] = "bool stream_context_set_params(resource context|resource stream, array options)"
let s:phpprotos["stream_context_get_default"] = "resource stream_context_get_default([array options])"
let s:phpprotos["stream_context_create"] = "resource stream_context_create([array options])"
let s:phpprotos["stream_filter_prepend"] = "resource stream_filter_prepend(resource stream, string filtername[, int read_write[, string filterparams]])"
let s:phpprotos["stream_filter_append"] = "resource stream_filter_append(resource stream, string filtername[, int read_write[, string filterparams]])"
let s:phpprotos["stream_filter_remove"] = "bool stream_filter_remove(resource stream_filter)"
let s:phpprotos["stream_get_line"] = "string stream_get_line(resource stream, int maxlen [, string ending])"
let s:phpprotos["stream_set_blocking"] = "bool stream_set_blocking(resource socket, int mode)"
let s:phpprotos["stream_set_timeout"] = "bool stream_set_timeout(resource stream, int seconds, int microseconds)"
let s:phpprotos["stream_set_write_buffer"] = "int stream_set_write_buffer(resource fp, int buffer)"
let s:phpprotos["stream_socket_enable_crypto"] = "int stream_socket_enable_crypto(resource stream, bool enable [, int cryptokind, resource sessionstream])"
let s:phpprotos["stream_is_local"] = "bool stream_is_local(resource stream|string url) U"
let s:phpprotos["stream_socket_shutdown"] = "int stream_socket_shutdown(resource stream, int how)"
let s:phpprotos["krsort"] = "bool krsort(array &array_arg [, int sort_flags])"
let s:phpprotos["ksort"] = "bool ksort(array &array_arg [, int sort_flags])"
let s:phpprotos["count"] = "int count(mixed var [, int mode])"
let s:phpprotos["natsort"] = "void natsort(array &array_arg)"
let s:phpprotos["natcasesort"] = "void natcasesort(array &array_arg)"
let s:phpprotos["asort"] = "bool asort(array &array_arg [, int sort_flags])"
let s:phpprotos["arsort"] = "bool arsort(array &array_arg [, int sort_flags])"
let s:phpprotos["sort"] = "bool sort(array &array_arg [, int sort_flags])"
let s:phpprotos["rsort"] = "bool rsort(array &array_arg [, int sort_flags])"
let s:phpprotos["usort"] = "bool usort(array array_arg, string cmp_function)"
let s:phpprotos["uasort"] = "bool uasort(array array_arg, string cmp_function)"
let s:phpprotos["uksort"] = "bool uksort(array array_arg, string cmp_function)"
let s:phpprotos["end"] = "mixed end(array array_arg)"
let s:phpprotos["prev"] = "mixed prev(array array_arg)"
let s:phpprotos["next"] = "mixed next(array array_arg)"
let s:phpprotos["reset"] = "mixed reset(array array_arg)"
let s:phpprotos["current"] = "mixed current(array array_arg)"
let s:phpprotos["key"] = "mixed key(array array_arg)"
let s:phpprotos["min"] = "mixed min(mixed arg1 [, mixed arg2 [, mixed ...]])"
let s:phpprotos["max"] = "mixed max(mixed arg1 [, mixed arg2 [, mixed ...]])"
let s:phpprotos["array_walk"] = "bool array_walk(array input, string funcname [, mixed userdata])"
let s:phpprotos["array_walk_recursive"] = "bool array_walk_recursive(array input, string funcname [, mixed userdata])"
let s:phpprotos["in_array"] = "bool in_array(mixed needle, array haystack [, bool strict])"
let s:phpprotos["array_search"] = "mixed array_search(mixed needle, array haystack [, bool strict])"
let s:phpprotos["extract"] = "int extract(array var_array [, int extract_type [, string prefix]])"
let s:phpprotos["compact"] = "array compact(mixed var_names [, mixed ...])"
let s:phpprotos["array_fill"] = "array array_fill(int start_key, int num, mixed val)"
let s:phpprotos["array_fill_keys"] = "array array_fill_keys(array keys, mixed val)"
let s:phpprotos["range"] = "array range(mixed low, mixed high[, int step])"
let s:phpprotos["shuffle"] = "bool shuffle(array array_arg)"
let s:phpprotos["array_push"] = "int array_push(array stack, mixed var [, mixed ...])"
let s:phpprotos["array_pop"] = "mixed array_pop(array stack)"
let s:phpprotos["array_shift"] = "mixed array_shift(array stack)"
let s:phpprotos["array_unshift"] = "int array_unshift(array stack, mixed var [, mixed ...])"
let s:phpprotos["array_splice"] = "array array_splice(array input, int offset [, int length [, array replacement]])"
let s:phpprotos["array_slice"] = "array array_slice(array input, int offset [, int length [, bool preserve_keys]])"
let s:phpprotos["array_merge"] = "array array_merge(array arr1, array arr2 [, array ...])"
let s:phpprotos["array_merge_recursive"] = "array array_merge_recursive(array arr1, array arr2 [, array ...])"
let s:phpprotos["array_keys"] = "array array_keys(array input [, mixed search_value[, bool strict]])"
let s:phpprotos["array_values"] = "array array_values(array input)"
let s:phpprotos["array_count_values"] = "array array_count_values(array input)"
let s:phpprotos["array_reverse"] = "array array_reverse(array input [, bool preserve keys])"
let s:phpprotos["array_pad"] = "array array_pad(array input, int pad_size, mixed pad_value)"
let s:phpprotos["array_flip"] = "array array_flip(array input)"
let s:phpprotos["array_change_key_case"] = "array array_change_key_case(array input [, int case=CASE_LOWER])"
let s:phpprotos["array_unique"] = "array array_unique(array input)"
let s:phpprotos["array_intersect_key"] = "array array_intersect_key(array arr1, array arr2 [, array ...])"
let s:phpprotos["array_intersect_ukey"] = "array array_intersect_ukey(array arr1, array arr2 [, array ...], callback key_compare_func)"
let s:phpprotos["array_intersect"] = "array array_intersect(array arr1, array arr2 [, array ...])"
let s:phpprotos["array_uintersect"] = "array array_uintersect(array arr1, array arr2 [, array ...], callback data_compare_func)"
let s:phpprotos["array_intersect_assoc"] = "array array_intersect_assoc(array arr1, array arr2 [, array ...])"
let s:phpprotos["array_uintersect_assoc"] = "array array_uintersect_assoc(array arr1, array arr2 [, array ...], callback data_compare_func)"
let s:phpprotos["array_intersect_uassoc"] = "array array_intersect_uassoc(array arr1, array arr2 [, array ...], callback key_compare_func)"
let s:phpprotos["array_uintersect_uassoc"] = "array array_uintersect_uassoc(array arr1, array arr2 [, array ...], callback data_compare_func, callback key_compare_func)"
let s:phpprotos["array_diff_key"] = "array array_diff_key(array arr1, array arr2 [, array ...])"
let s:phpprotos["array_diff_ukey"] = "array array_diff_ukey(array arr1, array arr2 [, array ...], callback key_comp_func)"
let s:phpprotos["array_diff"] = "array array_diff(array arr1, array arr2 [, array ...])"
let s:phpprotos["array_udiff"] = "array array_udiff(array arr1, array arr2 [, array ...], callback data_comp_func)"
let s:phpprotos["array_diff_assoc"] = "array array_diff_assoc(array arr1, array arr2 [, array ...])"
let s:phpprotos["array_diff_uassoc"] = "array array_diff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func)"
let s:phpprotos["array_udiff_assoc"] = "array array_udiff_assoc(array arr1, array arr2 [, array ...], callback key_comp_func)"
let s:phpprotos["array_udiff_uassoc"] = "array array_udiff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func, callback key_comp_func)"
let s:phpprotos["array_multisort"] = "bool array_multisort(array ar1 [, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]] [, array ar2 [, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]], ...])"
let s:phpprotos["array_rand"] = "mixed array_rand(array input [, int num_req])"
let s:phpprotos["array_sum"] = "mixed array_sum(array input)"
let s:phpprotos["array_product"] = "mixed array_product(array input)"
let s:phpprotos["array_reduce"] = "mixed array_reduce(array input, mixed callback [, int initial])"
let s:phpprotos["array_filter"] = "array array_filter(array input [, mixed callback])"
let s:phpprotos["array_map"] = "array array_map(mixed callback, array input1 [, array input2 ,...])"
let s:phpprotos["array_key_exists"] = "bool array_key_exists(mixed key, array search)"
let s:phpprotos["array_chunk"] = "array array_chunk(array input, int size [, bool preserve_keys])"
let s:phpprotos["array_combine"] = "array array_combine(array keys, array values)"
let s:phpprotos["image_type_to_mime_type"] = "string image_type_to_mime_type(int imagetype)"
let s:phpprotos["image_type_to_extension"] = "string image_type_to_extension(int imagetype [, bool include_dot])"
let s:phpprotos["getimagesize"] = "array getimagesize(string imagefile [, array info])"
let s:phpprotos["base64_encode"] = "string base64_encode(string str)"
let s:phpprotos["base64_decode"] = "string base64_decode(string str[, bool strict])"
let s:phpprotos["bin2hex"] = "string bin2hex(string data)"
let s:phpprotos["strspn"] = "int strspn(string str, string mask [, start [, len]])"
let s:phpprotos["strcspn"] = "int strcspn(string str, string mask [, start [, len]])"
let s:phpprotos["nl_langinfo"] = "string nl_langinfo(int item)"
let s:phpprotos["strcoll"] = "int strcoll(string str1, string str2)"
let s:phpprotos["trim"] = "string trim(string str [, string character_mask])"
let s:phpprotos["rtrim"] = "string rtrim(string str [, string character_mask])"
let s:phpprotos["ltrim"] = "string ltrim(string str [, string character_mask])"
let s:phpprotos["wordwrap"] = "string wordwrap(string str [, int width [, string break [, boolean cut]]])"
let s:phpprotos["explode"] = "array explode(string separator, string str [, int limit])"
let s:phpprotos["join"] = "string join(array src, string glue)"
let s:phpprotos["implode"] = "string implode([string glue,] array pieces)"
let s:phpprotos["strtok"] = "string strtok([string str,] string token)"
let s:phpprotos["strtoupper"] = "string strtoupper(string str)"
let s:phpprotos["strtolower"] = "string strtolower(string str)"
let s:phpprotos["basename"] = "string basename(string path [, string suffix])"
let s:phpprotos["dirname"] = "string dirname(string path)"
let s:phpprotos["pathinfo"] = "array pathinfo(string path[, int options])"
let s:phpprotos["stristr"] = "string stristr(string haystack, string needle)"
let s:phpprotos["strstr"] = "string strstr(string haystack, string needle)"
let s:phpprotos["strchr"] = "string strchr(string haystack, string needle)"
let s:phpprotos["strpos"] = "int strpos(string haystack, string needle [, int offset])"
let s:phpprotos["stripos"] = "int stripos(string haystack, string needle [, int offset])"
let s:phpprotos["strrpos"] = "int strrpos(string haystack, string needle [, int offset])"
let s:phpprotos["strripos"] = "int strripos(string haystack, string needle [, int offset])"
let s:phpprotos["strrchr"] = "string strrchr(string haystack, string needle)"
let s:phpprotos["chunk_split"] = "string chunk_split(string str [, int chunklen [, string ending]])"
let s:phpprotos["substr"] = "string substr(string str, int start [, int length])"
let s:phpprotos["substr_replace"] = "mixed substr_replace(mixed str, mixed repl, mixed start [, mixed length])"
let s:phpprotos["quotemeta"] = "string quotemeta(string str)"
let s:phpprotos["ord"] = "int ord(string character)"
let s:phpprotos["chr"] = "string chr(int ascii)"
let s:phpprotos["ucfirst"] = "string ucfirst(string str)"
let s:phpprotos["ucwords"] = "string ucwords(string str)"
let s:phpprotos["strtr"] = "string strtr(string str, string from[, string to])"
let s:phpprotos["strrev"] = "string strrev(string str)"
let s:phpprotos["similar_text"] = "int similar_text(string str1, string str2 [, float percent])"
let s:phpprotos["addcslashes"] = "string addcslashes(string str, string charlist)"
let s:phpprotos["addslashes"] = "string addslashes(string str)"
let s:phpprotos["stripcslashes"] = "string stripcslashes(string str)"
let s:phpprotos["stripslashes"] = "string stripslashes(string str)"
let s:phpprotos["str_replace"] = "mixed str_replace(mixed search, mixed replace, mixed subject [, int &replace_count])"
let s:phpprotos["str_ireplace"] = "mixed str_ireplace(mixed search, mixed replace, mixed subject [, int &replace_count])"
let s:phpprotos["hebrev"] = "string hebrev(string str [, int max_chars_per_line])"
let s:phpprotos["hebrevc"] = "string hebrevc(string str [, int max_chars_per_line])"
let s:phpprotos["nl2br"] = "string nl2br(string str)"
let s:phpprotos["strip_tags"] = "string strip_tags(string str [, string allowable_tags])"
let s:phpprotos["setlocale"] = "string setlocale(mixed category, string locale [, string ...])"
let s:phpprotos["parse_str"] = "void parse_str(string encoded_string [, array result])"
let s:phpprotos["str_repeat"] = "string str_repeat(string input, int mult)"
let s:phpprotos["count_chars"] = "mixed count_chars(string input [, int mode])"
let s:phpprotos["strnatcmp"] = "int strnatcmp(string s1, string s2)"
let s:phpprotos["localeconv"] = "array localeconv(void)"
let s:phpprotos["strnatcasecmp"] = "int strnatcasecmp(string s1, string s2)"
let s:phpprotos["substr_count"] = "int substr_count(string haystack, string needle [, int offset [, int length]])"
let s:phpprotos["str_pad"] = "string str_pad(string input, int pad_length [, string pad_string [, int pad_type]])"
let s:phpprotos["sscanf"] = "mixed sscanf(string str, string format [, string ...])"
let s:phpprotos["str_rot13"] = "string str_rot13(string str)"
let s:phpprotos["str_shuffle"] = "void str_shuffle(string str)"
let s:phpprotos["str_word_count"] = "mixed str_word_count(string str, [int format [, string charlist]])"
let s:phpprotos["money_format"] = "string money_format(string format , float value)"
let s:phpprotos["str_split"] = "array str_split(string str [, int split_length])"
let s:phpprotos["strpbrk"] = "array strpbrk(string haystack, string char_list)"
let s:phpprotos["substr_compare"] = "int substr_compare(string main_str, string str, int offset [, int length [, bool case_sensitivity]])"
let s:phpprotos["assert"] = "int assert(string|bool assertion)"
let s:phpprotos["assert_options"] = "mixed assert_options(int what [, mixed value])"
let s:phpprotos["xmlrpc_encode_request"] = "string xmlrpc_encode_request(string method, mixed params)"
let s:phpprotos["xmlrpc_encode"] = "string xmlrpc_encode(mixed value)"
let s:phpprotos["xmlrpc_decode_request"] = "array xmlrpc_decode_request(string xml, string& method [, string encoding])"
let s:phpprotos["xmlrpc_decode"] = "array xmlrpc_decode(string xml [, string encoding])"
let s:phpprotos["xmlrpc_server_create"] = "resource xmlrpc_server_create(void)"
let s:phpprotos["xmlrpc_server_destroy"] = "int xmlrpc_server_destroy(resource server)"
let s:phpprotos["xmlrpc_server_register_method"] = "bool xmlrpc_server_register_method(resource server, string method_name, string function)"
let s:phpprotos["xmlrpc_server_register_introspection_callback"] = "bool xmlrpc_server_register_introspection_callback(resource server, string function)"
let s:phpprotos["xmlrpc_server_call_method"] = "mixed xmlrpc_server_call_method(resource server, string xml, mixed user_data [, array output_options])"
let s:phpprotos["xmlrpc_server_add_introspection_data"] = "int xmlrpc_server_add_introspection_data(resource server, array desc)"
let s:phpprotos["xmlrpc_parse_method_descriptions"] = "array xmlrpc_parse_method_descriptions(string xml)"
let s:phpprotos["xmlrpc_set_type"] = "bool xmlrpc_set_type(string value, string type)"
let s:phpprotos["xmlrpc_get_type"] = "string xmlrpc_get_type(mixed value)"
let s:phpprotos["xmlrpc_is_fault"] = "bool xmlrpc_is_fault(array)"
let s:phpprotos["variant_set"] = "void variant_set(object variant, mixed value)"
let s:phpprotos["variant_add"] = "mixed variant_add(mixed left, mixed right)"
let s:phpprotos["variant_cat"] = "mixed variant_cat(mixed left, mixed right)"
let s:phpprotos["variant_sub"] = "mixed variant_sub(mixed left, mixed right)"
let s:phpprotos["variant_mul"] = "mixed variant_mul(mixed left, mixed right)"
let s:phpprotos["variant_and"] = "mixed variant_and(mixed left, mixed right)"
let s:phpprotos["variant_div"] = "mixed variant_div(mixed left, mixed right)"
let s:phpprotos["variant_eqv"] = "mixed variant_eqv(mixed left, mixed right)"
let s:phpprotos["variant_idiv"] = "mixed variant_idiv(mixed left, mixed right)"
let s:phpprotos["variant_imp"] = "mixed variant_imp(mixed left, mixed right)"
let s:phpprotos["variant_mod"] = "mixed variant_mod(mixed left, mixed right)"
let s:phpprotos["variant_or"] = "mixed variant_or(mixed left, mixed right)"
let s:phpprotos["variant_pow"] = "mixed variant_pow(mixed left, mixed right)"
let s:phpprotos["variant_xor"] = "mixed variant_xor(mixed left, mixed right)"
let s:phpprotos["variant_abs"] = "mixed variant_abs(mixed left)"
let s:phpprotos["variant_fix"] = "mixed variant_fix(mixed left)"
let s:phpprotos["variant_int"] = "mixed variant_int(mixed left)"
let s:phpprotos["variant_neg"] = "mixed variant_neg(mixed left)"
let s:phpprotos["variant_not"] = "mixed variant_not(mixed left)"
let s:phpprotos["variant_round"] = "mixed variant_round(mixed left, int decimals)"
let s:phpprotos["variant_cmp"] = "int variant_cmp(mixed left, mixed right [, int lcid [, int flags]])"
let s:phpprotos["variant_date_to_timestamp"] = "int variant_date_to_timestamp(object variant)"
let s:phpprotos["variant_date_from_timestamp"] = "object variant_date_from_timestamp(int timestamp)"
let s:phpprotos["variant_get_type"] = "int variant_get_type(object variant)"
let s:phpprotos["variant_set_type"] = "void variant_set_type(object variant, int type)"
let s:phpprotos["variant_cast"] = "object variant_cast(object variant, int type)"
let s:phpprotos["COMPersistHelper::GetCurFile"] = "string COMPersistHelper::GetCurFile()"
let s:phpprotos["COMPersistHelper::SaveToFile"] = "bool COMPersistHelper::SaveToFile(string filename [, bool remember])"
let s:phpprotos["COMPersistHelper::LoadFromFile"] = "bool COMPersistHelper::LoadFromFile(string filename [, int flags])"
let s:phpprotos["COMPersistHelper::GetMaxStreamSize"] = "int COMPersistHelper::GetMaxStreamSize()"
let s:phpprotos["COMPersistHelper::InitNew"] = "int COMPersistHelper::InitNew()"
let s:phpprotos["COMPersistHelper::LoadFromStream"] = "mixed COMPersistHelper::LoadFromStream(resource stream)"
let s:phpprotos["COMPersistHelper::SaveToStream"] = "int COMPersistHelper::SaveToStream(resource stream)"
let s:phpprotos["COMPersistHelper::__construct"] = "int COMPersistHelper::__construct([object com_object])"
let s:phpprotos["com_get_active_object"] = "object com_get_active_object(string progid [, int code_page ])"
let s:phpprotos["com_create_guid"] = "string com_create_guid()"
let s:phpprotos["com_event_sink"] = "bool com_event_sink(object comobject, object sinkobject [, mixed sinkinterface])"
let s:phpprotos["com_print_typeinfo"] = "bool com_print_typeinfo(object comobject | string typelib, string dispinterface, bool wantsink)"
let s:phpprotos["com_message_pump"] = "bool com_message_pump([int timeoutms])"
let s:phpprotos["com_load_typelib"] = "bool com_load_typelib(string typelib_name [, int case_insensitive]) "
let s:phpprotos["openssl_x509_export_to_file"] = "bool openssl_x509_export_to_file(mixed x509, string outfilename [, bool notext = true])"
let s:phpprotos["openssl_x509_export"] = "bool openssl_x509_export(mixed x509, string &out [, bool notext = true])"
let s:phpprotos["openssl_x509_check_private_key"] = "bool openssl_x509_check_private_key(mixed cert, mixed key)"
let s:phpprotos["openssl_x509_parse"] = "array openssl_x509_parse(mixed x509 [, bool shortnames=true])"
let s:phpprotos["openssl_x509_checkpurpose"] = "int openssl_x509_checkpurpose(mixed x509cert, int purpose, array cainfo [, string untrustedfile])"
let s:phpprotos["openssl_x509_read"] = "resource openssl_x509_read(mixed cert)"
let s:phpprotos["openssl_x509_free"] = "void openssl_x509_free(resource x509)"
let s:phpprotos["openssl_pkcs12_export_to_file"] = "bool openssl_pkcs12_export_to_file(mixed x509, string filename, mixed priv_key, string pass[, array args])"
let s:phpprotos["openssl_pkcs12_export"] = "bool openssl_pkcs12_export(mixed x509, string &out, mixed priv_key, string pass[, array args])"
let s:phpprotos["openssl_pkcs12_read"] = "bool openssl_pkcs12_read(string PKCS12, array &certs, string pass)"
let s:phpprotos["openssl_csr_export_to_file"] = "bool openssl_csr_export_to_file(resource csr, string outfilename [, bool notext=true])"
let s:phpprotos["openssl_csr_export"] = "bool openssl_csr_export(resource csr, string &out [, bool notext=true])"
let s:phpprotos["openssl_csr_sign"] = "resource openssl_csr_sign(mixed csr, mixed x509, mixed priv_key, long days [, array config_args [, long serial]])"
let s:phpprotos["openssl_csr_new"] = "bool openssl_csr_new(array dn, resource &privkey [, array configargs, array extraattribs])"
let s:phpprotos["openssl_csr_get_subject"] = "mixed openssl_csr_get_subject(mixed csr)"
let s:phpprotos["openssl_csr_get_public_key"] = "mixed openssl_csr_get_public_key(mixed csr)"
let s:phpprotos["openssl_pkey_new"] = "resource openssl_pkey_new([array configargs])"
let s:phpprotos["openssl_pkey_export_to_file"] = "bool openssl_pkey_export_to_file(mixed key, string outfilename [, string passphrase, array config_args)"
let s:phpprotos["openssl_pkey_export"] = "bool openssl_pkey_export(mixed key, &mixed out [, string passphrase [, array config_args]])"
let s:phpprotos["openssl_pkey_get_public"] = "int openssl_pkey_get_public(mixed cert)"
let s:phpprotos["openssl_pkey_free"] = "void openssl_pkey_free(int key)"
let s:phpprotos["openssl_pkey_get_private"] = "int openssl_pkey_get_private(string key [, string passphrase])"
let s:phpprotos["openssl_pkey_get_details"] = "resource openssl_pkey_get_details(resource key)"
let s:phpprotos["openssl_pkcs7_verify"] = "bool openssl_pkcs7_verify(string filename, long flags [, string signerscerts [, array cainfo [, string extracerts [, string content]]]])"
let s:phpprotos["openssl_pkcs7_encrypt"] = "bool openssl_pkcs7_encrypt(string infile, string outfile, mixed recipcerts, array headers [, long flags [, long cipher]])"
let s:phpprotos["openssl_pkcs7_sign"] = "bool openssl_pkcs7_sign(string infile, string outfile, mixed signcert, mixed signkey, array headers [, long flags [, string extracertsfilename]])"
let s:phpprotos["openssl_pkcs7_decrypt"] = "bool openssl_pkcs7_decrypt(string infilename, string outfilename, mixed recipcert [, mixed recipkey])"
let s:phpprotos["openssl_private_encrypt"] = "bool openssl_private_encrypt(string data, string crypted, mixed key [, int padding])"
let s:phpprotos["openssl_private_decrypt"] = "bool openssl_private_decrypt(string data, string decrypted, mixed key [, int padding])"
let s:phpprotos["openssl_public_encrypt"] = "bool openssl_public_encrypt(string data, string crypted, mixed key [, int padding])"
let s:phpprotos["openssl_public_decrypt"] = "bool openssl_public_decrypt(string data, string crypted, resource key [, int padding])"
let s:phpprotos["openssl_error_string"] = "mixed openssl_error_string(void)"
let s:phpprotos["openssl_sign"] = "bool openssl_sign(string data, &string signature, mixed key[, int signature_alg])"
let s:phpprotos["openssl_verify"] = "int openssl_verify(string data, string signature, mixed key)"
let s:phpprotos["openssl_seal"] = "int openssl_seal(string data, &string sealdata, &array ekeys, array pubkeys)"
let s:phpprotos["openssl_open"] = "bool openssl_open(string data, &string opendata, string ekey, mixed privkey)"
let s:phpprotos["SimpleXMLElement::xpath"] = "array SimpleXMLElement::xpath(string path)"
let s:phpprotos["SimpleXMLElement::registerXPathNamespace"] = "bool SimpleXMLElement::registerXPathNamespace(string prefix, string ns)"
let s:phpprotos["SimpleXMLElement::asXML"] = "string SimpleXMLElement::asXML([string filename])"
let s:phpprotos["SimpleXMLElement::getNamespaces"] = "string SimpleXMLElement::getNamespaces([bool recursve])"
let s:phpprotos["SimpleXMLElement::getDocNamespaces"] = "string SimpleXMLElement::getDocNamespaces([bool recursive])"
let s:phpprotos["SimpleXMLElement::children"] = "object SimpleXMLElement::children([string ns [, bool is_prefix]])"
let s:phpprotos["SimpleXMLElement::getName"] = "object SimpleXMLElement::getName()"
let s:phpprotos["SimpleXMLElement::attributes"] = "array SimpleXMLElement::attributes([string ns [, bool is_prefix]])"
let s:phpprotos["SimpleXMLElement::addChild"] = "void SimpleXMLElement::addChild(string qName [, string value [, string ns]])"
let s:phpprotos["SimpleXMLElement::addAttribute"] = "void SimpleXMLElement::addAttribute(string qName, string value [,string ns])"
let s:phpprotos["simplexml_load_file"] = "simplemxml_element simplexml_load_file(string filename [, string class_name [, int options [, string ns [, bool is_prefix]]]])"
let s:phpprotos["simplexml_load_string"] = "simplemxml_element simplexml_load_string(string data [, string class_name [, int options [, string ns [, bool is_prefix]]]])"
let s:phpprotos["SimpleXMLElement::__construct"] = "SimpleXMLElement::__construct(string data [, int options [, bool data_is_url [, string ns [, bool is_prefix]]]])"
let s:phpprotos["simplexml_import_dom"] = "simplemxml_element simplexml_import_dom(domNode node [, string class_name])"
let s:phpprotos["readline"] = "string readline([string prompt]) "
let s:phpprotos["readline_info"] = "mixed readline_info([string varname] [, string newvalue]) "
let s:phpprotos["readline_add_history"] = "bool readline_add_history([string prompt]) "
let s:phpprotos["readline_clear_history"] = "bool readline_clear_history(void) "
let s:phpprotos["readline_list_history"] = "array readline_list_history(void) "
let s:phpprotos["readline_read_history"] = "bool readline_read_history([string filename] [, int from] [,int to]) "
let s:phpprotos["readline_write_history"] = "bool readline_write_history([string filename]) "
let s:phpprotos["readline_completion_function"] = "bool readline_completion_function(string funcname) "
let s:phpprotos["readline_callback_handler_install"] = "void readline_callback_handler_install(string prompt, mixed callback)"
let s:phpprotos["readline_callback_read_char"] = "void readline_callback_read_char()"
let s:phpprotos["readline_callback_handler_remove"] = "bool readline_callback_handler_remove()"
let s:phpprotos["readline_redisplay"] = "void readline_redisplay(void)"
let s:phpprotos["readline_on_new_line"] = "void readline_on_new_line(void)"
let s:phpprotos["ibase_blob_create"] = "resource ibase_blob_create([resource link_identifier])"
let s:phpprotos["ibase_blob_open"] = "resource ibase_blob_open([ resource link_identifier, ] string blob_id)"
let s:phpprotos["ibase_blob_add"] = "bool ibase_blob_add(resource blob_handle, string data)"
let s:phpprotos["ibase_blob_get"] = "string ibase_blob_get(resource blob_handle, int len)"
let s:phpprotos["ibase_blob_close"] = "string ibase_blob_close(resource blob_handle)"
let s:phpprotos["ibase_blob_cancel"] = "bool ibase_blob_cancel(resource blob_handle)"
let s:phpprotos["ibase_blob_info"] = "array ibase_blob_info([ resource link_identifier, ] string blob_id)"
let s:phpprotos["ibase_blob_echo"] = "bool ibase_blob_echo([ resource link_identifier, ] string blob_id)"
let s:phpprotos["ibase_blob_import"] = "string ibase_blob_import([ resource link_identifier, ] resource file)"
let s:phpprotos["ibase_add_user"] = "bool ibase_add_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])"
let s:phpprotos["ibase_modify_user"] = "bool ibase_modify_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])"
let s:phpprotos["ibase_delete_user"] = "bool ibase_delete_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])"
let s:phpprotos["ibase_service_attach"] = "resource ibase_service_attach(string host, string dba_username, string dba_password)"
let s:phpprotos["ibase_service_detach"] = "bool ibase_service_detach(resource service_handle)"
let s:phpprotos["ibase_backup"] = "mixed ibase_backup(resource service_handle, string source_db, string dest_file [, int options [, bool verbose]])"
let s:phpprotos["ibase_restore"] = "mixed ibase_restore(resource service_handle, string source_file, string dest_db [, int options [, bool verbose]])"
let s:phpprotos["ibase_maintain_db"] = "bool ibase_maintain_db(resource service_handle, string db, int action [, int argument])"
let s:phpprotos["ibase_db_info"] = "string ibase_db_info(resource service_handle, string db, int action [, int argument])"
let s:phpprotos["ibase_server_info"] = "string ibase_server_info(resource service_handle, int action)"
let s:phpprotos["ibase_query"] = "mixed ibase_query([resource link_identifier, [ resource link_identifier, ]] string query [, mixed bind_arg [, mixed bind_arg [, ...]]])"
let s:phpprotos["ibase_affected_rows"] = "int ibase_affected_rows( [ resource link_identifier ] )"
let s:phpprotos["ibase_num_rows"] = "int ibase_num_rows( resource result_identifier ) "
let s:phpprotos["ibase_fetch_row"] = "array ibase_fetch_row(resource result [, int fetch_flags])"
let s:phpprotos["ibase_fetch_assoc"] = "array ibase_fetch_assoc(resource result [, int fetch_flags])"
let s:phpprotos["ibase_fetch_object"] = "object ibase_fetch_object(resource result [, int fetch_flags])"
let s:phpprotos["ibase_name_result"] = "bool ibase_name_result(resource result, string name)"
let s:phpprotos["ibase_free_result"] = "bool ibase_free_result(resource result)"
let s:phpprotos["ibase_prepare"] = "resource ibase_prepare([resource link_identifier, ] string query)"
let s:phpprotos["ibase_execute"] = "mixed ibase_execute(resource query [, mixed bind_arg [, mixed bind_arg [, ...]]])"
let s:phpprotos["ibase_free_query"] = "bool ibase_free_query(resource query)"
let s:phpprotos["ibase_num_fields"] = "int ibase_num_fields(resource query_result)"
let s:phpprotos["ibase_field_info"] = "array ibase_field_info(resource query_result, int field_number)"
let s:phpprotos["ibase_num_params"] = "int ibase_num_params(resource query)"
let s:phpprotos["ibase_param_info"] = "array ibase_param_info(resource query, int field_number)"
let s:phpprotos["ibase_wait_event"] = "string ibase_wait_event([resource link_identifier,] string event [, string event [, ...]])"
let s:phpprotos["ibase_set_event_handler"] = "resource ibase_set_event_handler([resource link_identifier,] callback handler, string event [, string event [, ...]])"
let s:phpprotos["ibase_free_event_handler"] = "bool ibase_free_event_handler(resource event)"
let s:phpprotos["ibase_errmsg"] = "string ibase_errmsg(void) "
let s:phpprotos["ibase_errcode"] = "int ibase_errcode(void) "
let s:phpprotos["ibase_connect"] = "resource ibase_connect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])"
let s:phpprotos["ibase_pconnect"] = "resource ibase_pconnect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])"
let s:phpprotos["ibase_close"] = "bool ibase_close([resource link_identifier])"
let s:phpprotos["ibase_drop_db"] = "bool ibase_drop_db([resource link_identifier])"
let s:phpprotos["ibase_trans"] = "resource ibase_trans([int trans_args [, resource link_identifier [, ... ], int trans_args [, resource link_identifier [, ... ]] [, ...]]])"
let s:phpprotos["ibase_commit"] = "bool ibase_commit( resource link_identifier )"
let s:phpprotos["ibase_rollback"] = "bool ibase_rollback( resource link_identifier )"
let s:phpprotos["ibase_commit_ret"] = "bool ibase_commit_ret( resource link_identifier )"
let s:phpprotos["ibase_rollback_ret"] = "bool ibase_rollback_ret( resource link_identifier )"
let s:phpprotos["ibase_gen_id"] = "int ibase_gen_id(string generator [, int increment [, resource link_identifier ]])"
let s:phpprotos["XMLReader::close"] = "boolean XMLReader::close()"
let s:phpprotos["XMLReader::getAttribute"] = "string XMLReader::getAttribute(string name)"
let s:phpprotos["XMLReader::getAttributeNo"] = "string XMLReader::getAttributeNo(int index)"
let s:phpprotos["XMLReader::getAttributeNs"] = "string XMLReader::getAttributeNs(string name, string namespaceURI)"
let s:phpprotos["XMLReader::getParserProperty"] = "boolean XMLReader::getParserProperty(int property)"
let s:phpprotos["XMLReader::isValid"] = "boolean XMLReader::isValid()"
let s:phpprotos["XMLReader::lookupNamespace"] = "string XMLReader::lookupNamespace(string prefix)"
let s:phpprotos["XMLReader::moveToAttribute"] = "boolean XMLReader::moveToAttribute(string name)"
let s:phpprotos["XMLReader::moveToAttributeNo"] = "boolean XMLReader::moveToAttributeNo(int index)"
let s:phpprotos["XMLReader::moveToAttributeNs"] = "boolean XMLReader::moveToAttributeNs(string name, string namespaceURI)"
let s:phpprotos["XMLReader::moveToElement"] = "boolean XMLReader::moveToElement()"
let s:phpprotos["XMLReader::moveToFirstAttribute"] = "boolean XMLReader::moveToFirstAttribute()"
let s:phpprotos["XMLReader::moveToNextAttribute"] = "boolean XMLReader::moveToNextAttribute()"
let s:phpprotos["XMLReader::read"] = "boolean XMLReader::read()"
let s:phpprotos["XMLReader::next"] = "boolean XMLReader::next([string localname])"
let s:phpprotos["XMLReader::open"] = "boolean XMLReader::open(string URI [, string encoding [, int options]])"
let s:phpprotos["XMLReader::readInnerXml"] = "boolean XMLReader::readInnerXml()"
let s:phpprotos["XMLReader::readOuterXml"] = "boolean XMLReader::readOuterXml()"
let s:phpprotos["XMLReader::readString"] = "boolean XMLReader::readString()"
let s:phpprotos["XMLReader::setSchema"] = "boolean XMLReader::setSchema(string filename)"
let s:phpprotos["XMLReader::setParserProperty"] = "boolean XMLReader::setParserProperty(int property, boolean value)"
let s:phpprotos["XMLReader::setRelaxNGSchema"] = "boolean XMLReader::setRelaxNGSchema(string filename)"
let s:phpprotos["XMLReader::setRelaxNGSchemaSource"] = "boolean XMLReader::setRelaxNGSchemaSource(string source)"
let s:phpprotos["XMLReader::XML"] = "boolean XMLReader::XML(string source [, string encoding [, int options]])"
let s:phpprotos["XMLReader::expand"] = "boolean XMLReader::expand()"
let s:phpprotos["xmlwriter_set_indent"] = "bool xmlwriter_set_indent(resource xmlwriter, bool indent)"
let s:phpprotos["xmlwriter_set_indent_string"] = "bool xmlwriter_set_indent_string(resource xmlwriter, string indentString)"
let s:phpprotos["xmlwriter_start_attribute"] = "bool xmlwriter_start_attribute(resource xmlwriter, string name)"
let s:phpprotos["xmlwriter_end_attribute"] = "bool xmlwriter_end_attribute(resource xmlwriter)"
let s:phpprotos["xmlwriter_start_attribute_ns"] = "bool xmlwriter_start_attribute_ns(resource xmlwriter, string prefix, string name, string uri)"
let s:phpprotos["xmlwriter_write_attribute"] = "bool xmlwriter_write_attribute(resource xmlwriter, string name, string content)"
let s:phpprotos["xmlwriter_write_attribute_ns"] = "bool xmlwriter_write_attribute_ns(resource xmlwriter, string prefix, string name, string uri, string content)"
let s:phpprotos["xmlwriter_start_element"] = "bool xmlwriter_start_element(resource xmlwriter, string name)"
let s:phpprotos["xmlwriter_start_element_ns"] = "bool xmlwriter_start_element_ns(resource xmlwriter, string prefix, string name, string uri)"
let s:phpprotos["xmlwriter_end_element"] = "bool xmlwriter_end_element(resource xmlwriter)"
let s:phpprotos["xmlwriter_full_end_element"] = "bool xmlwriter_full_end_element(resource xmlwriter)"
let s:phpprotos["xmlwriter_write_element"] = "bool xmlwriter_write_element(resource xmlwriter, string name[, string content])"
let s:phpprotos["xmlwriter_write_element_ns"] = "bool xmlwriter_write_element_ns(resource xmlwriter, string prefix, string name, string uri[, string content])"
let s:phpprotos["xmlwriter_start_pi"] = "bool xmlwriter_start_pi(resource xmlwriter, string target)"
let s:phpprotos["xmlwriter_end_pi"] = "bool xmlwriter_end_pi(resource xmlwriter)"
let s:phpprotos["xmlwriter_write_pi"] = "bool xmlwriter_write_pi(resource xmlwriter, string target, string content)"
let s:phpprotos["xmlwriter_start_cdata"] = "bool xmlwriter_start_cdata(resource xmlwriter)"
let s:phpprotos["xmlwriter_end_cdata"] = "bool xmlwriter_end_cdata(resource xmlwriter)"
let s:phpprotos["xmlwriter_write_cdata"] = "bool xmlwriter_write_cdata(resource xmlwriter, string content)"
let s:phpprotos["xmlwriter_write_raw"] = "bool xmlwriter_write_raw(resource xmlwriter, string content)"
let s:phpprotos["xmlwriter_text"] = "bool xmlwriter_text(resource xmlwriter, string content)"
let s:phpprotos["xmlwriter_start_comment"] = "bool xmlwriter_start_comment(resource xmlwriter)"
let s:phpprotos["xmlwriter_end_comment"] = "bool xmlwriter_end_comment(resource xmlwriter)"
let s:phpprotos["xmlwriter_write_comment"] = "bool xmlwriter_write_comment(resource xmlwriter, string content)"
let s:phpprotos["xmlwriter_start_document"] = "bool xmlwriter_start_document(resource xmlwriter, string version, string encoding, string standalone)"
let s:phpprotos["xmlwriter_end_document"] = "bool xmlwriter_end_document(resource xmlwriter)"
let s:phpprotos["xmlwriter_start_dtd"] = "bool xmlwriter_start_dtd(resource xmlwriter, string name, string pubid, string sysid)"
let s:phpprotos["xmlwriter_end_dtd"] = "bool xmlwriter_end_dtd(resource xmlwriter)"
let s:phpprotos["xmlwriter_write_dtd"] = "bool xmlwriter_write_dtd(resource xmlwriter, string name, string pubid, string sysid, string subset)"
let s:phpprotos["xmlwriter_start_dtd_element"] = "bool xmlwriter_start_dtd_element(resource xmlwriter, string name)"
let s:phpprotos["xmlwriter_end_dtd_element"] = "bool xmlwriter_end_dtd_element(resource xmlwriter)"
let s:phpprotos["xmlwriter_write_dtd_element"] = "bool xmlwriter_write_dtd_element(resource xmlwriter, string name, string content)"
let s:phpprotos["xmlwriter_start_dtd_attlist"] = "bool xmlwriter_start_dtd_attlist(resource xmlwriter, string name)"
let s:phpprotos["xmlwriter_end_dtd_attlist"] = "bool xmlwriter_end_dtd_attlist(resource xmlwriter)"
let s:phpprotos["xmlwriter_write_dtd_attlist"] = "bool xmlwriter_write_dtd_attlist(resource xmlwriter, string name, string content)"
let s:phpprotos["xmlwriter_start_dtd_entity"] = "bool xmlwriter_start_dtd_entity(resource xmlwriter, string name, bool isparam)"
let s:phpprotos["xmlwriter_end_dtd_entity"] = "bool xmlwriter_end_dtd_entity(resource xmlwriter)"
let s:phpprotos["xmlwriter_write_dtd_entity"] = "bool xmlwriter_write_dtd_entity(resource xmlwriter, string name, string content [, int pe [, string pubid [, string sysid [, string ndataid]]]])"
let s:phpprotos["xmlwriter_open_uri"] = "resource xmlwriter_open_uri(resource xmlwriter, string source)"
let s:phpprotos["xmlwriter_open_memory"] = "resource xmlwriter_open_memory()"
let s:phpprotos["xmlwriter_output_memory"] = "string xmlwriter_output_memory(resource xmlwriter [,bool flush])"
let s:phpprotos["xmlwriter_flush"] = "mixed xmlwriter_flush(resource xmlwriter [,bool empty])"
let s:phpprotos["zend_version"] = "string zend_version(void)"
let s:phpprotos["func_num_args"] = "int func_num_args(void)"
let s:phpprotos["func_get_arg"] = "mixed func_get_arg(int arg_num)"
let s:phpprotos["func_get_args"] = "array func_get_args()"
let s:phpprotos["strlen"] = "int strlen(string str)"
let s:phpprotos["strcmp"] = "int strcmp(string str1, string str2)"
let s:phpprotos["strncmp"] = "int strncmp(string str1, string str2, int len)"
let s:phpprotos["strcasecmp"] = "int strcasecmp(string str1, string str2)"
let s:phpprotos["strncasecmp"] = "int strncasecmp(string str1, string str2, int len)"
let s:phpprotos["each"] = "array each(array arr)"
let s:phpprotos["error_reporting"] = "int error_reporting(int new_error_level=null)"
let s:phpprotos["define"] = "bool define(string constant_name, mixed value, boolean case_sensitive=true)"
let s:phpprotos["defined"] = "bool defined(string constant_name)"
let s:phpprotos["get_class"] = "string get_class([object object])"
let s:phpprotos["get_parent_class"] = "string get_parent_class([mixed object])"
let s:phpprotos["is_subclass_of"] = "bool is_subclass_of(object object, string class_name)"
let s:phpprotos["is_a"] = "bool is_a(object object, string class_name)"
let s:phpprotos["get_class_vars"] = "array get_class_vars(string class_name)"
let s:phpprotos["get_object_vars"] = "array get_object_vars(object obj)"
let s:phpprotos["get_class_methods"] = "array get_class_methods(mixed class)"
let s:phpprotos["method_exists"] = "bool method_exists(object object, string method)"
let s:phpprotos["property_exists"] = "bool property_exists(mixed object_or_class, string property_name)"
let s:phpprotos["class_exists"] = "bool class_exists(string classname [, bool autoload])"
let s:phpprotos["interface_exists"] = "bool interface_exists(string classname [, bool autoload])"
let s:phpprotos["function_exists"] = "bool function_exists(string function_name) "
let s:phpprotos["leak"] = "void leak(int num_bytes=3)"
let s:phpprotos["get_included_files"] = "array get_included_files(void)"
let s:phpprotos["trigger_error"] = "void trigger_error(string messsage [, int error_type])"
let s:phpprotos["set_error_handler"] = "string set_error_handler(string error_handler [, int error_types])"
let s:phpprotos["restore_error_handler"] = "void restore_error_handler(void)"
let s:phpprotos["set_exception_handler"] = "string set_exception_handler(callable exception_handler)"
let s:phpprotos["restore_exception_handler"] = "void restore_exception_handler(void)"
let s:phpprotos["get_declared_classes"] = "array get_declared_classes()"
let s:phpprotos["get_declared_interfaces"] = "array get_declared_interfaces()"
let s:phpprotos["get_defined_functions"] = "array get_defined_functions(void)"
let s:phpprotos["get_defined_vars"] = "array get_defined_vars(void)"
let s:phpprotos["create_function"] = "string create_function(string args, string code)"
let s:phpprotos["get_resource_type"] = "string get_resource_type(resource res)"
let s:phpprotos["get_loaded_extensions"] = "array get_loaded_extensions([bool zend_extensions]) U"
let s:phpprotos["get_defined_constants"] = "array get_defined_constants([mixed categorize])"
let s:phpprotos["debug_print_backtrace"] = "void debug_print_backtrace(void) */"
let s:phpprotos["debug_backtrace"] = "array debug_backtrace(void)"
let s:phpprotos["extension_loaded"] = "bool extension_loaded(string extension_name)"
let s:phpprotos["get_extension_funcs"] = "array get_extension_funcs(string extension_name)"
let s:phpprotos["Exception::__clone"] = "Exception Exception::__clone()"
let s:phpprotos["Exception::__construct"] = "Exception::__construct(string message, int code)"
let s:phpprotos["ErrorException::__construct"] = "ErrorException::__construct(string message, int code, int severity [, string filename [, int lineno]])"
let s:phpprotos["Exception::getFile"] = "string Exception::getFile()"
let s:phpprotos["Exception::getLine"] = "int Exception::getLine()"
let s:phpprotos["Exception::getMessage"] = "string Exception::getMessage()"
let s:phpprotos["Exception::getCode"] = "int Exception::getCode()"
let s:phpprotos["Exception::getTrace"] = "array Exception::getTrace()"
let s:phpprotos["ErrorException::getSeverity"] = "int ErrorException::getSeverity()"
let s:phpprotos["Exception::getTraceAsString"] = "string Exception::getTraceAsString()"
let s:phpprotos["Exception::__toString"] = "string Exception::__toString()"
let s:phpprotos["stream_wrapper_register"] = "bool stream_wrapper_register(string protocol, string classname[, integer flags])"
let s:phpprotos["stream_wrapper_unregister"] = "bool stream_wrapper_unregister(string protocol)"
let s:phpprotos["stream_wrapper_restore"] = "bool stream_wrapper_restore(string protocol)"
let s:phpprotos["set_time_limit"] = "bool set_time_limit(int seconds)"
let s:phpprotos["ob_list_handlers"] = "false|array ob_list_handlers()"
let s:phpprotos["ob_start"] = "bool ob_start([ string|array user_function [, int chunk_size [, bool erase]]])"
let s:phpprotos["ob_flush"] = "bool ob_flush(void)"
let s:phpprotos["ob_clean"] = "bool ob_clean(void)"
let s:phpprotos["ob_end_flush"] = "bool ob_end_flush(void)"
let s:phpprotos["ob_end_clean"] = "bool ob_end_clean(void)"
let s:phpprotos["ob_get_flush"] = "bool ob_get_flush(void)"
let s:phpprotos["ob_get_clean"] = "bool ob_get_clean(void)"
let s:phpprotos["ob_get_contents"] = "string ob_get_contents(void)"
let s:phpprotos["ob_get_level"] = "int ob_get_level(void)"
let s:phpprotos["ob_get_length"] = "int ob_get_length(void)"
let s:phpprotos["ob_get_status"] = "false|array ob_get_status([bool full_status])"
let s:phpprotos["ob_implicit_flush"] = "void ob_implicit_flush([int flag])"
let s:phpprotos["output_reset_rewrite_vars"] = "bool output_reset_rewrite_vars(void)"
let s:phpprotos["output_add_rewrite_var"] = "bool output_add_rewrite_var(string name, string value)"
let s:phpprotos["nsapi_virtual"] = "bool nsapi_virtual(string uri)"
let s:phpprotos["nsapi_request_headers"] = "array nsapi_request_headers(void)"
let s:phpprotos["nsapi_response_headers"] = "array nsapi_response_headers(void)"
let s:phpprotos["apache_child_terminate"] = "bool apache_child_terminate(void)"
let s:phpprotos["apache_note"] = "string apache_note(string note_name [, string note_value])"
let s:phpprotos["virtual"] = "bool virtual(string filename)"
let s:phpprotos["getallheaders"] = "array getallheaders(void)"
let s:phpprotos["apache_request_headers"] = "array apache_request_headers(void)"
let s:phpprotos["apache_response_headers"] = "array apache_response_headers(void)"
let s:phpprotos["apache_setenv"] = "bool apache_setenv(string variable, string value [, bool walk_to_top])"
let s:phpprotos["apache_lookup_uri"] = "object apache_lookup_uri(string URI)"
let s:phpprotos["apache_get_version"] = "string apache_get_version(void)"
let s:phpprotos["apache_get_modules"] = "array apache_get_modules(void)"
let s:phpprotos["apache_reset_timeout"] = "bool apache_reset_timeout(void)"
let s:phpprotos["virtual"] = "bool virtual(string uri)"
let s:phpprotos["getallheaders"] = "array getallheaders(void)"
let s:phpprotos["apache_response_headers"] = "array apache_response_headers(void)"
let s:phpprotos["apache_note"] = "string apache_note(string note_name [, string note_value])"
let s:phpprotos["apache_setenv"] = "bool apache_setenv(string variable, string value [, bool walk_to_top])"
let s:phpprotos["apache_getenv"] = "bool apache_getenv(string variable [, bool walk_to_top])"
let s:phpprotos["apache_get_version"] = "string apache_get_version(void)"
let s:phpprotos["apache_get_modules"] = "array apache_get_modules(void)"
let s:phpprotos["ApacheRequest::filename"] = "string ApacheRequest::filename([string new_filename])"
let s:phpprotos["ApacheRequest::uri"] = "string ApacheRequest::uri([string new_uri])"
let s:phpprotos["ApacheRequest::unparsed_uri"] = "string ApacheRequest::unparsed_uri([string new_unparsed_uri])"
let s:phpprotos["ApacheRequest::path_info"] = "string ApacheRequest::path_info([string new_path_info])"
let s:phpprotos["ApacheRequest::args"] = "string ApacheRequest::args([string new_args])"
let s:phpprotos["ApacheRequest::boundary"] = "string ApacheRequest::boundary()"
let s:phpprotos["ApacheRequest::content_type"] = "string ApacheRequest::content_type([string new_type])"
let s:phpprotos["ApacheRequest::content_encoding"] = "string ApacheRequest::content_encoding([string new_encoding])"
let s:phpprotos["ApacheRequest::handler"] = "string ApacheRequest::handler([string new_handler])"
let s:phpprotos["ApacheRequest::the_request"] = "string ApacheRequest::the_request()"
let s:phpprotos["ApacheRequest::protocol"] = "string ApacheRequest::protocol()"
let s:phpprotos["ApacheRequest::hostname"] = "string ApacheRequest::hostname()"
let s:phpprotos["ApacheRequest::status_line"] = "string ApacheRequest::status_line([string new_status_line])"
let s:phpprotos["ApacheRequest::method"] = "string ApacheRequest::method()"
let s:phpprotos["ApacheRequest::proto_num"] = "int ApacheRequest::proto_num()"
let s:phpprotos["ApacheRequest::assbackwards"] = "int ApacheRequest::assbackwards()"
let s:phpprotos["ApacheRequest::proxyreq"] = "int ApacheRequest::proxyreq([int new_proxyreq])"
let s:phpprotos["ApacheRequest::chunked"] = "int ApacheRequest::chunked()"
let s:phpprotos["ApacheRequest::header_only"] = "int ApacheRequest::header_only()"
let s:phpprotos["ApacheRequest::request_time"] = "int ApacheRequest::request_time()"
let s:phpprotos["ApacheRequest::status"] = "int ApacheRequest::status([int new_status])"
let s:phpprotos["ApacheRequest::method_number"] = "int ApacheRequest::method_number([int method_number])"
let s:phpprotos["ApacheRequest::allowed"] = "int ApacheRequest::allowed([int allowed])"
let s:phpprotos["ApacheRequest::bytes_sent"] = "int ApacheRequest::bytes_sent()"
let s:phpprotos["ApacheRequest::mtime"] = "int ApacheRequest::mtime()"
let s:phpprotos["ApacheRequest::content_length"] = "int ApacheRequest::content_length([int new_content_length])"
let s:phpprotos["ApacheRequest::remaining"] = "int ApacheRequest::remaining()"
let s:phpprotos["ApacheRequest::no_cache"] = "int ApacheRequest::no_cache()"
let s:phpprotos["ApacheRequest::no_local_copy"] = "int ApacheRequest::no_local_copy()"
let s:phpprotos["ApacheRequest::read_body"] = "int ApacheRequest::read_body()"
let s:phpprotos["apache_request_headers_in"] = "array apache_request_headers_in()"
let s:phpprotos["apache_request_headers_out"] = "array apache_request_headers_out([{string name|array list} [, string value [, bool replace = false]]])"
let s:phpprotos["apache_request_err_headers_out"] = "array apache_request_err_headers_out([{string name|array list} [, string value [, bool replace = false]]])"
let s:phpprotos["apache_request_server_port"] = "int apache_request_server_port()"
let s:phpprotos["apache_request_remote_host"] = "int apache_request_remote_host([int type])"
let s:phpprotos["apache_request_update_mtime"] = "long apache_request_update_mtime([int dependency_mtime])"
let s:phpprotos["apache_request_set_etag"] = "void apache_request_set_etag()"
let s:phpprotos["apache_request_set_last_modified"] = "void apache_request_set_last_modified()"
let s:phpprotos["apache_request_meets_conditions"] = "long apache_request_meets_conditions()"
let s:phpprotos["apache_request_discard_request_body"] = "long apache_request_discard_request_body()"
let s:phpprotos["apache_request_satisfies"] = "long apache_request_satisfies()"
let s:phpprotos["apache_request_is_initial_req"] = "bool apache_request_is_initial_req()"
let s:phpprotos["apache_request_some_auth_required"] = "bool apache_request_some_auth_required()"
let s:phpprotos["apache_request_auth_type"] = "string apache_request_auth_type()"
let s:phpprotos["apache_request_auth_name"] = "string apache_request_auth_name()"
let s:phpprotos["apache_request_basic_auth_pw"] = "apache_request_basic_auth_pw()"
let s:phpprotos["apache_request_log_error"] = "boolean apache_request_log_error(string message, [long facility])"
let s:phpprotos["apache_request_sub_req_lookup_uri"] = "object apache_request_sub_req_lookup_uri(string uri)"
let s:phpprotos["apache_request_sub_req_lookup_file"] = "object apache_request_sub_req_lookup_file(string file)"
let s:phpprotos["apache_request_sub_req_method_uri"] = "object apache_request_sub_req_method_uri(string method, string uri)"
let s:phpprotos["apache_request_run"] = "long apache_request_run()"
let s:phpprotos["apache_child_terminate"] = "bool apache_child_terminate(void)"
let s:phpprotos["apache_note"] = "string apache_note(string note_name [, string note_value])"
let s:phpprotos["virtual"] = "bool virtual(string filename)"
let s:phpprotos["getallheaders"] = "array getallheaders(void)"
let s:phpprotos["apache_request_headers"] = "array apache_request_headers(void)"
let s:phpprotos["apache_response_headers"] = "array apache_response_headers(void)"
let s:phpprotos["apache_setenv"] = "bool apache_setenv(string variable, string value [, bool walk_to_top])"
let s:phpprotos["apache_lookup_uri"] = "object apache_lookup_uri(string URI)"
let s:phpprotos["apache_get_version"] = "string apache_get_version(void)"
let s:phpprotos["apache_get_modules"] = "array apache_get_modules(void)"
let s:phpprotos["smfi_setflags"] = "void smfi_setflags(long flags)"
let s:phpprotos["smfi_settimeout"] = "void smfi_settimeout(long timeout)"
let s:phpprotos["smfi_getsymval"] = "string smfi_getsymval(string macro)"
let s:phpprotos["smfi_setreply"] = "bool smfi_setreply(string rcode, string xcode, string message)"
let s:phpprotos["smfi_addheader"] = "bool smfi_addheader(string headerf, string headerv)"
let s:phpprotos["smfi_chgheader"] = "bool smfi_chgheader(string headerf, string headerv)"
let s:phpprotos["smfi_addrcpt"] = "bool smfi_addrcpt(string rcpt)"
let s:phpprotos["smfi_delrcpt"] = "bool smfi_delrcpt(string rcpt)"
let s:phpprotos["smfi_replacebody"] = "bool smfi_replacebody(string body)"
let s:phpprotos["virtual"] = "bool virtual(string uri)"
let s:phpprotos["getallheaders"] = "array getallheaders(void)"
let s:phpprotos["apache_response_headers"] = "array apache_response_headers(void)"
let s:phpprotos["apache_note"] = "string apache_note(string note_name [, string note_value])"
let s:phpprotos["apache_setenv"] = "bool apache_setenv(string variable, string value [, bool walk_to_top])"
let s:phpprotos["apache_getenv"] = "bool apache_getenv(string variable [, bool walk_to_top])"
let s:phpprotos["apache_get_version"] = "string apache_get_version(void)"
let s:phpprotos["apache_get_modules"] = "array apache_get_modules(void)"
