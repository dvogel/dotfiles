vim9script
# vim: nowrap

var Base64Alphabet = str2list("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", v:true)

def Bytes6From8(bytes: list<number>): list<number>
    var accum = []
    var byteAccum = 0
    var bitsUsed = 0

    for byte in bytes
        # TODO: Surely this could be collapsed into one calculation.
        if bitsUsed == 0
            add(accum, and(byte, 0b11111100) >> 2)
            byteAccum = and(byte, 0b00000011)
            bitsUsed = 2
        elseif bitsUsed == 2
            add(accum, or(byteAccum << 4, and(byte, 0b11110000) >> 4))
            byteAccum = and(byte, 0b00001111)
            bitsUsed = 4
        elseif bitsUsed == 4
            add(accum, or(byteAccum << 2, and(byte, 0b11000000) >> 6))
            add(accum, and(byte, 0b00111111))
            bitsUsed = 0
            byteAccum = 0
        endif
    endfor

    if bitsUsed > 0
        add(accum, byteAccum << 6 - bitsUsed)
    endif

    return accum
enddef

export def Base64Encode(input: string): string
    var inputBytes = str2list(input, v:true)
    var bitsRemaining: number = 0
    var remainingOrdBits: number
    var accum = []
    for byte in Bytes6From8(inputBytes)
        add(accum, Base64Alphabet[byte])
    endfor

    var paddingLen = len(accum) % 4 == 0 ? 0 : 4 - len(accum) % 4
    extend(accum, repeat(str2list("=", v:true), paddingLen))
    return list2str(accum, v:true)
enddef

def Bytes8From6(bytes: list<number>): list<number>
    var accum = []
    var byteAccum = 0
    var bitsUsed = 0

    for byte in bytes
        # TODO: Surely this could be collapsed into one calculation.
        if bitsUsed == 0
            byteAccum = byte
            bitsUsed = 6
        elseif bitsUsed == 2
            add(accum, or(byteAccum << 6, and(byte, 0b00111111)))
            bitsUsed = 0
            byteAccum = 0
        elseif bitsUsed == 4
            add(accum, or(byteAccum << 4, and(byte, 0b00111100) >> 2))
            bitsUsed = 2
            byteAccum = and(byte, 0b00000011)
        elseif bitsUsed == 6
            add(accum, or(byteAccum << 2, and(byte, 0b00110000) >> 4))
            bitsUsed = 4
            byteAccum = and(byte, 0b00001111)
        endif
    endfor

    if bitsUsed > 0
        add(accum, byteAccum)
    endif

    return accum
enddef

export def Base64Decode(input: string): string
    if empty(input)
        return ""
    endif

    # remove padding
    var inputCharCodes = filter(str2list(input, v:true), (idx, ch) => index([61, 13, 10], ch) == -1)
    # echomsg printf("inputCharCodes: %s", string(inputCharCodes))
    var inputBytes = map(inputCharCodes, (idx, ord) => index(Base64Alphabet, ord))
    # echomsg printf("inputBytes:   %s", string(inputBytes))
    var outputBytes = Bytes8From6(inputBytes)
    return list2str(outputBytes, v:true)
enddef

def SelfTestEncodeDecode(expectedDecoded: string, expectedEncoded: string)
    messages clear
    if !empty(v:errors)
        remove(v:errors, 0, len(v:errors) - 1)
    endif

    var observedEncoded = Base64Encode(expectedDecoded)
    assert_equal(expectedEncoded, observedEncoded, "Encoding is bugged")

    var observedDecoded = Base64Decode(expectedEncoded)
    assert_equal(expectedDecoded, observedDecoded, "Decoding is bugged")

    var observedEncodedAgain = Base64Encode(observedDecoded)
    assert_equal(expectedEncoded, observedEncodedAgain, "Re-encoding is bugged")

    var observedDecodedAgain = Base64Decode(observedEncoded)
    assert_equal(expectedDecoded, observedDecodedAgain, "Re-decoding is bugged")

    if empty(v:errors)
        echomsg "Pass"
    else
        echoerr v:errors
    endif
enddef

def SelfTest(): void
    SelfTestEncodeDecode(
        'ABC',
        'QUJD'
    )
    SelfTestEncodeDecode(
        'ABCD',
        'QUJDRA=='
    )
    SelfTestEncodeDecode(
        'ABCDEFGHIJKLMNOPQRSTUVWXYZABC',
        'QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkM='
    )
    SelfTestEncodeDecode(

        'QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo='
    )
enddef

g:Base64Encode = Base64Encode
g:Base64Decode = Base64Decode

SelfTest()
